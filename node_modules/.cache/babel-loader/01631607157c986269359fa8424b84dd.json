{"ast":null,"code":"\"use strict\";\n\nvar _keys = require(\"babel-runtime/core-js/object/keys\");\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _set = require(\"babel-runtime/core-js/set\");\n\nvar _set2 = _interopRequireDefault(_set);\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _map = require(\"babel-runtime/core-js/map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _isInteger = require(\"babel-runtime/core-js/number/is-integer\");\n\nvar _isInteger2 = _interopRequireDefault(_isInteger);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _metadata = require(\"babel-runtime/core-js/reflect/metadata\");\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _defineProperty = require(\"babel-runtime/core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _getOwnPropertyDescriptor = require(\"babel-runtime/core-js/object/get-own-property-descriptor\");\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = (0, _getOwnPropertyDescriptor2.default)(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && (0, _defineProperty2.default)(target, key, r), r;\n};\n\nvar __metadata = undefined && undefined.__metadata || function (k, v) {\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof _metadata2.default === \"function\") return (0, _metadata2.default)(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Channel = void 0;\n\nvar events_1 = require(\"events\");\n\nvar logger_1 = require(\"./logger\");\n\nvar members_1 = require(\"./data/members\");\n\nvar member_1 = require(\"./member\");\n\nvar messages_1 = require(\"./data/messages\");\n\nvar util_1 = require(\"./util\");\n\nvar typecheck_1 = require(\"./util/typecheck\");\n\nvar log = logger_1.Logger.scope('Channel');\nvar fieldMappings = {\n  lastMessage: 'lastMessage',\n  attributes: 'attributes',\n  createdBy: 'createdBy',\n  dateCreated: 'dateCreated',\n  dateUpdated: 'dateUpdated',\n  friendlyName: 'friendlyName',\n  lastConsumedMessageIndex: 'lastConsumedMessageIndex',\n  notificationLevel: 'notificationLevel',\n  sid: 'sid',\n  status: 'status',\n  type: 'type',\n  uniqueName: 'uniqueName',\n  state: 'state'\n};\n\nfunction parseTime(timeString) {\n  try {\n    return new Date(timeString);\n  } catch (e) {\n    return null;\n  }\n}\n/**\r\n * @classdesc A Channel represents a remote channel of communication between multiple Programmable Chat Clients\r\n * @property {any} attributes - The Channel's custom attributes\r\n * @property {String} createdBy - The identity of the User that created this Channel\r\n * @property {Date} dateCreated - The Date this Channel was created\r\n * @property {Date} dateUpdated - The Date this Channel was last updated\r\n * @property {String} friendlyName - The Channel's name\r\n * @property {Boolean} isPrivate - Whether the channel is private (as opposed to public)\r\n * @property {Number} lastConsumedMessageIndex - Index of the last Message the User has consumed in this Channel\r\n * @property {Channel#LastMessage} lastMessage - Last Message sent to this Channel\r\n * @property {Channel#NotificationLevel} notificationLevel - User Notification level for this Channel\r\n * @property {String} sid - The Channel's unique system identifier\r\n * @property {Channel#State} state - The Channel's state\r\n * @property {Channel#Status} status - The Channel's status\r\n * @property {Channel#Type} type - The Channel's type\r\n * @property {String} uniqueName - The Channel's unique name (tag)\r\n * @fires Channel#memberJoined\r\n * @fires Channel#memberLeft\r\n * @fires Channel#memberUpdated\r\n * @fires Channel#messageAdded\r\n * @fires Channel#messageRemoved\r\n * @fires Channel#messageUpdated\r\n * @fires Channel#typingEnded\r\n * @fires Channel#typingStarted\r\n * @fires Channel#updated\r\n * @fires Channel#removed\r\n */\n\n\nvar Channel = function (_events_1$EventEmitte) {\n  (0, _inherits3.default)(Channel, _events_1$EventEmitte);\n  /**\r\n   * These options can be passed to {@link Channel#sendMessage}.\r\n   * @typedef {Object} Channel#SendMediaOptions\r\n   * @property {String} contentType - content type of media\r\n   * @property {String | Buffer} media - content to post\r\n   */\n\n  /**\r\n   * The update reason for <code>updated</code> event emitted on Channel\r\n   * @typedef {('attributes' | 'createdBy' | 'dateCreated' | 'dateUpdated' |\r\n    'friendlyName' | 'lastConsumedMessageIndex' | 'state' | 'status' | 'uniqueName' | 'lastMessage' |\r\n    'notificationLevel' )} Channel#UpdateReason\r\n   */\n\n  /**\r\n   * The status of the Channel, relative to the Client: whether the Channel\r\n   * is <code>notParticipating</code> to local Client, Client is <code>invited</code> to or\r\n   * is <code>joined</code> to this Channel\r\n   * @typedef {('unknown' | 'notParticipating' | 'invited' | 'joined')} Channel#Status\r\n   */\n\n  /**\r\n   * The type of Channel (<code>public</code> or <code>private</code>).\r\n   * @typedef {('public' | 'private')} Channel#Type\r\n   */\n\n  /**\r\n   * The User's Notification level for Channel, determines whether the currently logged-in User will receive\r\n   * pushes for events in this Channel. Can be either <code>muted</code> or <code>default</code>,\r\n   * where <code>default</code> defers to global Service push configuration.\r\n   * @typedef {('default' | 'muted')} Channel#NotificationLevel\r\n   */\n\n  /**\r\n   * The Channel's state. Set to undefined if the channel is not a conversation.\r\n   * @typedef {Object | undefined} Channel#State\r\n   * @property {('active' | 'inactive' | 'closed')} current - the current state\r\n   * @property {Date} dateUpdated - date at which the latest channel state update happened\r\n   */\n\n  function Channel(services, descriptor, sid) {\n    (0, _classCallCheck3.default)(this, Channel);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Channel.__proto__ || (0, _getPrototypeOf2.default)(Channel)).call(this));\n\n    var attributes = descriptor.attributes || {};\n    var createdBy = descriptor.createdBy;\n    var dateCreated = parseTime(descriptor.dateCreated);\n    var dateUpdated = parseTime(descriptor.dateUpdated);\n    var friendlyName = descriptor.friendlyName || null;\n    var lastConsumedMessageIndex = (0, _isInteger2.default)(descriptor.lastConsumedMessageIndex) ? descriptor.lastConsumedMessageIndex : null;\n    var uniqueName = descriptor.uniqueName || null;\n\n    try {\n      (0, _stringify2.default)(attributes);\n    } catch (e) {\n      throw new Error('Attributes must be a valid JSON object.');\n    }\n\n    _this.services = services;\n    _this.sid = sid;\n    _this.entityName = descriptor.channel;\n    _this.channelState = {\n      uniqueName: uniqueName,\n      status: 'notParticipating',\n      type: descriptor.type,\n      attributes: attributes,\n      createdBy: createdBy,\n      dateCreated: dateCreated,\n      dateUpdated: dateUpdated,\n      friendlyName: friendlyName,\n      lastConsumedMessageIndex: lastConsumedMessageIndex\n    };\n\n    if (descriptor.notificationLevel) {\n      _this.channelState.notificationLevel = descriptor.notificationLevel;\n    }\n\n    _this.members = new _map2.default();\n    _this.membersEntity = new members_1.Members(_this, _this.services, _this.members);\n\n    _this.membersEntity.on('memberJoined', _this.emit.bind(_this, 'memberJoined'));\n\n    _this.membersEntity.on('memberLeft', _this.emit.bind(_this, 'memberLeft'));\n\n    _this.membersEntity.on('memberUpdated', function (args) {\n      return _this.emit('memberUpdated', args);\n    });\n\n    _this.messagesEntity = new messages_1.Messages(_this, services);\n\n    _this.messagesEntity.on('messageAdded', function (message) {\n      return _this._onMessageAdded(message);\n    });\n\n    _this.messagesEntity.on('messageUpdated', function (args) {\n      return _this.emit('messageUpdated', args);\n    });\n\n    _this.messagesEntity.on('messageRemoved', _this.emit.bind(_this, 'messageRemoved'));\n\n    return _this;\n  }\n\n  (0, _createClass3.default)(Channel, [{\n    key: \"_subscribe\",\n\n    /**\r\n     * The Channel's last message's information.\r\n     * @typedef {Object} Channel#LastMessage\r\n     * @property {Number} index - Message's index\r\n     * @property {Date} dateCreated - Message's creation date\r\n     */\n\n    /**\r\n     * Load and Subscribe to this Channel and do not subscribe to its Members and Messages.\r\n     * This or _subscribeStreams will need to be called before any events on Channel will fire.\r\n     * @returns {Promise}\r\n     * @private\r\n     */\n    value: function _subscribe() {\n      var _this2 = this;\n\n      if (this.entityPromise) {\n        return this.entityPromise;\n      }\n\n      return this.entityPromise = this.entityPromise || this.services.syncClient.document({\n        id: this.entityName,\n        mode: 'open_existing'\n      }).then(function (entity) {\n        _this2.entity = entity;\n\n        _this2.entity.on('updated', function (args) {\n          _this2._update(args.value);\n        });\n\n        _this2.entity.on('removed', function () {\n          return _this2.emit('removed', _this2);\n        });\n\n        _this2._update(_this2.entity.value);\n\n        return entity;\n      }).catch(function (err) {\n        _this2.entity = null;\n        _this2.entityPromise = null;\n\n        if (_this2.services.syncClient.connectionState != 'disconnected') {\n          log.error('Failed to get channel object', err);\n        }\n\n        log.debug('ERROR: Failed to get channel object', err);\n        throw err;\n      });\n    }\n    /**\r\n     * Load the attributes of this Channel and instantiate its Members and Messages.\r\n     * This or _subscribe will need to be called before any events on Channel will fire.\r\n     * This will need to be called before any events on Members or Messages will fire\r\n     * @returns {Promise}\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_subscribeStreams\",\n    value: function () {\n      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n        var messagesObjectName, rosterObjectName;\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this._subscribe();\n\n              case 3:\n                log.trace('_subscribeStreams, this.entity.value=', this.entity.value);\n                messagesObjectName = this.entity.value.messages;\n                rosterObjectName = this.entity.value.roster;\n                _context.next = 8;\n                return _promise2.default.all([this.messagesEntity.subscribe(messagesObjectName), this.membersEntity.subscribe(rosterObjectName)]);\n\n              case 8:\n                _context.next = 15;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](0);\n\n                if (this.services.syncClient.connectionState !== 'disconnected') {\n                  log.error('Failed to subscribe on channel objects', this.sid, _context.t0);\n                }\n\n                log.debug('ERROR: Failed to subscribe on channel objects', this.sid, _context.t0);\n                throw _context.t0;\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 10]]);\n      }));\n\n      function _subscribeStreams() {\n        return _ref.apply(this, arguments);\n      }\n\n      return _subscribeStreams;\n    }()\n    /**\r\n     * Stop listening for and firing events on this Channel.\r\n     * @returns {Promise}\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_unsubscribe\",\n    value: function () {\n      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {\n        return _regenerator2.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.isPrivate && this.entity)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                _context2.next = 3;\n                return this.entity.close();\n\n              case 3:\n                this.entity = null;\n                this.entityPromise = null;\n\n              case 5:\n                return _context2.abrupt(\"return\", _promise2.default.all([this.membersEntity.unsubscribe(), this.messagesEntity.unsubscribe()]));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _unsubscribe() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return _unsubscribe;\n    }()\n    /**\r\n     * Set channel status\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_setStatus\",\n    value: function _setStatus(status, source) {\n      var _this3 = this;\n\n      this.statusSource = source;\n\n      if (this.channelState.status === status) {\n        return;\n      }\n\n      this.channelState.status = status;\n\n      if (status === 'joined') {\n        this._subscribeStreams().catch(function (err) {\n          log.debug('ERROR while setting channel status ' + status, err);\n\n          if (_this3.services.syncClient.connectionState !== 'disconnected') {\n            throw err;\n          }\n        });\n      } else if (status === 'invited') {\n        this._subscribe().catch(function (err) {\n          log.debug('ERROR while setting channel status ' + status, err);\n\n          if (_this3.services.syncClient.connectionState !== 'disconnected') {\n            throw err;\n          }\n        });\n      } else if (this.entityPromise) {\n        this._unsubscribe().catch(function (err) {\n          log.debug('ERROR while setting channel status ' + status, err);\n\n          if (_this3.services.syncClient.connectionState !== 'disconnected') {\n            throw err;\n          }\n        });\n      }\n    }\n    /**\r\n     * If channel's status update source\r\n     * @private\r\n     * @return {Channels.DataSource}\r\n     */\n\n  }, {\n    key: \"_statusSource\",\n    value: function _statusSource() {\n      return this.statusSource;\n    }\n  }, {\n    key: \"_update\",\n\n    /**\r\n     * Updates local channel object with new values\r\n     * @private\r\n     */\n    value: function _update(update) {\n      var _a, _b, _c, _d, _e;\n\n      log.trace('_update', update);\n      Channel.preprocessUpdate(update, this.sid);\n      var updateReasons = new _set2.default();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = (0, _getIterator3.default)((0, _keys2.default)(update)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var key = _step.value;\n          var localKey = fieldMappings[key];\n\n          if (!localKey) {\n            continue;\n          }\n\n          switch (localKey) {\n            case fieldMappings.status:\n              if (!update.status || update.status === 'unknown' || this.channelState.status === update.status) {\n                break;\n              }\n\n              this.channelState.status = update.status;\n              updateReasons.add(localKey);\n              break;\n\n            case fieldMappings.attributes:\n              if (util_1.isDeepEqual(this.channelState.attributes, update.attributes)) {\n                break;\n              }\n\n              this.channelState.attributes = update.attributes;\n              updateReasons.add(localKey);\n              break;\n\n            case fieldMappings.lastConsumedMessageIndex:\n              if (update.lastConsumedMessageIndex === undefined || update.lastConsumedMessageIndex === this.channelState.lastConsumedMessageIndex) {\n                break;\n              }\n\n              this.channelState.lastConsumedMessageIndex = update.lastConsumedMessageIndex;\n              updateReasons.add(localKey);\n              break;\n\n            case fieldMappings.lastMessage:\n              if (this.channelState.lastMessage && !update.lastMessage) {\n                delete this.channelState.lastMessage;\n                updateReasons.add(localKey);\n                break;\n              }\n\n              this.channelState.lastMessage = this.channelState.lastMessage || {};\n\n              if (((_a = update.lastMessage) === null || _a === void 0 ? void 0 : _a.index) !== undefined && update.lastMessage.index !== this.channelState.lastMessage.index) {\n                this.channelState.lastMessage.index = update.lastMessage.index;\n                updateReasons.add(localKey);\n              }\n\n              if (((_b = update.lastMessage) === null || _b === void 0 ? void 0 : _b.timestamp) !== undefined && ((_d = (_c = this.channelState.lastMessage) === null || _c === void 0 ? void 0 : _c.dateCreated) === null || _d === void 0 ? void 0 : _d.getTime()) !== update.lastMessage.timestamp.getTime()) {\n                this.channelState.lastMessage.dateCreated = update.lastMessage.timestamp;\n                updateReasons.add(localKey);\n              }\n\n              if (util_1.isDeepEqual(this.channelState.lastMessage, {})) {\n                delete this.channelState.lastMessage;\n              }\n\n              break;\n\n            case fieldMappings.state:\n              var state = update.state || undefined;\n\n              if (state !== undefined) {\n                state.dateUpdated = new Date(state.dateUpdated);\n              }\n\n              if (util_1.isDeepEqual(this.channelState.state, state)) {\n                break;\n              }\n\n              this.channelState.state = state;\n              updateReasons.add(localKey);\n              break;\n\n            default:\n              var isDate = update[key] instanceof Date;\n              var keysMatchAsDates = isDate && ((_e = this.channelState[localKey]) === null || _e === void 0 ? void 0 : _e.getTime()) === update[key].getTime();\n              var keysMatchAsNonDates = !isDate && this[localKey] === update[key];\n\n              if (keysMatchAsDates || keysMatchAsNonDates) {\n                break;\n              }\n\n              this.channelState[localKey] = update[key];\n              updateReasons.add(localKey);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (updateReasons.size > 0) {\n        this.emit('updated', {\n          channel: this,\n          updateReasons: [].concat((0, _toConsumableArray3.default)(updateReasons))\n        });\n      }\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_onMessageAdded\",\n    value: function _onMessageAdded(message) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = (0, _getIterator3.default)(this.members.values()), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var member = _step2.value;\n\n          if (member.identity === message.author) {\n            member._endTyping();\n\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      this.emit('messageAdded', message);\n    }\n    /**\r\n     * Add a participant to the Channel by its Identity.\r\n     * @param {String} identity - Identity of the Client to add\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: \"add\",\n    value: function () {\n      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(identity) {\n        return _regenerator2.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.membersEntity.add(identity));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function add(_x) {\n        return _ref3.apply(this, arguments);\n      }\n\n      return add;\n    }()\n    /**\r\n     * Advance last consumed Channel's Message index to current consumption horizon.\r\n     * Rejects if User is not Member of Channel.\r\n     * Last consumed Message index is updated only if new index value is higher than previous.\r\n     * @param {Number} index - Message index to advance to as last read\r\n     * @returns {Promise<number>} resulting unread messages count in the channel\r\n     */\n\n  }, {\n    key: \"advanceLastConsumedMessageIndex\",\n    value: function () {\n      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(index) {\n        return _regenerator2.default.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                return _context4.abrupt(\"return\", this.services.consumptionHorizon.advanceLastConsumedMessageIndexForChannel(this.sid, index, this.lastConsumedMessageIndex));\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function advanceLastConsumedMessageIndex(_x2) {\n        return _ref4.apply(this, arguments);\n      }\n\n      return advanceLastConsumedMessageIndex;\n    }()\n    /**\r\n     * Decline an invitation to the Channel and unsubscribe from its events.\r\n     * @returns {Promise<Channel>}\r\n     */\n\n  }, {\n    key: \"decline\",\n    value: function () {\n      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {\n        return _regenerator2.default.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.services.session.addCommand('declineInvitation', {\n                  channelSid: this.sid\n                });\n\n              case 2:\n                return _context5.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function decline() {\n        return _ref5.apply(this, arguments);\n      }\n\n      return decline;\n    }()\n    /**\r\n     * Delete the Channel and unsubscribe from its events.\r\n     * @returns {Promise<Channel>}\r\n     */\n\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {\n        return _regenerator2.default.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.services.session.addCommand('destroyChannel', {\n                  channelSid: this.sid\n                });\n\n              case 2:\n                return _context6.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _delete() {\n        return _ref6.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n    /**\r\n     * Get the custom attributes of this Channel.<br/>\r\n     *\r\n     * <i>NOTE: {@link Channel}'s <code>attributes</code> property will be empty for public channels until this function is called.</i>\r\n     * @returns {Promise<any>} attributes of this Channel\r\n     */\n\n  }, {\n    key: \"getAttributes\",\n    value: function () {\n      var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {\n        return _regenerator2.default.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this._subscribe();\n\n              case 2:\n                return _context7.abrupt(\"return\", this.attributes);\n\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getAttributes() {\n        return _ref7.apply(this, arguments);\n      }\n\n      return getAttributes;\n    }()\n    /**\r\n     * Returns messages from channel using paginator interface.\r\n     * @param {Number} [pageSize=30] Number of messages to return in single chunk\r\n     * @param {Number} [anchor] - Index of newest Message to fetch. From the end by default\r\n     * @param {('backwards'|'forward')} [direction=backwards] - Query direction. By default it query backwards\r\n     *                                                          from newer to older. 'forward' will query in opposite direction\r\n     * @returns {Promise<Paginator<Message>>} page of messages\r\n     */\n\n  }, {\n    key: \"getMessages\",\n    value: function () {\n      var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(pageSize, anchor, direction) {\n        return _regenerator2.default.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                return _context8.abrupt(\"return\", this.messagesEntity.getMessages(pageSize, anchor, direction));\n\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getMessages(_x3, _x4, _x5) {\n        return _ref8.apply(this, arguments);\n      }\n\n      return getMessages;\n    }()\n    /**\r\n     * Get a list of all Members joined to this Channel.\r\n     * @returns {Promise<Member[]>}\r\n     */\n\n  }, {\n    key: \"getMembers\",\n    value: function () {\n      var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {\n        return _regenerator2.default.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                return _context9.abrupt(\"return\", this.membersEntity.getMembers());\n\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getMembers() {\n        return _ref9.apply(this, arguments);\n      }\n\n      return getMembers;\n    }()\n    /**\r\n     * Get channel members count.\r\n     * <br/>\r\n     * This method is semi-realtime. This means that this data will be eventually correct,\r\n     * but will also possibly be incorrect for a few seconds. The Chat system does not\r\n     * provide real time events for counter values changes.\r\n     * <br/>\r\n     * So this is quite useful for any UI badges, but is not recommended\r\n     * to build any core application logic based on these counters being accurate in real time.\r\n     * @returns {Promise<number>}\r\n     */\n\n  }, {\n    key: \"getMembersCount\",\n    value: function () {\n      var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {\n        var links, url, response;\n        return _regenerator2.default.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.services.session.getSessionLinks();\n\n              case 2:\n                links = _context10.sent;\n                url = new util_1.UriBuilder(links.publicChannelsUrl).path(this.sid).build();\n                _context10.next = 6;\n                return this.services.network.get(url);\n\n              case 6:\n                response = _context10.sent;\n                return _context10.abrupt(\"return\", response.body.members_count);\n\n              case 8:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getMembersCount() {\n        return _ref10.apply(this, arguments);\n      }\n\n      return getMembersCount;\n    }()\n    /**\r\n     * Get a Member by its SID.\r\n     * @param {String} memberSid - Member sid\r\n     * @returns {Promise<Member>}\r\n     */\n\n  }, {\n    key: \"getMemberBySid\",\n    value: function () {\n      var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11(memberSid) {\n        return _regenerator2.default.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                return _context11.abrupt(\"return\", this.membersEntity.getMemberBySid(memberSid));\n\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getMemberBySid(_x6) {\n        return _ref11.apply(this, arguments);\n      }\n\n      return getMemberBySid;\n    }()\n    /**\r\n     * Get a Member by its identity.\r\n     * @param {String} identity - Member identity\r\n     * @returns {Promise<Member>}\r\n     */\n\n  }, {\n    key: \"getMemberByIdentity\",\n    value: function () {\n      var _ref12 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12(identity) {\n        return _regenerator2.default.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                return _context12.abrupt(\"return\", this.membersEntity.getMemberByIdentity(identity));\n\n              case 1:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getMemberByIdentity(_x7) {\n        return _ref12.apply(this, arguments);\n      }\n\n      return getMemberByIdentity;\n    }()\n    /**\r\n     * Get total message count in a channel.\r\n     * <br/>\r\n     * This method is semi-realtime. This means that this data will be eventually correct,\r\n     * but will also possibly be incorrect for a few seconds. The Chat system does not\r\n     * provide real time events for counter values changes.\r\n     * <br/>\r\n     * So this is quite useful for any UI badges, but is not recommended\r\n     * to build any core application logic based on these counters being accurate in real time.\r\n     * @returns {Promise<number>}\r\n     */\n\n  }, {\n    key: \"getMessagesCount\",\n    value: function () {\n      var _ref13 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee13() {\n        var links, url, response;\n        return _regenerator2.default.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.services.session.getSessionLinks();\n\n              case 2:\n                links = _context13.sent;\n                url = new util_1.UriBuilder(links.publicChannelsUrl).path(this.sid).build();\n                _context13.next = 6;\n                return this.services.network.get(url);\n\n              case 6:\n                response = _context13.sent;\n                return _context13.abrupt(\"return\", response.body.messages_count);\n\n              case 8:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getMessagesCount() {\n        return _ref13.apply(this, arguments);\n      }\n\n      return getMessagesCount;\n    }()\n    /**\r\n     * Get unconsumed messages count for a User if they are a Member of this Channel.\r\n     * Rejects if the User is not a Member of the Channel.\r\n     * <br/>\r\n     * This method is semi-realtime. This means that this data will be eventually correct,\r\n     * but will also possibly be incorrect for a few seconds. The Chat system does not\r\n     * provide real time events for counter values changes.\r\n     * <br/>\r\n     * So this is quite useful for any “unread messages count” badges, but is not recommended\r\n     * to build any core application logic based on these counters being accurate in real time.\r\n     * @returns {Promise<number|null>}\r\n     */\n\n  }, {\n    key: \"getUnconsumedMessagesCount\",\n    value: function () {\n      var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee14() {\n        var links, url, response;\n        return _regenerator2.default.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.services.session.getSessionLinks();\n\n              case 2:\n                links = _context14.sent;\n                url = new util_1.UriBuilder(links.myChannelsUrl).arg('ChannelSid', this.sid).build();\n                _context14.next = 6;\n                return this.services.network.get(url);\n\n              case 6:\n                response = _context14.sent;\n\n                if (!(response.body.channels.length && response.body.channels[0].channel_sid == this.sid)) {\n                  _context14.next = 11;\n                  break;\n                }\n\n                if (!(typeof response.body.channels[0].unread_messages_count !== 'undefined' && response.body.channels[0].unread_messages_count != null)) {\n                  _context14.next = 10;\n                  break;\n                }\n\n                return _context14.abrupt(\"return\", response.body.channels[0].unread_messages_count);\n\n              case 10:\n                return _context14.abrupt(\"return\", null);\n\n              case 11:\n                throw new Error('Channel is not in user channels list');\n\n              case 12:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getUnconsumedMessagesCount() {\n        return _ref14.apply(this, arguments);\n      }\n\n      return getUnconsumedMessagesCount;\n    }()\n    /**\r\n     * Invite a user to the Channel by their Identity.\r\n     * @param {String} identity - Identity of the user to invite\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: \"invite\",\n    value: function () {\n      var _ref15 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee15(identity) {\n        return _regenerator2.default.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.membersEntity.invite(identity);\n\n              case 2:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function invite(_x8) {\n        return _ref15.apply(this, arguments);\n      }\n\n      return invite;\n    }()\n    /**\r\n     * Join the Channel and subscribe to its events.\r\n     * @returns {Promise<Channel>}\r\n     */\n\n  }, {\n    key: \"join\",\n    value: function () {\n      var _ref16 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee16() {\n        return _regenerator2.default.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.services.session.addCommand('joinChannelV2', {\n                  channelSid: this.sid\n                });\n\n              case 2:\n                return _context16.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function join() {\n        return _ref16.apply(this, arguments);\n      }\n\n      return join;\n    }()\n    /**\r\n     * Leave the Channel.\r\n     * @returns {Promise<Channel>}\r\n     */\n\n  }, {\n    key: \"leave\",\n    value: function () {\n      var _ref17 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee17() {\n        return _regenerator2.default.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                if (!(this.channelState.status === 'joined')) {\n                  _context17.next = 3;\n                  break;\n                }\n\n                _context17.next = 3;\n                return this.services.session.addCommand('leaveChannel', {\n                  channelSid: this.sid\n                });\n\n              case 3:\n                return _context17.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function leave() {\n        return _ref17.apply(this, arguments);\n      }\n\n      return leave;\n    }()\n    /**\r\n     * Remove a Member from the Channel.\r\n     * @param {String|Member} member - Member to remove. Could either be an identity string or a Member instance.\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: \"removeMember\",\n    value: function () {\n      var _ref18 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee18(member) {\n        return _regenerator2.default.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                if (!(member instanceof member_1.Member)) {\n                  _context18.next = 4;\n                  break;\n                }\n\n                _context18.next = 3;\n                return this.membersEntity.removeBySid(member.sid);\n\n              case 3:\n                return _context18.abrupt(\"return\");\n\n              case 4:\n                _context18.next = 6;\n                return this.membersEntity.removeByIdentity(member);\n\n              case 6:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function removeMember(_x9) {\n        return _ref18.apply(this, arguments);\n      }\n\n      return removeMember;\n    }()\n    /**\r\n     * Send a Message in the Channel.\r\n     * @param {String|FormData|Channel#SendMediaOptions|null} message - The message body for text message,\r\n     * FormData or MediaOptions for media content. Sending FormData supported only with browser engine\r\n     * @param {any} [messageAttributes] - attributes for the message\r\n     * @returns {Promise<number>} new Message's index in the Channel's messages list\r\n     */\n\n  }, {\n    key: \"sendMessage\",\n    value: function () {\n      var _ref19 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee19(message, messageAttributes) {\n        var _response, response;\n\n        return _regenerator2.default.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                if (!(typeof message === 'string' || message === null)) {\n                  _context19.next = 5;\n                  break;\n                }\n\n                _context19.next = 3;\n                return this.messagesEntity.send(message, messageAttributes);\n\n              case 3:\n                _response = _context19.sent;\n                return _context19.abrupt(\"return\", util_1.parseToNumber(_response.messageId));\n\n              case 5:\n                _context19.next = 7;\n                return this.messagesEntity.sendMedia(message, messageAttributes);\n\n              case 7:\n                response = _context19.sent;\n                return _context19.abrupt(\"return\", util_1.parseToNumber(response.messageId));\n\n              case 9:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function sendMessage(_x10, _x11) {\n        return _ref19.apply(this, arguments);\n      }\n\n      return sendMessage;\n    }()\n    /**\r\n     * Set last consumed Channel's Message index to last known Message's index in this Channel.\r\n     * @returns {Promise<number>} resulting unread messages count in the channel\r\n     */\n\n  }, {\n    key: \"setAllMessagesConsumed\",\n    value: function () {\n      var _ref20 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee20() {\n        var messagesPage;\n        return _regenerator2.default.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                _context20.next = 4;\n                return this.getMessages(1);\n\n              case 4:\n                messagesPage = _context20.sent;\n\n                if (!(messagesPage.items.length > 0)) {\n                  _context20.next = 7;\n                  break;\n                }\n\n                return _context20.abrupt(\"return\", this.advanceLastConsumedMessageIndex(messagesPage.items[0].index));\n\n              case 7:\n                return _context20.abrupt(\"return\", _promise2.default.resolve(0));\n\n              case 8:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function setAllMessagesConsumed() {\n        return _ref20.apply(this, arguments);\n      }\n\n      return setAllMessagesConsumed;\n    }()\n    /**\r\n     * Set all messages in the channel unread.\r\n     * @returns {Promise<number>} resulting unread messages count in the channel\r\n     */\n\n  }, {\n    key: \"setNoMessagesConsumed\",\n    value: function () {\n      var _ref21 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee21() {\n        return _regenerator2.default.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                return _context21.abrupt(\"return\", this.services.consumptionHorizon.updateLastConsumedMessageIndexForChannel(this.sid, null));\n\n              case 3:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function setNoMessagesConsumed() {\n        return _ref21.apply(this, arguments);\n      }\n\n      return setNoMessagesConsumed;\n    }()\n    /**\r\n     * Set User Notification level for this channel.\r\n     * @param {Channel#NotificationLevel} notificationLevel - The new user notification level\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: \"setUserNotificationLevel\",\n    value: function () {\n      var _ref22 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee22(notificationLevel) {\n        return _regenerator2.default.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return this.services.session.addCommand('editNotificationLevel', {\n                  channelSid: this.sid,\n                  notificationLevel: notificationLevel\n                });\n\n              case 2:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function setUserNotificationLevel(_x12) {\n        return _ref22.apply(this, arguments);\n      }\n\n      return setUserNotificationLevel;\n    }()\n    /**\r\n     * Send a notification to the server indicating that this Client is currently typing in this Channel.\r\n     * Typing ended notification is sent after a while automatically, but by calling again this method you ensure typing ended is not received.\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: \"typing\",\n    value: function typing() {\n      return this.services.typingIndicator.send(this.sid);\n    }\n    /**\r\n     * Update the Channel's attributes.\r\n     * @param {any} attributes new attributes for Channel.\r\n     * @returns {Promise<Channel>}\r\n     */\n\n  }, {\n    key: \"updateAttributes\",\n    value: function () {\n      var _ref23 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee23(attributes) {\n        return _regenerator2.default.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                _context23.next = 2;\n                return this.services.session.addCommand('editAttributes', {\n                  channelSid: this.sid,\n                  attributes: (0, _stringify2.default)(attributes)\n                });\n\n              case 2:\n                return _context23.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function updateAttributes(_x13) {\n        return _ref23.apply(this, arguments);\n      }\n\n      return updateAttributes;\n    }()\n    /**\r\n     * Update the Channel's friendlyName.\r\n     * @param {String|null} name - The new Channel friendlyName\r\n     * @returns {Promise<Channel>}\r\n     */\n\n  }, {\n    key: \"updateFriendlyName\",\n    value: function () {\n      var _ref24 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee24(name) {\n        return _regenerator2.default.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                if (!(this.channelState.friendlyName !== name)) {\n                  _context24.next = 3;\n                  break;\n                }\n\n                _context24.next = 3;\n                return this.services.session.addCommand('editFriendlyName', {\n                  channelSid: this.sid,\n                  friendlyName: name\n                });\n\n              case 3:\n                return _context24.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function updateFriendlyName(_x14) {\n        return _ref24.apply(this, arguments);\n      }\n\n      return updateFriendlyName;\n    }()\n    /**\r\n     * Set last consumed Channel's Message index to current consumption horizon.\r\n     * @param {Number|null} index - Message index to set as last read.\r\n     * If null provided, then the behavior is identical to {@link Channel#setNoMessagesConsumed}\r\n     * @returns {Promise<number>} resulting unread messages count in the channel\r\n     */\n\n  }, {\n    key: \"updateLastConsumedMessageIndex\",\n    value: function () {\n      var _ref25 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee25(index) {\n        return _regenerator2.default.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                _context25.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                return _context25.abrupt(\"return\", this.services.consumptionHorizon.updateLastConsumedMessageIndexForChannel(this.sid, index));\n\n              case 3:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function updateLastConsumedMessageIndex(_x15) {\n        return _ref25.apply(this, arguments);\n      }\n\n      return updateLastConsumedMessageIndex;\n    }()\n    /**\r\n     * Update the Channel's unique name.\r\n     * @param {String|null} uniqueName - New unique name for the Channel. Setting unique name to null removes it.\r\n     * @returns {Promise<Channel>}\r\n     */\n\n  }, {\n    key: \"updateUniqueName\",\n    value: function () {\n      var _ref26 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee26(uniqueName) {\n        return _regenerator2.default.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                if (!(this.channelState.uniqueName !== uniqueName)) {\n                  _context26.next = 4;\n                  break;\n                }\n\n                if (!uniqueName) {\n                  uniqueName = '';\n                }\n\n                _context26.next = 4;\n                return this.services.session.addCommand('editUniqueName', {\n                  channelSid: this.sid,\n                  uniqueName: uniqueName\n                });\n\n              case 4:\n                return _context26.abrupt(\"return\", this);\n\n              case 5:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      function updateUniqueName(_x16) {\n        return _ref26.apply(this, arguments);\n      }\n\n      return updateUniqueName;\n    }()\n    /**\r\n     * Gets User Descriptors for this channel.\r\n     * @returns {Promise<Paginator<UserDescriptor>>}\r\n     */\n\n  }, {\n    key: \"getUserDescriptors\",\n    value: function () {\n      var _ref27 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee27() {\n        return _regenerator2.default.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                return _context27.abrupt(\"return\", this.services.users.getChannelUserDescriptors(this.sid));\n\n              case 1:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function getUserDescriptors() {\n        return _ref27.apply(this, arguments);\n      }\n\n      return getUserDescriptors;\n    }()\n  }, {\n    key: \"status\",\n    get: function get() {\n      return this.channelState.status;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.channelState.type;\n    }\n  }, {\n    key: \"uniqueName\",\n    get: function get() {\n      return this.channelState.uniqueName;\n    }\n  }, {\n    key: \"isPrivate\",\n    get: function get() {\n      return this.channelState.type === 'private';\n    }\n  }, {\n    key: \"friendlyName\",\n    get: function get() {\n      return this.channelState.friendlyName;\n    }\n  }, {\n    key: \"dateUpdated\",\n    get: function get() {\n      return this.channelState.dateUpdated;\n    }\n  }, {\n    key: \"dateCreated\",\n    get: function get() {\n      return this.channelState.dateCreated;\n    }\n  }, {\n    key: \"createdBy\",\n    get: function get() {\n      return this.channelState.createdBy;\n    }\n  }, {\n    key: \"attributes\",\n    get: function get() {\n      return this.channelState.attributes;\n    }\n  }, {\n    key: \"lastConsumedMessageIndex\",\n    get: function get() {\n      return this.channelState.lastConsumedMessageIndex;\n    }\n  }, {\n    key: \"lastMessage\",\n    get: function get() {\n      return this.channelState.lastMessage;\n    }\n  }, {\n    key: \"notificationLevel\",\n    get: function get() {\n      return this.channelState.notificationLevel;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this.channelState.state;\n    }\n  }], [{\n    key: \"preprocessUpdate\",\n    value: function preprocessUpdate(update, channelSid) {\n      try {\n        if (typeof update.attributes === 'string') {\n          update.attributes = JSON.parse(update.attributes);\n        } else if (update.attributes) {\n          (0, _stringify2.default)(update.attributes);\n        }\n      } catch (e) {\n        log.warn('Retrieved malformed attributes from the server for channel: ' + channelSid);\n        update.attributes = {};\n      }\n\n      try {\n        if (update.dateCreated) {\n          update.dateCreated = new Date(update.dateCreated);\n        }\n      } catch (e) {\n        log.warn('Retrieved malformed dateCreated from the server for channel: ' + channelSid);\n        delete update.dateCreated;\n      }\n\n      try {\n        if (update.dateUpdated) {\n          update.dateUpdated = new Date(update.dateUpdated);\n        }\n      } catch (e) {\n        log.warn('Retrieved malformed dateUpdated from the server for channel: ' + channelSid);\n        delete update.dateUpdated;\n      }\n\n      try {\n        if (update.lastMessage && update.lastMessage.timestamp) {\n          update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);\n        }\n      } catch (e) {\n        log.warn('Retrieved malformed lastMessage.timestamp from the server for channel: ' + channelSid);\n        delete update.lastMessage.timestamp;\n      }\n    }\n  }]);\n  return Channel;\n}(events_1.EventEmitter);\n\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"add\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonNegativeInteger), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"advanceLastConsumedMessageIndex\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(['undefined', typecheck_1.nonNegativeInteger], ['undefined', typecheck_1.nonNegativeInteger], ['undefined', typecheck_1.literal('backwards', 'forward')]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number, Number, String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"getMessages\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"getMemberBySid\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"getMemberByIdentity\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"invite\", null);\n\n__decorate([typecheck_1.asyncTypeCheck([typecheck_1.nonEmptyString, member_1.Member]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"removeMember\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(['string', typecheck_1.literal(null), // Wrapping it into a custom rule is necessary because the FormData class is not available on initialization.\ntypecheck_1.custom(function (value) {\n  return [value instanceof FormData, 'an instance of FormData'];\n}), // This custom type check validates a media options object.\ntypecheck_1.custom(function (value) {\n  var baseDescription = 'valid media options';\n\n  if ((typeof value === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(value)) !== 'object' || value === null || Array.isArray(value)) {\n    return [false, baseDescription + \" (should be a pure object)\"];\n  }\n\n  var validContentType = typeof value.contentType === 'string' && value.contentType.length > 0;\n\n  if (!validContentType) {\n    return [false, baseDescription + \" (mediaOptions.contentType should be a non-empty string)\", \"malformed media options (mediaOptions.contentType is \" + typecheck_1.stringifyReceivedType(value.contentType) + \")\"];\n  }\n\n  var validMedia = typeof value.media === 'string' && value.media.length > 0 || value.media instanceof Uint8Array || value.media instanceof ArrayBuffer;\n\n  if (typeof Blob === 'function') {\n    validMedia = validMedia || value.media instanceof Blob;\n  }\n\n  if (!validMedia) {\n    return [false, baseDescription + \" (mediaOptions.media should be a non-empty string, an instance of Buffer or an instance of Blob)\", \"malformed media options (mediaOptions.media is \" + typecheck_1.stringifyReceivedType(value.media) + \")\"];\n  }\n\n  return [true];\n})], ['undefined', 'string', 'number', 'boolean', 'object', typecheck_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"sendMessage\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.literal('default', 'muted')), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"setUserNotificationLevel\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(['string', 'number', 'boolean', 'object', typecheck_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"updateAttributes\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(['string', typecheck_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"updateFriendlyName\", null);\n\n__decorate([typecheck_1.asyncTypeCheck([typecheck_1.literal(null), typecheck_1.nonNegativeInteger]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"updateLastConsumedMessageIndex\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(['string', typecheck_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"updateUniqueName\", null);\n\nexports.Channel = Channel;\n/**\r\n * Fired when a Member has joined the Channel.\r\n * @event Channel#memberJoined\r\n * @type {Member}\r\n */\n\n/**\r\n * Fired when a Member has left the Channel.\r\n * @event Channel#memberLeft\r\n * @type {Member}\r\n */\n\n/**\r\n * Fired when a Member's fields has been updated.\r\n * @event Channel#memberUpdated\r\n * @type {Object}\r\n * @property {Member} member - Updated Member\r\n * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons\r\n */\n\n/**\r\n * Fired when a new Message has been added to the Channel.\r\n * @event Channel#messageAdded\r\n * @type {Message}\r\n */\n\n/**\r\n * Fired when Message is removed from Channel's message list.\r\n * @event Channel#messageRemoved\r\n * @type {Message}\r\n */\n\n/**\r\n * Fired when an existing Message's fields are updated with new values.\r\n * @event Channel#messageUpdated\r\n * @type {Object}\r\n * @property {Message} message - Updated Message\r\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\r\n */\n\n/**\r\n * Fired when a Member has stopped typing.\r\n * @event Channel#typingEnded\r\n * @type {Member}\r\n */\n\n/**\r\n * Fired when a Member has started typing.\r\n * @event Channel#typingStarted\r\n * @type {Member}\r\n */\n\n/**\r\n * Fired when a Channel's attributes or metadata have been updated.\r\n * During Channel's {@link Client.create | creation and initialization} this event might be fired multiple times\r\n * for same joined or created Channel as new data is arriving from different sources.\r\n * @event Channel#updated\r\n * @type {Object}\r\n * @property {Channel} channel - Updated Channel\r\n * @property {Channel#UpdateReason[]} updateReasons - Array of Channel's updated event reasons\r\n */\n\n/**\r\n * Fired when the Channel was destroyed or currently logged in User has left private Channel\r\n * @event Channel#removed\r\n * @type {Channel}\r\n */","map":{"version":3,"sources":["C:/Users/USER/Desktop/ARSW III/Twilio/node_modules/twilio-chat/browser/channel.js"],"names":["_keys","require","_keys2","_interopRequireDefault","_getIterator2","_getIterator3","_toConsumableArray2","_toConsumableArray3","_set","_set2","_regenerator","_regenerator2","_promise","_promise2","_asyncToGenerator2","_asyncToGenerator3","_map","_map2","_stringify","_stringify2","_isInteger","_isInteger2","_getPrototypeOf","_getPrototypeOf2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_metadata","_metadata2","_defineProperty","_defineProperty2","_typeof2","_typeof3","_getOwnPropertyDescriptor","_getOwnPropertyDescriptor2","obj","__esModule","default","__decorate","undefined","decorators","target","key","desc","c","arguments","length","r","d","Reflect","decorate","i","__metadata","k","v","Object","defineProperty","exports","value","Channel","events_1","logger_1","members_1","member_1","messages_1","util_1","typecheck_1","log","Logger","scope","fieldMappings","lastMessage","attributes","createdBy","dateCreated","dateUpdated","friendlyName","lastConsumedMessageIndex","notificationLevel","sid","status","type","uniqueName","state","parseTime","timeString","Date","e","_events_1$EventEmitte","services","descriptor","_this","__proto__","call","Error","entityName","channel","channelState","members","membersEntity","Members","on","emit","bind","args","messagesEntity","Messages","message","_onMessageAdded","_subscribe","_this2","entityPromise","syncClient","document","id","mode","then","entity","_update","catch","err","connectionState","error","debug","_ref","mark","_callee","messagesObjectName","rosterObjectName","wrap","_callee$","_context","prev","next","trace","messages","roster","all","subscribe","t0","stop","_subscribeStreams","apply","_ref2","_callee2","_callee2$","_context2","isPrivate","close","abrupt","unsubscribe","_unsubscribe","_setStatus","source","_this3","statusSource","_statusSource","update","_a","_b","_c","_d","_e","preprocessUpdate","updateReasons","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","done","localKey","add","isDeepEqual","index","timestamp","getTime","isDate","keysMatchAsDates","keysMatchAsNonDates","return","size","concat","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","values","_step2","member","identity","author","_endTyping","_ref3","_callee3","_callee3$","_context3","_x","_ref4","_callee4","_callee4$","_context4","consumptionHorizon","advanceLastConsumedMessageIndexForChannel","advanceLastConsumedMessageIndex","_x2","_ref5","_callee5","_callee5$","_context5","session","addCommand","channelSid","decline","_ref6","_callee6","_callee6$","_context6","_delete","_ref7","_callee7","_callee7$","_context7","getAttributes","_ref8","_callee8","pageSize","anchor","direction","_callee8$","_context8","getMessages","_x3","_x4","_x5","_ref9","_callee9","_callee9$","_context9","getMembers","_ref10","_callee10","links","url","response","_callee10$","_context10","getSessionLinks","sent","UriBuilder","publicChannelsUrl","path","build","network","get","body","members_count","getMembersCount","_ref11","_callee11","memberSid","_callee11$","_context11","getMemberBySid","_x6","_ref12","_callee12","_callee12$","_context12","getMemberByIdentity","_x7","_ref13","_callee13","_callee13$","_context13","messages_count","getMessagesCount","_ref14","_callee14","_callee14$","_context14","myChannelsUrl","arg","channels","channel_sid","unread_messages_count","getUnconsumedMessagesCount","_ref15","_callee15","_callee15$","_context15","invite","_x8","_ref16","_callee16","_callee16$","_context16","join","_ref17","_callee17","_callee17$","_context17","leave","_ref18","_callee18","_callee18$","_context18","Member","removeBySid","removeByIdentity","removeMember","_x9","_ref19","_callee19","messageAttributes","_response","_callee19$","_context19","send","parseToNumber","messageId","sendMedia","sendMessage","_x10","_x11","_ref20","_callee20","messagesPage","_callee20$","_context20","items","resolve","setAllMessagesConsumed","_ref21","_callee21","_callee21$","_context21","updateLastConsumedMessageIndexForChannel","setNoMessagesConsumed","_ref22","_callee22","_callee22$","_context22","setUserNotificationLevel","_x12","typing","typingIndicator","_ref23","_callee23","_callee23$","_context23","updateAttributes","_x13","_ref24","_callee24","name","_callee24$","_context24","updateFriendlyName","_x14","_ref25","_callee25","_callee25$","_context25","updateLastConsumedMessageIndex","_x15","_ref26","_callee26","_callee26$","_context26","updateUniqueName","_x16","_ref27","_callee27","_callee27$","_context27","users","getChannelUserDescriptors","getUserDescriptors","JSON","parse","warn","EventEmitter","asyncTypeCheck","nonEmptyString","Function","String","prototype","nonNegativeInteger","Number","literal","custom","FormData","baseDescription","Array","isArray","validContentType","contentType","stringifyReceivedType","validMedia","media","Uint8Array","ArrayBuffer","Blob"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nvar _keys = require(\"babel-runtime/core-js/object/keys\");\r\n\r\nvar _keys2 = _interopRequireDefault(_keys);\r\n\r\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\r\n\r\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\r\n\r\nvar _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");\r\n\r\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\r\n\r\nvar _set = require(\"babel-runtime/core-js/set\");\r\n\r\nvar _set2 = _interopRequireDefault(_set);\r\n\r\nvar _regenerator = require(\"babel-runtime/regenerator\");\r\n\r\nvar _regenerator2 = _interopRequireDefault(_regenerator);\r\n\r\nvar _promise = require(\"babel-runtime/core-js/promise\");\r\n\r\nvar _promise2 = _interopRequireDefault(_promise);\r\n\r\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\r\n\r\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\r\n\r\nvar _map = require(\"babel-runtime/core-js/map\");\r\n\r\nvar _map2 = _interopRequireDefault(_map);\r\n\r\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\r\n\r\nvar _stringify2 = _interopRequireDefault(_stringify);\r\n\r\nvar _isInteger = require(\"babel-runtime/core-js/number/is-integer\");\r\n\r\nvar _isInteger2 = _interopRequireDefault(_isInteger);\r\n\r\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\r\n\r\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\r\n\r\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\r\n\r\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\r\n\r\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\r\n\r\nvar _createClass3 = _interopRequireDefault(_createClass2);\r\n\r\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\r\n\r\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\r\n\r\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\r\n\r\nvar _inherits3 = _interopRequireDefault(_inherits2);\r\n\r\nvar _metadata = require(\"babel-runtime/core-js/reflect/metadata\");\r\n\r\nvar _metadata2 = _interopRequireDefault(_metadata);\r\n\r\nvar _defineProperty = require(\"babel-runtime/core-js/object/define-property\");\r\n\r\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\r\n\r\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\r\n\r\nvar _typeof3 = _interopRequireDefault(_typeof2);\r\n\r\nvar _getOwnPropertyDescriptor = require(\"babel-runtime/core-js/object/get-own-property-descriptor\");\r\n\r\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\r\n    var c = arguments.length,\r\n        r = c < 3 ? target : desc === null ? desc = (0, _getOwnPropertyDescriptor2.default)(target, key) : desc,\r\n        d;\r\n    if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\r\n        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    }return c > 3 && r && (0, _defineProperty2.default)(target, key, r), r;\r\n};\r\nvar __metadata = undefined && undefined.__metadata || function (k, v) {\r\n    if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof _metadata2.default === \"function\") return (0, _metadata2.default)(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Channel = void 0;\r\nvar events_1 = require(\"events\");\r\nvar logger_1 = require(\"./logger\");\r\nvar members_1 = require(\"./data/members\");\r\nvar member_1 = require(\"./member\");\r\nvar messages_1 = require(\"./data/messages\");\r\nvar util_1 = require(\"./util\");\r\nvar typecheck_1 = require(\"./util/typecheck\");\r\nvar log = logger_1.Logger.scope('Channel');\r\nvar fieldMappings = {\r\n    lastMessage: 'lastMessage',\r\n    attributes: 'attributes',\r\n    createdBy: 'createdBy',\r\n    dateCreated: 'dateCreated',\r\n    dateUpdated: 'dateUpdated',\r\n    friendlyName: 'friendlyName',\r\n    lastConsumedMessageIndex: 'lastConsumedMessageIndex',\r\n    notificationLevel: 'notificationLevel',\r\n    sid: 'sid',\r\n    status: 'status',\r\n    type: 'type',\r\n    uniqueName: 'uniqueName',\r\n    state: 'state'\r\n};\r\nfunction parseTime(timeString) {\r\n    try {\r\n        return new Date(timeString);\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * @classdesc A Channel represents a remote channel of communication between multiple Programmable Chat Clients\r\n * @property {any} attributes - The Channel's custom attributes\r\n * @property {String} createdBy - The identity of the User that created this Channel\r\n * @property {Date} dateCreated - The Date this Channel was created\r\n * @property {Date} dateUpdated - The Date this Channel was last updated\r\n * @property {String} friendlyName - The Channel's name\r\n * @property {Boolean} isPrivate - Whether the channel is private (as opposed to public)\r\n * @property {Number} lastConsumedMessageIndex - Index of the last Message the User has consumed in this Channel\r\n * @property {Channel#LastMessage} lastMessage - Last Message sent to this Channel\r\n * @property {Channel#NotificationLevel} notificationLevel - User Notification level for this Channel\r\n * @property {String} sid - The Channel's unique system identifier\r\n * @property {Channel#State} state - The Channel's state\r\n * @property {Channel#Status} status - The Channel's status\r\n * @property {Channel#Type} type - The Channel's type\r\n * @property {String} uniqueName - The Channel's unique name (tag)\r\n * @fires Channel#memberJoined\r\n * @fires Channel#memberLeft\r\n * @fires Channel#memberUpdated\r\n * @fires Channel#messageAdded\r\n * @fires Channel#messageRemoved\r\n * @fires Channel#messageUpdated\r\n * @fires Channel#typingEnded\r\n * @fires Channel#typingStarted\r\n * @fires Channel#updated\r\n * @fires Channel#removed\r\n */\r\n\r\nvar Channel = function (_events_1$EventEmitte) {\r\n    (0, _inherits3.default)(Channel, _events_1$EventEmitte);\r\n\r\n    /**\r\n     * These options can be passed to {@link Channel#sendMessage}.\r\n     * @typedef {Object} Channel#SendMediaOptions\r\n     * @property {String} contentType - content type of media\r\n     * @property {String | Buffer} media - content to post\r\n     */\r\n    /**\r\n     * The update reason for <code>updated</code> event emitted on Channel\r\n     * @typedef {('attributes' | 'createdBy' | 'dateCreated' | 'dateUpdated' |\r\n      'friendlyName' | 'lastConsumedMessageIndex' | 'state' | 'status' | 'uniqueName' | 'lastMessage' |\r\n      'notificationLevel' )} Channel#UpdateReason\r\n     */\r\n    /**\r\n     * The status of the Channel, relative to the Client: whether the Channel\r\n     * is <code>notParticipating</code> to local Client, Client is <code>invited</code> to or\r\n     * is <code>joined</code> to this Channel\r\n     * @typedef {('unknown' | 'notParticipating' | 'invited' | 'joined')} Channel#Status\r\n     */\r\n    /**\r\n     * The type of Channel (<code>public</code> or <code>private</code>).\r\n     * @typedef {('public' | 'private')} Channel#Type\r\n     */\r\n    /**\r\n     * The User's Notification level for Channel, determines whether the currently logged-in User will receive\r\n     * pushes for events in this Channel. Can be either <code>muted</code> or <code>default</code>,\r\n     * where <code>default</code> defers to global Service push configuration.\r\n     * @typedef {('default' | 'muted')} Channel#NotificationLevel\r\n     */\r\n    /**\r\n     * The Channel's state. Set to undefined if the channel is not a conversation.\r\n     * @typedef {Object | undefined} Channel#State\r\n     * @property {('active' | 'inactive' | 'closed')} current - the current state\r\n     * @property {Date} dateUpdated - date at which the latest channel state update happened\r\n     */\r\n    function Channel(services, descriptor, sid) {\r\n        (0, _classCallCheck3.default)(this, Channel);\r\n\r\n        var _this = (0, _possibleConstructorReturn3.default)(this, (Channel.__proto__ || (0, _getPrototypeOf2.default)(Channel)).call(this));\r\n\r\n        var attributes = descriptor.attributes || {};\r\n        var createdBy = descriptor.createdBy;\r\n        var dateCreated = parseTime(descriptor.dateCreated);\r\n        var dateUpdated = parseTime(descriptor.dateUpdated);\r\n        var friendlyName = descriptor.friendlyName || null;\r\n        var lastConsumedMessageIndex = (0, _isInteger2.default)(descriptor.lastConsumedMessageIndex) ? descriptor.lastConsumedMessageIndex : null;\r\n        var uniqueName = descriptor.uniqueName || null;\r\n        try {\r\n            (0, _stringify2.default)(attributes);\r\n        } catch (e) {\r\n            throw new Error('Attributes must be a valid JSON object.');\r\n        }\r\n        _this.services = services;\r\n        _this.sid = sid;\r\n        _this.entityName = descriptor.channel;\r\n        _this.channelState = {\r\n            uniqueName: uniqueName,\r\n            status: 'notParticipating',\r\n            type: descriptor.type,\r\n            attributes: attributes,\r\n            createdBy: createdBy,\r\n            dateCreated: dateCreated,\r\n            dateUpdated: dateUpdated,\r\n            friendlyName: friendlyName,\r\n            lastConsumedMessageIndex: lastConsumedMessageIndex\r\n        };\r\n        if (descriptor.notificationLevel) {\r\n            _this.channelState.notificationLevel = descriptor.notificationLevel;\r\n        }\r\n        _this.members = new _map2.default();\r\n        _this.membersEntity = new members_1.Members(_this, _this.services, _this.members);\r\n        _this.membersEntity.on('memberJoined', _this.emit.bind(_this, 'memberJoined'));\r\n        _this.membersEntity.on('memberLeft', _this.emit.bind(_this, 'memberLeft'));\r\n        _this.membersEntity.on('memberUpdated', function (args) {\r\n            return _this.emit('memberUpdated', args);\r\n        });\r\n        _this.messagesEntity = new messages_1.Messages(_this, services);\r\n        _this.messagesEntity.on('messageAdded', function (message) {\r\n            return _this._onMessageAdded(message);\r\n        });\r\n        _this.messagesEntity.on('messageUpdated', function (args) {\r\n            return _this.emit('messageUpdated', args);\r\n        });\r\n        _this.messagesEntity.on('messageRemoved', _this.emit.bind(_this, 'messageRemoved'));\r\n        return _this;\r\n    }\r\n\r\n    (0, _createClass3.default)(Channel, [{\r\n        key: \"_subscribe\",\r\n\r\n        /**\r\n         * The Channel's last message's information.\r\n         * @typedef {Object} Channel#LastMessage\r\n         * @property {Number} index - Message's index\r\n         * @property {Date} dateCreated - Message's creation date\r\n         */\r\n        /**\r\n         * Load and Subscribe to this Channel and do not subscribe to its Members and Messages.\r\n         * This or _subscribeStreams will need to be called before any events on Channel will fire.\r\n         * @returns {Promise}\r\n         * @private\r\n         */\r\n        value: function _subscribe() {\r\n            var _this2 = this;\r\n\r\n            if (this.entityPromise) {\r\n                return this.entityPromise;\r\n            }\r\n            return this.entityPromise = this.entityPromise || this.services.syncClient.document({ id: this.entityName, mode: 'open_existing' }).then(function (entity) {\r\n                _this2.entity = entity;\r\n                _this2.entity.on('updated', function (args) {\r\n                    _this2._update(args.value);\r\n                });\r\n                _this2.entity.on('removed', function () {\r\n                    return _this2.emit('removed', _this2);\r\n                });\r\n                _this2._update(_this2.entity.value);\r\n                return entity;\r\n            }).catch(function (err) {\r\n                _this2.entity = null;\r\n                _this2.entityPromise = null;\r\n                if (_this2.services.syncClient.connectionState != 'disconnected') {\r\n                    log.error('Failed to get channel object', err);\r\n                }\r\n                log.debug('ERROR: Failed to get channel object', err);\r\n                throw err;\r\n            });\r\n        }\r\n        /**\r\n         * Load the attributes of this Channel and instantiate its Members and Messages.\r\n         * This or _subscribe will need to be called before any events on Channel will fire.\r\n         * This will need to be called before any events on Members or Messages will fire\r\n         * @returns {Promise}\r\n         * @private\r\n         */\r\n\r\n    }, {\r\n        key: \"_subscribeStreams\",\r\n        value: function () {\r\n            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\r\n                var messagesObjectName, rosterObjectName;\r\n                return _regenerator2.default.wrap(function _callee$(_context) {\r\n                    while (1) {\r\n                        switch (_context.prev = _context.next) {\r\n                            case 0:\r\n                                _context.prev = 0;\r\n                                _context.next = 3;\r\n                                return this._subscribe();\r\n\r\n                            case 3:\r\n                                log.trace('_subscribeStreams, this.entity.value=', this.entity.value);\r\n                                messagesObjectName = this.entity.value.messages;\r\n                                rosterObjectName = this.entity.value.roster;\r\n                                _context.next = 8;\r\n                                return _promise2.default.all([this.messagesEntity.subscribe(messagesObjectName), this.membersEntity.subscribe(rosterObjectName)]);\r\n\r\n                            case 8:\r\n                                _context.next = 15;\r\n                                break;\r\n\r\n                            case 10:\r\n                                _context.prev = 10;\r\n                                _context.t0 = _context[\"catch\"](0);\r\n\r\n                                if (this.services.syncClient.connectionState !== 'disconnected') {\r\n                                    log.error('Failed to subscribe on channel objects', this.sid, _context.t0);\r\n                                }\r\n                                log.debug('ERROR: Failed to subscribe on channel objects', this.sid, _context.t0);\r\n                                throw _context.t0;\r\n\r\n                            case 15:\r\n                            case \"end\":\r\n                                return _context.stop();\r\n                        }\r\n                    }\r\n                }, _callee, this, [[0, 10]]);\r\n            }));\r\n\r\n            function _subscribeStreams() {\r\n                return _ref.apply(this, arguments);\r\n            }\r\n\r\n            return _subscribeStreams;\r\n        }()\r\n        /**\r\n         * Stop listening for and firing events on this Channel.\r\n         * @returns {Promise}\r\n         * @private\r\n         */\r\n\r\n    }, {\r\n        key: \"_unsubscribe\",\r\n        value: function () {\r\n            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {\r\n                return _regenerator2.default.wrap(function _callee2$(_context2) {\r\n                    while (1) {\r\n                        switch (_context2.prev = _context2.next) {\r\n                            case 0:\r\n                                if (!(this.isPrivate && this.entity)) {\r\n                                    _context2.next = 5;\r\n                                    break;\r\n                                }\r\n\r\n                                _context2.next = 3;\r\n                                return this.entity.close();\r\n\r\n                            case 3:\r\n                                this.entity = null;\r\n                                this.entityPromise = null;\r\n\r\n                            case 5:\r\n                                return _context2.abrupt(\"return\", _promise2.default.all([this.membersEntity.unsubscribe(), this.messagesEntity.unsubscribe()]));\r\n\r\n                            case 6:\r\n                            case \"end\":\r\n                                return _context2.stop();\r\n                        }\r\n                    }\r\n                }, _callee2, this);\r\n            }));\r\n\r\n            function _unsubscribe() {\r\n                return _ref2.apply(this, arguments);\r\n            }\r\n\r\n            return _unsubscribe;\r\n        }()\r\n        /**\r\n         * Set channel status\r\n         * @private\r\n         */\r\n\r\n    }, {\r\n        key: \"_setStatus\",\r\n        value: function _setStatus(status, source) {\r\n            var _this3 = this;\r\n\r\n            this.statusSource = source;\r\n            if (this.channelState.status === status) {\r\n                return;\r\n            }\r\n            this.channelState.status = status;\r\n            if (status === 'joined') {\r\n                this._subscribeStreams().catch(function (err) {\r\n                    log.debug('ERROR while setting channel status ' + status, err);\r\n                    if (_this3.services.syncClient.connectionState !== 'disconnected') {\r\n                        throw err;\r\n                    }\r\n                });\r\n            } else if (status === 'invited') {\r\n                this._subscribe().catch(function (err) {\r\n                    log.debug('ERROR while setting channel status ' + status, err);\r\n                    if (_this3.services.syncClient.connectionState !== 'disconnected') {\r\n                        throw err;\r\n                    }\r\n                });\r\n            } else if (this.entityPromise) {\r\n                this._unsubscribe().catch(function (err) {\r\n                    log.debug('ERROR while setting channel status ' + status, err);\r\n                    if (_this3.services.syncClient.connectionState !== 'disconnected') {\r\n                        throw err;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        /**\r\n         * If channel's status update source\r\n         * @private\r\n         * @return {Channels.DataSource}\r\n         */\r\n\r\n    }, {\r\n        key: \"_statusSource\",\r\n        value: function _statusSource() {\r\n            return this.statusSource;\r\n        }\r\n    }, {\r\n        key: \"_update\",\r\n\r\n        /**\r\n         * Updates local channel object with new values\r\n         * @private\r\n         */\r\n        value: function _update(update) {\r\n            var _a, _b, _c, _d, _e;\r\n            log.trace('_update', update);\r\n            Channel.preprocessUpdate(update, this.sid);\r\n            var updateReasons = new _set2.default();\r\n            var _iteratorNormalCompletion = true;\r\n            var _didIteratorError = false;\r\n            var _iteratorError = undefined;\r\n\r\n            try {\r\n                for (var _iterator = (0, _getIterator3.default)((0, _keys2.default)(update)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\r\n                    var key = _step.value;\r\n\r\n                    var localKey = fieldMappings[key];\r\n                    if (!localKey) {\r\n                        continue;\r\n                    }\r\n                    switch (localKey) {\r\n                        case fieldMappings.status:\r\n                            if (!update.status || update.status === 'unknown' || this.channelState.status === update.status) {\r\n                                break;\r\n                            }\r\n                            this.channelState.status = update.status;\r\n                            updateReasons.add(localKey);\r\n                            break;\r\n                        case fieldMappings.attributes:\r\n                            if (util_1.isDeepEqual(this.channelState.attributes, update.attributes)) {\r\n                                break;\r\n                            }\r\n                            this.channelState.attributes = update.attributes;\r\n                            updateReasons.add(localKey);\r\n                            break;\r\n                        case fieldMappings.lastConsumedMessageIndex:\r\n                            if (update.lastConsumedMessageIndex === undefined || update.lastConsumedMessageIndex === this.channelState.lastConsumedMessageIndex) {\r\n                                break;\r\n                            }\r\n                            this.channelState.lastConsumedMessageIndex = update.lastConsumedMessageIndex;\r\n                            updateReasons.add(localKey);\r\n                            break;\r\n                        case fieldMappings.lastMessage:\r\n                            if (this.channelState.lastMessage && !update.lastMessage) {\r\n                                delete this.channelState.lastMessage;\r\n                                updateReasons.add(localKey);\r\n                                break;\r\n                            }\r\n                            this.channelState.lastMessage = this.channelState.lastMessage || {};\r\n                            if (((_a = update.lastMessage) === null || _a === void 0 ? void 0 : _a.index) !== undefined && update.lastMessage.index !== this.channelState.lastMessage.index) {\r\n                                this.channelState.lastMessage.index = update.lastMessage.index;\r\n                                updateReasons.add(localKey);\r\n                            }\r\n                            if (((_b = update.lastMessage) === null || _b === void 0 ? void 0 : _b.timestamp) !== undefined && ((_d = (_c = this.channelState.lastMessage) === null || _c === void 0 ? void 0 : _c.dateCreated) === null || _d === void 0 ? void 0 : _d.getTime()) !== update.lastMessage.timestamp.getTime()) {\r\n                                this.channelState.lastMessage.dateCreated = update.lastMessage.timestamp;\r\n                                updateReasons.add(localKey);\r\n                            }\r\n                            if (util_1.isDeepEqual(this.channelState.lastMessage, {})) {\r\n                                delete this.channelState.lastMessage;\r\n                            }\r\n                            break;\r\n                        case fieldMappings.state:\r\n                            var state = update.state || undefined;\r\n                            if (state !== undefined) {\r\n                                state.dateUpdated = new Date(state.dateUpdated);\r\n                            }\r\n                            if (util_1.isDeepEqual(this.channelState.state, state)) {\r\n                                break;\r\n                            }\r\n                            this.channelState.state = state;\r\n                            updateReasons.add(localKey);\r\n                            break;\r\n                        default:\r\n                            var isDate = update[key] instanceof Date;\r\n                            var keysMatchAsDates = isDate && ((_e = this.channelState[localKey]) === null || _e === void 0 ? void 0 : _e.getTime()) === update[key].getTime();\r\n                            var keysMatchAsNonDates = !isDate && this[localKey] === update[key];\r\n                            if (keysMatchAsDates || keysMatchAsNonDates) {\r\n                                break;\r\n                            }\r\n                            this.channelState[localKey] = update[key];\r\n                            updateReasons.add(localKey);\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                _didIteratorError = true;\r\n                _iteratorError = err;\r\n            } finally {\r\n                try {\r\n                    if (!_iteratorNormalCompletion && _iterator.return) {\r\n                        _iterator.return();\r\n                    }\r\n                } finally {\r\n                    if (_didIteratorError) {\r\n                        throw _iteratorError;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (updateReasons.size > 0) {\r\n                this.emit('updated', { channel: this, updateReasons: [].concat((0, _toConsumableArray3.default)(updateReasons)) });\r\n            }\r\n        }\r\n        /**\r\n         * @private\r\n         */\r\n\r\n    }, {\r\n        key: \"_onMessageAdded\",\r\n        value: function _onMessageAdded(message) {\r\n            var _iteratorNormalCompletion2 = true;\r\n            var _didIteratorError2 = false;\r\n            var _iteratorError2 = undefined;\r\n\r\n            try {\r\n                for (var _iterator2 = (0, _getIterator3.default)(this.members.values()), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\r\n                    var member = _step2.value;\r\n\r\n                    if (member.identity === message.author) {\r\n                        member._endTyping();\r\n                        break;\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                _didIteratorError2 = true;\r\n                _iteratorError2 = err;\r\n            } finally {\r\n                try {\r\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\r\n                        _iterator2.return();\r\n                    }\r\n                } finally {\r\n                    if (_didIteratorError2) {\r\n                        throw _iteratorError2;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.emit('messageAdded', message);\r\n        }\r\n        /**\r\n         * Add a participant to the Channel by its Identity.\r\n         * @param {String} identity - Identity of the Client to add\r\n         * @returns {Promise<void>}\r\n         */\r\n\r\n    }, {\r\n        key: \"add\",\r\n        value: function () {\r\n            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(identity) {\r\n                return _regenerator2.default.wrap(function _callee3$(_context3) {\r\n                    while (1) {\r\n                        switch (_context3.prev = _context3.next) {\r\n                            case 0:\r\n                                return _context3.abrupt(\"return\", this.membersEntity.add(identity));\r\n\r\n                            case 1:\r\n                            case \"end\":\r\n                                return _context3.stop();\r\n                        }\r\n                    }\r\n                }, _callee3, this);\r\n            }));\r\n\r\n            function add(_x) {\r\n                return _ref3.apply(this, arguments);\r\n            }\r\n\r\n            return add;\r\n        }()\r\n        /**\r\n         * Advance last consumed Channel's Message index to current consumption horizon.\r\n         * Rejects if User is not Member of Channel.\r\n         * Last consumed Message index is updated only if new index value is higher than previous.\r\n         * @param {Number} index - Message index to advance to as last read\r\n         * @returns {Promise<number>} resulting unread messages count in the channel\r\n         */\r\n\r\n    }, {\r\n        key: \"advanceLastConsumedMessageIndex\",\r\n        value: function () {\r\n            var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(index) {\r\n                return _regenerator2.default.wrap(function _callee4$(_context4) {\r\n                    while (1) {\r\n                        switch (_context4.prev = _context4.next) {\r\n                            case 0:\r\n                                _context4.next = 2;\r\n                                return this._subscribeStreams();\r\n\r\n                            case 2:\r\n                                return _context4.abrupt(\"return\", this.services.consumptionHorizon.advanceLastConsumedMessageIndexForChannel(this.sid, index, this.lastConsumedMessageIndex));\r\n\r\n                            case 3:\r\n                            case \"end\":\r\n                                return _context4.stop();\r\n                        }\r\n                    }\r\n                }, _callee4, this);\r\n            }));\r\n\r\n            function advanceLastConsumedMessageIndex(_x2) {\r\n                return _ref4.apply(this, arguments);\r\n            }\r\n\r\n            return advanceLastConsumedMessageIndex;\r\n        }()\r\n        /**\r\n         * Decline an invitation to the Channel and unsubscribe from its events.\r\n         * @returns {Promise<Channel>}\r\n         */\r\n\r\n    }, {\r\n        key: \"decline\",\r\n        value: function () {\r\n            var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {\r\n                return _regenerator2.default.wrap(function _callee5$(_context5) {\r\n                    while (1) {\r\n                        switch (_context5.prev = _context5.next) {\r\n                            case 0:\r\n                                _context5.next = 2;\r\n                                return this.services.session.addCommand('declineInvitation', {\r\n                                    channelSid: this.sid\r\n                                });\r\n\r\n                            case 2:\r\n                                return _context5.abrupt(\"return\", this);\r\n\r\n                            case 3:\r\n                            case \"end\":\r\n                                return _context5.stop();\r\n                        }\r\n                    }\r\n                }, _callee5, this);\r\n            }));\r\n\r\n            function decline() {\r\n                return _ref5.apply(this, arguments);\r\n            }\r\n\r\n            return decline;\r\n        }()\r\n        /**\r\n         * Delete the Channel and unsubscribe from its events.\r\n         * @returns {Promise<Channel>}\r\n         */\r\n\r\n    }, {\r\n        key: \"delete\",\r\n        value: function () {\r\n            var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {\r\n                return _regenerator2.default.wrap(function _callee6$(_context6) {\r\n                    while (1) {\r\n                        switch (_context6.prev = _context6.next) {\r\n                            case 0:\r\n                                _context6.next = 2;\r\n                                return this.services.session.addCommand('destroyChannel', {\r\n                                    channelSid: this.sid\r\n                                });\r\n\r\n                            case 2:\r\n                                return _context6.abrupt(\"return\", this);\r\n\r\n                            case 3:\r\n                            case \"end\":\r\n                                return _context6.stop();\r\n                        }\r\n                    }\r\n                }, _callee6, this);\r\n            }));\r\n\r\n            function _delete() {\r\n                return _ref6.apply(this, arguments);\r\n            }\r\n\r\n            return _delete;\r\n        }()\r\n        /**\r\n         * Get the custom attributes of this Channel.<br/>\r\n         *\r\n         * <i>NOTE: {@link Channel}'s <code>attributes</code> property will be empty for public channels until this function is called.</i>\r\n         * @returns {Promise<any>} attributes of this Channel\r\n         */\r\n\r\n    }, {\r\n        key: \"getAttributes\",\r\n        value: function () {\r\n            var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {\r\n                return _regenerator2.default.wrap(function _callee7$(_context7) {\r\n                    while (1) {\r\n                        switch (_context7.prev = _context7.next) {\r\n                            case 0:\r\n                                _context7.next = 2;\r\n                                return this._subscribe();\r\n\r\n                            case 2:\r\n                                return _context7.abrupt(\"return\", this.attributes);\r\n\r\n                            case 3:\r\n                            case \"end\":\r\n                                return _context7.stop();\r\n                        }\r\n                    }\r\n                }, _callee7, this);\r\n            }));\r\n\r\n            function getAttributes() {\r\n                return _ref7.apply(this, arguments);\r\n            }\r\n\r\n            return getAttributes;\r\n        }()\r\n        /**\r\n         * Returns messages from channel using paginator interface.\r\n         * @param {Number} [pageSize=30] Number of messages to return in single chunk\r\n         * @param {Number} [anchor] - Index of newest Message to fetch. From the end by default\r\n         * @param {('backwards'|'forward')} [direction=backwards] - Query direction. By default it query backwards\r\n         *                                                          from newer to older. 'forward' will query in opposite direction\r\n         * @returns {Promise<Paginator<Message>>} page of messages\r\n         */\r\n\r\n    }, {\r\n        key: \"getMessages\",\r\n        value: function () {\r\n            var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(pageSize, anchor, direction) {\r\n                return _regenerator2.default.wrap(function _callee8$(_context8) {\r\n                    while (1) {\r\n                        switch (_context8.prev = _context8.next) {\r\n                            case 0:\r\n                                _context8.next = 2;\r\n                                return this._subscribeStreams();\r\n\r\n                            case 2:\r\n                                return _context8.abrupt(\"return\", this.messagesEntity.getMessages(pageSize, anchor, direction));\r\n\r\n                            case 3:\r\n                            case \"end\":\r\n                                return _context8.stop();\r\n                        }\r\n                    }\r\n                }, _callee8, this);\r\n            }));\r\n\r\n            function getMessages(_x3, _x4, _x5) {\r\n                return _ref8.apply(this, arguments);\r\n            }\r\n\r\n            return getMessages;\r\n        }()\r\n        /**\r\n         * Get a list of all Members joined to this Channel.\r\n         * @returns {Promise<Member[]>}\r\n         */\r\n\r\n    }, {\r\n        key: \"getMembers\",\r\n        value: function () {\r\n            var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {\r\n                return _regenerator2.default.wrap(function _callee9$(_context9) {\r\n                    while (1) {\r\n                        switch (_context9.prev = _context9.next) {\r\n                            case 0:\r\n                                _context9.next = 2;\r\n                                return this._subscribeStreams();\r\n\r\n                            case 2:\r\n                                return _context9.abrupt(\"return\", this.membersEntity.getMembers());\r\n\r\n                            case 3:\r\n                            case \"end\":\r\n                                return _context9.stop();\r\n                        }\r\n                    }\r\n                }, _callee9, this);\r\n            }));\r\n\r\n            function getMembers() {\r\n                return _ref9.apply(this, arguments);\r\n            }\r\n\r\n            return getMembers;\r\n        }()\r\n        /**\r\n         * Get channel members count.\r\n         * <br/>\r\n         * This method is semi-realtime. This means that this data will be eventually correct,\r\n         * but will also possibly be incorrect for a few seconds. The Chat system does not\r\n         * provide real time events for counter values changes.\r\n         * <br/>\r\n         * So this is quite useful for any UI badges, but is not recommended\r\n         * to build any core application logic based on these counters being accurate in real time.\r\n         * @returns {Promise<number>}\r\n         */\r\n\r\n    }, {\r\n        key: \"getMembersCount\",\r\n        value: function () {\r\n            var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {\r\n                var links, url, response;\r\n                return _regenerator2.default.wrap(function _callee10$(_context10) {\r\n                    while (1) {\r\n                        switch (_context10.prev = _context10.next) {\r\n                            case 0:\r\n                                _context10.next = 2;\r\n                                return this.services.session.getSessionLinks();\r\n\r\n                            case 2:\r\n                                links = _context10.sent;\r\n                                url = new util_1.UriBuilder(links.publicChannelsUrl).path(this.sid).build();\r\n                                _context10.next = 6;\r\n                                return this.services.network.get(url);\r\n\r\n                            case 6:\r\n                                response = _context10.sent;\r\n                                return _context10.abrupt(\"return\", response.body.members_count);\r\n\r\n                            case 8:\r\n                            case \"end\":\r\n                                return _context10.stop();\r\n                        }\r\n                    }\r\n                }, _callee10, this);\r\n            }));\r\n\r\n            function getMembersCount() {\r\n                return _ref10.apply(this, arguments);\r\n            }\r\n\r\n            return getMembersCount;\r\n        }()\r\n        /**\r\n         * Get a Member by its SID.\r\n         * @param {String} memberSid - Member sid\r\n         * @returns {Promise<Member>}\r\n         */\r\n\r\n    }, {\r\n        key: \"getMemberBySid\",\r\n        value: function () {\r\n            var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11(memberSid) {\r\n                return _regenerator2.default.wrap(function _callee11$(_context11) {\r\n                    while (1) {\r\n                        switch (_context11.prev = _context11.next) {\r\n                            case 0:\r\n                                return _context11.abrupt(\"return\", this.membersEntity.getMemberBySid(memberSid));\r\n\r\n                            case 1:\r\n                            case \"end\":\r\n                                return _context11.stop();\r\n                        }\r\n                    }\r\n                }, _callee11, this);\r\n            }));\r\n\r\n            function getMemberBySid(_x6) {\r\n                return _ref11.apply(this, arguments);\r\n            }\r\n\r\n            return getMemberBySid;\r\n        }()\r\n        /**\r\n         * Get a Member by its identity.\r\n         * @param {String} identity - Member identity\r\n         * @returns {Promise<Member>}\r\n         */\r\n\r\n    }, {\r\n        key: \"getMemberByIdentity\",\r\n        value: function () {\r\n            var _ref12 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12(identity) {\r\n                return _regenerator2.default.wrap(function _callee12$(_context12) {\r\n                    while (1) {\r\n                        switch (_context12.prev = _context12.next) {\r\n                            case 0:\r\n                                return _context12.abrupt(\"return\", this.membersEntity.getMemberByIdentity(identity));\r\n\r\n                            case 1:\r\n                            case \"end\":\r\n                                return _context12.stop();\r\n                        }\r\n                    }\r\n                }, _callee12, this);\r\n            }));\r\n\r\n            function getMemberByIdentity(_x7) {\r\n                return _ref12.apply(this, arguments);\r\n            }\r\n\r\n            return getMemberByIdentity;\r\n        }()\r\n        /**\r\n         * Get total message count in a channel.\r\n         * <br/>\r\n         * This method is semi-realtime. This means that this data will be eventually correct,\r\n         * but will also possibly be incorrect for a few seconds. The Chat system does not\r\n         * provide real time events for counter values changes.\r\n         * <br/>\r\n         * So this is quite useful for any UI badges, but is not recommended\r\n         * to build any core application logic based on these counters being accurate in real time.\r\n         * @returns {Promise<number>}\r\n         */\r\n\r\n    }, {\r\n        key: \"getMessagesCount\",\r\n        value: function () {\r\n            var _ref13 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee13() {\r\n                var links, url, response;\r\n                return _regenerator2.default.wrap(function _callee13$(_context13) {\r\n                    while (1) {\r\n                        switch (_context13.prev = _context13.next) {\r\n                            case 0:\r\n                                _context13.next = 2;\r\n                                return this.services.session.getSessionLinks();\r\n\r\n                            case 2:\r\n                                links = _context13.sent;\r\n                                url = new util_1.UriBuilder(links.publicChannelsUrl).path(this.sid).build();\r\n                                _context13.next = 6;\r\n                                return this.services.network.get(url);\r\n\r\n                            case 6:\r\n                                response = _context13.sent;\r\n                                return _context13.abrupt(\"return\", response.body.messages_count);\r\n\r\n                            case 8:\r\n                            case \"end\":\r\n                                return _context13.stop();\r\n                        }\r\n                    }\r\n                }, _callee13, this);\r\n            }));\r\n\r\n            function getMessagesCount() {\r\n                return _ref13.apply(this, arguments);\r\n            }\r\n\r\n            return getMessagesCount;\r\n        }()\r\n        /**\r\n         * Get unconsumed messages count for a User if they are a Member of this Channel.\r\n         * Rejects if the User is not a Member of the Channel.\r\n         * <br/>\r\n         * This method is semi-realtime. This means that this data will be eventually correct,\r\n         * but will also possibly be incorrect for a few seconds. The Chat system does not\r\n         * provide real time events for counter values changes.\r\n         * <br/>\r\n         * So this is quite useful for any “unread messages count” badges, but is not recommended\r\n         * to build any core application logic based on these counters being accurate in real time.\r\n         * @returns {Promise<number|null>}\r\n         */\r\n\r\n    }, {\r\n        key: \"getUnconsumedMessagesCount\",\r\n        value: function () {\r\n            var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee14() {\r\n                var links, url, response;\r\n                return _regenerator2.default.wrap(function _callee14$(_context14) {\r\n                    while (1) {\r\n                        switch (_context14.prev = _context14.next) {\r\n                            case 0:\r\n                                _context14.next = 2;\r\n                                return this.services.session.getSessionLinks();\r\n\r\n                            case 2:\r\n                                links = _context14.sent;\r\n                                url = new util_1.UriBuilder(links.myChannelsUrl).arg('ChannelSid', this.sid).build();\r\n                                _context14.next = 6;\r\n                                return this.services.network.get(url);\r\n\r\n                            case 6:\r\n                                response = _context14.sent;\r\n\r\n                                if (!(response.body.channels.length && response.body.channels[0].channel_sid == this.sid)) {\r\n                                    _context14.next = 11;\r\n                                    break;\r\n                                }\r\n\r\n                                if (!(typeof response.body.channels[0].unread_messages_count !== 'undefined' && response.body.channels[0].unread_messages_count != null)) {\r\n                                    _context14.next = 10;\r\n                                    break;\r\n                                }\r\n\r\n                                return _context14.abrupt(\"return\", response.body.channels[0].unread_messages_count);\r\n\r\n                            case 10:\r\n                                return _context14.abrupt(\"return\", null);\r\n\r\n                            case 11:\r\n                                throw new Error('Channel is not in user channels list');\r\n\r\n                            case 12:\r\n                            case \"end\":\r\n                                return _context14.stop();\r\n                        }\r\n                    }\r\n                }, _callee14, this);\r\n            }));\r\n\r\n            function getUnconsumedMessagesCount() {\r\n                return _ref14.apply(this, arguments);\r\n            }\r\n\r\n            return getUnconsumedMessagesCount;\r\n        }()\r\n        /**\r\n         * Invite a user to the Channel by their Identity.\r\n         * @param {String} identity - Identity of the user to invite\r\n         * @returns {Promise<void>}\r\n         */\r\n\r\n    }, {\r\n        key: \"invite\",\r\n        value: function () {\r\n            var _ref15 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee15(identity) {\r\n                return _regenerator2.default.wrap(function _callee15$(_context15) {\r\n                    while (1) {\r\n                        switch (_context15.prev = _context15.next) {\r\n                            case 0:\r\n                                _context15.next = 2;\r\n                                return this.membersEntity.invite(identity);\r\n\r\n                            case 2:\r\n                            case \"end\":\r\n                                return _context15.stop();\r\n                        }\r\n                    }\r\n                }, _callee15, this);\r\n            }));\r\n\r\n            function invite(_x8) {\r\n                return _ref15.apply(this, arguments);\r\n            }\r\n\r\n            return invite;\r\n        }()\r\n        /**\r\n         * Join the Channel and subscribe to its events.\r\n         * @returns {Promise<Channel>}\r\n         */\r\n\r\n    }, {\r\n        key: \"join\",\r\n        value: function () {\r\n            var _ref16 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee16() {\r\n                return _regenerator2.default.wrap(function _callee16$(_context16) {\r\n                    while (1) {\r\n                        switch (_context16.prev = _context16.next) {\r\n                            case 0:\r\n                                _context16.next = 2;\r\n                                return this.services.session.addCommand('joinChannelV2', { channelSid: this.sid });\r\n\r\n                            case 2:\r\n                                return _context16.abrupt(\"return\", this);\r\n\r\n                            case 3:\r\n                            case \"end\":\r\n                                return _context16.stop();\r\n                        }\r\n                    }\r\n                }, _callee16, this);\r\n            }));\r\n\r\n            function join() {\r\n                return _ref16.apply(this, arguments);\r\n            }\r\n\r\n            return join;\r\n        }()\r\n        /**\r\n         * Leave the Channel.\r\n         * @returns {Promise<Channel>}\r\n         */\r\n\r\n    }, {\r\n        key: \"leave\",\r\n        value: function () {\r\n            var _ref17 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee17() {\r\n                return _regenerator2.default.wrap(function _callee17$(_context17) {\r\n                    while (1) {\r\n                        switch (_context17.prev = _context17.next) {\r\n                            case 0:\r\n                                if (!(this.channelState.status === 'joined')) {\r\n                                    _context17.next = 3;\r\n                                    break;\r\n                                }\r\n\r\n                                _context17.next = 3;\r\n                                return this.services.session.addCommand('leaveChannel', { channelSid: this.sid });\r\n\r\n                            case 3:\r\n                                return _context17.abrupt(\"return\", this);\r\n\r\n                            case 4:\r\n                            case \"end\":\r\n                                return _context17.stop();\r\n                        }\r\n                    }\r\n                }, _callee17, this);\r\n            }));\r\n\r\n            function leave() {\r\n                return _ref17.apply(this, arguments);\r\n            }\r\n\r\n            return leave;\r\n        }()\r\n        /**\r\n         * Remove a Member from the Channel.\r\n         * @param {String|Member} member - Member to remove. Could either be an identity string or a Member instance.\r\n         * @returns {Promise<void>}\r\n         */\r\n\r\n    }, {\r\n        key: \"removeMember\",\r\n        value: function () {\r\n            var _ref18 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee18(member) {\r\n                return _regenerator2.default.wrap(function _callee18$(_context18) {\r\n                    while (1) {\r\n                        switch (_context18.prev = _context18.next) {\r\n                            case 0:\r\n                                if (!(member instanceof member_1.Member)) {\r\n                                    _context18.next = 4;\r\n                                    break;\r\n                                }\r\n\r\n                                _context18.next = 3;\r\n                                return this.membersEntity.removeBySid(member.sid);\r\n\r\n                            case 3:\r\n                                return _context18.abrupt(\"return\");\r\n\r\n                            case 4:\r\n                                _context18.next = 6;\r\n                                return this.membersEntity.removeByIdentity(member);\r\n\r\n                            case 6:\r\n                            case \"end\":\r\n                                return _context18.stop();\r\n                        }\r\n                    }\r\n                }, _callee18, this);\r\n            }));\r\n\r\n            function removeMember(_x9) {\r\n                return _ref18.apply(this, arguments);\r\n            }\r\n\r\n            return removeMember;\r\n        }()\r\n        /**\r\n         * Send a Message in the Channel.\r\n         * @param {String|FormData|Channel#SendMediaOptions|null} message - The message body for text message,\r\n         * FormData or MediaOptions for media content. Sending FormData supported only with browser engine\r\n         * @param {any} [messageAttributes] - attributes for the message\r\n         * @returns {Promise<number>} new Message's index in the Channel's messages list\r\n         */\r\n\r\n    }, {\r\n        key: \"sendMessage\",\r\n        value: function () {\r\n            var _ref19 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee19(message, messageAttributes) {\r\n                var _response, response;\r\n\r\n                return _regenerator2.default.wrap(function _callee19$(_context19) {\r\n                    while (1) {\r\n                        switch (_context19.prev = _context19.next) {\r\n                            case 0:\r\n                                if (!(typeof message === 'string' || message === null)) {\r\n                                    _context19.next = 5;\r\n                                    break;\r\n                                }\r\n\r\n                                _context19.next = 3;\r\n                                return this.messagesEntity.send(message, messageAttributes);\r\n\r\n                            case 3:\r\n                                _response = _context19.sent;\r\n                                return _context19.abrupt(\"return\", util_1.parseToNumber(_response.messageId));\r\n\r\n                            case 5:\r\n                                _context19.next = 7;\r\n                                return this.messagesEntity.sendMedia(message, messageAttributes);\r\n\r\n                            case 7:\r\n                                response = _context19.sent;\r\n                                return _context19.abrupt(\"return\", util_1.parseToNumber(response.messageId));\r\n\r\n                            case 9:\r\n                            case \"end\":\r\n                                return _context19.stop();\r\n                        }\r\n                    }\r\n                }, _callee19, this);\r\n            }));\r\n\r\n            function sendMessage(_x10, _x11) {\r\n                return _ref19.apply(this, arguments);\r\n            }\r\n\r\n            return sendMessage;\r\n        }()\r\n        /**\r\n         * Set last consumed Channel's Message index to last known Message's index in this Channel.\r\n         * @returns {Promise<number>} resulting unread messages count in the channel\r\n         */\r\n\r\n    }, {\r\n        key: \"setAllMessagesConsumed\",\r\n        value: function () {\r\n            var _ref20 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee20() {\r\n                var messagesPage;\r\n                return _regenerator2.default.wrap(function _callee20$(_context20) {\r\n                    while (1) {\r\n                        switch (_context20.prev = _context20.next) {\r\n                            case 0:\r\n                                _context20.next = 2;\r\n                                return this._subscribeStreams();\r\n\r\n                            case 2:\r\n                                _context20.next = 4;\r\n                                return this.getMessages(1);\r\n\r\n                            case 4:\r\n                                messagesPage = _context20.sent;\r\n\r\n                                if (!(messagesPage.items.length > 0)) {\r\n                                    _context20.next = 7;\r\n                                    break;\r\n                                }\r\n\r\n                                return _context20.abrupt(\"return\", this.advanceLastConsumedMessageIndex(messagesPage.items[0].index));\r\n\r\n                            case 7:\r\n                                return _context20.abrupt(\"return\", _promise2.default.resolve(0));\r\n\r\n                            case 8:\r\n                            case \"end\":\r\n                                return _context20.stop();\r\n                        }\r\n                    }\r\n                }, _callee20, this);\r\n            }));\r\n\r\n            function setAllMessagesConsumed() {\r\n                return _ref20.apply(this, arguments);\r\n            }\r\n\r\n            return setAllMessagesConsumed;\r\n        }()\r\n        /**\r\n         * Set all messages in the channel unread.\r\n         * @returns {Promise<number>} resulting unread messages count in the channel\r\n         */\r\n\r\n    }, {\r\n        key: \"setNoMessagesConsumed\",\r\n        value: function () {\r\n            var _ref21 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee21() {\r\n                return _regenerator2.default.wrap(function _callee21$(_context21) {\r\n                    while (1) {\r\n                        switch (_context21.prev = _context21.next) {\r\n                            case 0:\r\n                                _context21.next = 2;\r\n                                return this._subscribeStreams();\r\n\r\n                            case 2:\r\n                                return _context21.abrupt(\"return\", this.services.consumptionHorizon.updateLastConsumedMessageIndexForChannel(this.sid, null));\r\n\r\n                            case 3:\r\n                            case \"end\":\r\n                                return _context21.stop();\r\n                        }\r\n                    }\r\n                }, _callee21, this);\r\n            }));\r\n\r\n            function setNoMessagesConsumed() {\r\n                return _ref21.apply(this, arguments);\r\n            }\r\n\r\n            return setNoMessagesConsumed;\r\n        }()\r\n        /**\r\n         * Set User Notification level for this channel.\r\n         * @param {Channel#NotificationLevel} notificationLevel - The new user notification level\r\n         * @returns {Promise<void>}\r\n         */\r\n\r\n    }, {\r\n        key: \"setUserNotificationLevel\",\r\n        value: function () {\r\n            var _ref22 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee22(notificationLevel) {\r\n                return _regenerator2.default.wrap(function _callee22$(_context22) {\r\n                    while (1) {\r\n                        switch (_context22.prev = _context22.next) {\r\n                            case 0:\r\n                                _context22.next = 2;\r\n                                return this.services.session.addCommand('editNotificationLevel', { channelSid: this.sid, notificationLevel: notificationLevel });\r\n\r\n                            case 2:\r\n                            case \"end\":\r\n                                return _context22.stop();\r\n                        }\r\n                    }\r\n                }, _callee22, this);\r\n            }));\r\n\r\n            function setUserNotificationLevel(_x12) {\r\n                return _ref22.apply(this, arguments);\r\n            }\r\n\r\n            return setUserNotificationLevel;\r\n        }()\r\n        /**\r\n         * Send a notification to the server indicating that this Client is currently typing in this Channel.\r\n         * Typing ended notification is sent after a while automatically, but by calling again this method you ensure typing ended is not received.\r\n         * @returns {Promise<void>}\r\n         */\r\n\r\n    }, {\r\n        key: \"typing\",\r\n        value: function typing() {\r\n            return this.services.typingIndicator.send(this.sid);\r\n        }\r\n        /**\r\n         * Update the Channel's attributes.\r\n         * @param {any} attributes new attributes for Channel.\r\n         * @returns {Promise<Channel>}\r\n         */\r\n\r\n    }, {\r\n        key: \"updateAttributes\",\r\n        value: function () {\r\n            var _ref23 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee23(attributes) {\r\n                return _regenerator2.default.wrap(function _callee23$(_context23) {\r\n                    while (1) {\r\n                        switch (_context23.prev = _context23.next) {\r\n                            case 0:\r\n                                _context23.next = 2;\r\n                                return this.services.session.addCommand('editAttributes', {\r\n                                    channelSid: this.sid,\r\n                                    attributes: (0, _stringify2.default)(attributes)\r\n                                });\r\n\r\n                            case 2:\r\n                                return _context23.abrupt(\"return\", this);\r\n\r\n                            case 3:\r\n                            case \"end\":\r\n                                return _context23.stop();\r\n                        }\r\n                    }\r\n                }, _callee23, this);\r\n            }));\r\n\r\n            function updateAttributes(_x13) {\r\n                return _ref23.apply(this, arguments);\r\n            }\r\n\r\n            return updateAttributes;\r\n        }()\r\n        /**\r\n         * Update the Channel's friendlyName.\r\n         * @param {String|null} name - The new Channel friendlyName\r\n         * @returns {Promise<Channel>}\r\n         */\r\n\r\n    }, {\r\n        key: \"updateFriendlyName\",\r\n        value: function () {\r\n            var _ref24 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee24(name) {\r\n                return _regenerator2.default.wrap(function _callee24$(_context24) {\r\n                    while (1) {\r\n                        switch (_context24.prev = _context24.next) {\r\n                            case 0:\r\n                                if (!(this.channelState.friendlyName !== name)) {\r\n                                    _context24.next = 3;\r\n                                    break;\r\n                                }\r\n\r\n                                _context24.next = 3;\r\n                                return this.services.session.addCommand('editFriendlyName', {\r\n                                    channelSid: this.sid,\r\n                                    friendlyName: name\r\n                                });\r\n\r\n                            case 3:\r\n                                return _context24.abrupt(\"return\", this);\r\n\r\n                            case 4:\r\n                            case \"end\":\r\n                                return _context24.stop();\r\n                        }\r\n                    }\r\n                }, _callee24, this);\r\n            }));\r\n\r\n            function updateFriendlyName(_x14) {\r\n                return _ref24.apply(this, arguments);\r\n            }\r\n\r\n            return updateFriendlyName;\r\n        }()\r\n        /**\r\n         * Set last consumed Channel's Message index to current consumption horizon.\r\n         * @param {Number|null} index - Message index to set as last read.\r\n         * If null provided, then the behavior is identical to {@link Channel#setNoMessagesConsumed}\r\n         * @returns {Promise<number>} resulting unread messages count in the channel\r\n         */\r\n\r\n    }, {\r\n        key: \"updateLastConsumedMessageIndex\",\r\n        value: function () {\r\n            var _ref25 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee25(index) {\r\n                return _regenerator2.default.wrap(function _callee25$(_context25) {\r\n                    while (1) {\r\n                        switch (_context25.prev = _context25.next) {\r\n                            case 0:\r\n                                _context25.next = 2;\r\n                                return this._subscribeStreams();\r\n\r\n                            case 2:\r\n                                return _context25.abrupt(\"return\", this.services.consumptionHorizon.updateLastConsumedMessageIndexForChannel(this.sid, index));\r\n\r\n                            case 3:\r\n                            case \"end\":\r\n                                return _context25.stop();\r\n                        }\r\n                    }\r\n                }, _callee25, this);\r\n            }));\r\n\r\n            function updateLastConsumedMessageIndex(_x15) {\r\n                return _ref25.apply(this, arguments);\r\n            }\r\n\r\n            return updateLastConsumedMessageIndex;\r\n        }()\r\n        /**\r\n         * Update the Channel's unique name.\r\n         * @param {String|null} uniqueName - New unique name for the Channel. Setting unique name to null removes it.\r\n         * @returns {Promise<Channel>}\r\n         */\r\n\r\n    }, {\r\n        key: \"updateUniqueName\",\r\n        value: function () {\r\n            var _ref26 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee26(uniqueName) {\r\n                return _regenerator2.default.wrap(function _callee26$(_context26) {\r\n                    while (1) {\r\n                        switch (_context26.prev = _context26.next) {\r\n                            case 0:\r\n                                if (!(this.channelState.uniqueName !== uniqueName)) {\r\n                                    _context26.next = 4;\r\n                                    break;\r\n                                }\r\n\r\n                                if (!uniqueName) {\r\n                                    uniqueName = '';\r\n                                }\r\n                                _context26.next = 4;\r\n                                return this.services.session.addCommand('editUniqueName', {\r\n                                    channelSid: this.sid,\r\n                                    uniqueName: uniqueName\r\n                                });\r\n\r\n                            case 4:\r\n                                return _context26.abrupt(\"return\", this);\r\n\r\n                            case 5:\r\n                            case \"end\":\r\n                                return _context26.stop();\r\n                        }\r\n                    }\r\n                }, _callee26, this);\r\n            }));\r\n\r\n            function updateUniqueName(_x16) {\r\n                return _ref26.apply(this, arguments);\r\n            }\r\n\r\n            return updateUniqueName;\r\n        }()\r\n        /**\r\n         * Gets User Descriptors for this channel.\r\n         * @returns {Promise<Paginator<UserDescriptor>>}\r\n         */\r\n\r\n    }, {\r\n        key: \"getUserDescriptors\",\r\n        value: function () {\r\n            var _ref27 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee27() {\r\n                return _regenerator2.default.wrap(function _callee27$(_context27) {\r\n                    while (1) {\r\n                        switch (_context27.prev = _context27.next) {\r\n                            case 0:\r\n                                return _context27.abrupt(\"return\", this.services.users.getChannelUserDescriptors(this.sid));\r\n\r\n                            case 1:\r\n                            case \"end\":\r\n                                return _context27.stop();\r\n                        }\r\n                    }\r\n                }, _callee27, this);\r\n            }));\r\n\r\n            function getUserDescriptors() {\r\n                return _ref27.apply(this, arguments);\r\n            }\r\n\r\n            return getUserDescriptors;\r\n        }()\r\n    }, {\r\n        key: \"status\",\r\n        get: function get() {\r\n            return this.channelState.status;\r\n        }\r\n    }, {\r\n        key: \"type\",\r\n        get: function get() {\r\n            return this.channelState.type;\r\n        }\r\n    }, {\r\n        key: \"uniqueName\",\r\n        get: function get() {\r\n            return this.channelState.uniqueName;\r\n        }\r\n    }, {\r\n        key: \"isPrivate\",\r\n        get: function get() {\r\n            return this.channelState.type === 'private';\r\n        }\r\n    }, {\r\n        key: \"friendlyName\",\r\n        get: function get() {\r\n            return this.channelState.friendlyName;\r\n        }\r\n    }, {\r\n        key: \"dateUpdated\",\r\n        get: function get() {\r\n            return this.channelState.dateUpdated;\r\n        }\r\n    }, {\r\n        key: \"dateCreated\",\r\n        get: function get() {\r\n            return this.channelState.dateCreated;\r\n        }\r\n    }, {\r\n        key: \"createdBy\",\r\n        get: function get() {\r\n            return this.channelState.createdBy;\r\n        }\r\n    }, {\r\n        key: \"attributes\",\r\n        get: function get() {\r\n            return this.channelState.attributes;\r\n        }\r\n    }, {\r\n        key: \"lastConsumedMessageIndex\",\r\n        get: function get() {\r\n            return this.channelState.lastConsumedMessageIndex;\r\n        }\r\n    }, {\r\n        key: \"lastMessage\",\r\n        get: function get() {\r\n            return this.channelState.lastMessage;\r\n        }\r\n    }, {\r\n        key: \"notificationLevel\",\r\n        get: function get() {\r\n            return this.channelState.notificationLevel;\r\n        }\r\n    }, {\r\n        key: \"state\",\r\n        get: function get() {\r\n            return this.channelState.state;\r\n        }\r\n    }], [{\r\n        key: \"preprocessUpdate\",\r\n        value: function preprocessUpdate(update, channelSid) {\r\n            try {\r\n                if (typeof update.attributes === 'string') {\r\n                    update.attributes = JSON.parse(update.attributes);\r\n                } else if (update.attributes) {\r\n                    (0, _stringify2.default)(update.attributes);\r\n                }\r\n            } catch (e) {\r\n                log.warn('Retrieved malformed attributes from the server for channel: ' + channelSid);\r\n                update.attributes = {};\r\n            }\r\n            try {\r\n                if (update.dateCreated) {\r\n                    update.dateCreated = new Date(update.dateCreated);\r\n                }\r\n            } catch (e) {\r\n                log.warn('Retrieved malformed dateCreated from the server for channel: ' + channelSid);\r\n                delete update.dateCreated;\r\n            }\r\n            try {\r\n                if (update.dateUpdated) {\r\n                    update.dateUpdated = new Date(update.dateUpdated);\r\n                }\r\n            } catch (e) {\r\n                log.warn('Retrieved malformed dateUpdated from the server for channel: ' + channelSid);\r\n                delete update.dateUpdated;\r\n            }\r\n            try {\r\n                if (update.lastMessage && update.lastMessage.timestamp) {\r\n                    update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);\r\n                }\r\n            } catch (e) {\r\n                log.warn('Retrieved malformed lastMessage.timestamp from the server for channel: ' + channelSid);\r\n                delete update.lastMessage.timestamp;\r\n            }\r\n        }\r\n    }]);\r\n    return Channel;\r\n}(events_1.EventEmitter);\r\n\r\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"add\", null);\r\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonNegativeInteger), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"advanceLastConsumedMessageIndex\", null);\r\n__decorate([typecheck_1.asyncTypeCheck(['undefined', typecheck_1.nonNegativeInteger], ['undefined', typecheck_1.nonNegativeInteger], ['undefined', typecheck_1.literal('backwards', 'forward')]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number, Number, String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"getMessages\", null);\r\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"getMemberBySid\", null);\r\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"getMemberByIdentity\", null);\r\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"invite\", null);\r\n__decorate([typecheck_1.asyncTypeCheck([typecheck_1.nonEmptyString, member_1.Member]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"removeMember\", null);\r\n__decorate([typecheck_1.asyncTypeCheck(['string', typecheck_1.literal(null),\r\n// Wrapping it into a custom rule is necessary because the FormData class is not available on initialization.\r\ntypecheck_1.custom(function (value) {\r\n    return [value instanceof FormData, 'an instance of FormData'];\r\n}),\r\n// This custom type check validates a media options object.\r\ntypecheck_1.custom(function (value) {\r\n    var baseDescription = 'valid media options';\r\n    if ((typeof value === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(value)) !== 'object' || value === null || Array.isArray(value)) {\r\n        return [false, baseDescription + \" (should be a pure object)\"];\r\n    }\r\n    var validContentType = typeof value.contentType === 'string' && value.contentType.length > 0;\r\n    if (!validContentType) {\r\n        return [false, baseDescription + \" (mediaOptions.contentType should be a non-empty string)\", \"malformed media options (mediaOptions.contentType is \" + typecheck_1.stringifyReceivedType(value.contentType) + \")\"];\r\n    }\r\n    var validMedia = typeof value.media === 'string' && value.media.length > 0 || value.media instanceof Uint8Array || value.media instanceof ArrayBuffer;\r\n    if (typeof Blob === 'function') {\r\n        validMedia = validMedia || value.media instanceof Blob;\r\n    }\r\n    if (!validMedia) {\r\n        return [false, baseDescription + \" (mediaOptions.media should be a non-empty string, an instance of Buffer or an instance of Blob)\", \"malformed media options (mediaOptions.media is \" + typecheck_1.stringifyReceivedType(value.media) + \")\"];\r\n    }\r\n    return [true];\r\n})], ['undefined', 'string', 'number', 'boolean', 'object', typecheck_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"sendMessage\", null);\r\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.literal('default', 'muted')), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"setUserNotificationLevel\", null);\r\n__decorate([typecheck_1.asyncTypeCheck(['string', 'number', 'boolean', 'object', typecheck_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"updateAttributes\", null);\r\n__decorate([typecheck_1.asyncTypeCheck(['string', typecheck_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"updateFriendlyName\", null);\r\n__decorate([typecheck_1.asyncTypeCheck([typecheck_1.literal(null), typecheck_1.nonNegativeInteger]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"updateLastConsumedMessageIndex\", null);\r\n__decorate([typecheck_1.asyncTypeCheck(['string', typecheck_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"updateUniqueName\", null);\r\nexports.Channel = Channel;\r\n/**\r\n * Fired when a Member has joined the Channel.\r\n * @event Channel#memberJoined\r\n * @type {Member}\r\n */\r\n/**\r\n * Fired when a Member has left the Channel.\r\n * @event Channel#memberLeft\r\n * @type {Member}\r\n */\r\n/**\r\n * Fired when a Member's fields has been updated.\r\n * @event Channel#memberUpdated\r\n * @type {Object}\r\n * @property {Member} member - Updated Member\r\n * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons\r\n */\r\n/**\r\n * Fired when a new Message has been added to the Channel.\r\n * @event Channel#messageAdded\r\n * @type {Message}\r\n */\r\n/**\r\n * Fired when Message is removed from Channel's message list.\r\n * @event Channel#messageRemoved\r\n * @type {Message}\r\n */\r\n/**\r\n * Fired when an existing Message's fields are updated with new values.\r\n * @event Channel#messageUpdated\r\n * @type {Object}\r\n * @property {Message} message - Updated Message\r\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\r\n */\r\n/**\r\n * Fired when a Member has stopped typing.\r\n * @event Channel#typingEnded\r\n * @type {Member}\r\n */\r\n/**\r\n * Fired when a Member has started typing.\r\n * @event Channel#typingStarted\r\n * @type {Member}\r\n */\r\n/**\r\n * Fired when a Channel's attributes or metadata have been updated.\r\n * During Channel's {@link Client.create | creation and initialization} this event might be fired multiple times\r\n * for same joined or created Channel as new data is arriving from different sources.\r\n * @event Channel#updated\r\n * @type {Object}\r\n * @property {Channel} channel - Updated Channel\r\n * @property {Channel#UpdateReason[]} updateReasons - Array of Channel's updated event reasons\r\n */\r\n/**\r\n * Fired when the Channel was destroyed or currently logged in User has left private Channel\r\n * @event Channel#removed\r\n * @type {Channel}\r\n */"]},"metadata":{},"sourceType":"script"}