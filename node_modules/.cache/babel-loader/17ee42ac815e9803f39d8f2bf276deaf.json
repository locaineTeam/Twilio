{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Downloads\\\\Twilio\\\\src\\\\ChatApp.js\";\nimport React, { Component } from 'react';\nimport Chat from 'twilio-chat';\nimport { Chat as ChatUI } from '@progress/kendo-react-conversational-ui';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ChatApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoading: true,\n      messages: []\n    };\n    this.user = {\n      id: props.username,\n      name: props.username\n    };\n    this.setupChatClient = this.setupChatClient.bind(this);\n    this.messagesLoaded = this.messagesLoaded.bind(this);\n    this.messageAdded = this.messageAdded.bind(this);\n    this.sendMessage = this.sendMessage.bind(this);\n    this.handleError = this.handleError.bind(this);\n  }\n\n  async componentDidMount() {\n    const response = await fetch(`https://warm-hollows-35856.herokuapp.com/getTwilioToken?identity=Kyrie`); // fetch('/chat/token', {\n    //   headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    //   method: 'POST',\n    //   body: `identity=${encodeURIComponent(this.props.username)}`\n    // })\n    // .then(res => res.json())\n    // .then(data => Chat.create(data.token))\n    // .then(this.setupChatClient)\n    // .catch(this.handleError);\n\n    const data = await response.json();\n\n    data => Chat.create(data.token);\n\n    this.setupChatClient;\n  }\n\n  handleError(error) {\n    console.error(error);\n    this.setState({\n      error: 'Could not load chat.'\n    });\n  }\n\n  setupChatClient(client) {\n    this.client = client;\n    this.client.getChannelByUniqueName('general').then(channel => channel).catch(error => {\n      if (error.body.code === 50300) {\n        return this.client.createChannel({\n          uniqueName: 'general'\n        });\n      } else {\n        this.handleError(error);\n      }\n    }).then(channel => {\n      this.channel = channel;\n      return this.channel.join().catch(() => {});\n    }).then(() => {\n      this.setState({\n        isLoading: false\n      });\n      this.channel.getMessages().then(this.messagesLoaded);\n      this.channel.on('messageAdded', this.messageAdded);\n    }).catch(this.handleError);\n  }\n\n  twilioMessageToKendoMessage(message) {\n    return {\n      text: message.body,\n      author: {\n        id: message.author,\n        name: message.author\n      },\n      timestamp: message.timestamp\n    };\n  }\n\n  messagesLoaded(messagePage) {\n    this.setState({\n      messages: messagePage.items.map(this.twilioMessageToKendoMessage)\n    });\n  }\n\n  messageAdded(message) {\n    this.setState(prevState => ({\n      messages: [...prevState.messages, this.twilioMessageToKendoMessage(message)]\n    }));\n  }\n\n  sendMessage(event) {\n    this.channel.sendMessage(event.message.text);\n  }\n\n  componentWillUnmount() {\n    this.client.shutdown();\n  }\n\n  render() {\n    if (this.state.error) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 15\n      }, this);\n    } else if (this.state.isLoading) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading chat...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(ChatUI, {\n      user: this.user,\n      messages: this.state.messages,\n      onMessageSend: this.sendMessage,\n      width: 500\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 8\n    }, this);\n  }\n\n}\n\nexport default ChatApp;","map":{"version":3,"sources":["C:/Users/Usuario/Downloads/Twilio/src/ChatApp.js"],"names":["React","Component","Chat","ChatUI","ChatApp","constructor","props","state","error","isLoading","messages","user","id","username","name","setupChatClient","bind","messagesLoaded","messageAdded","sendMessage","handleError","componentDidMount","response","fetch","data","json","create","token","console","setState","client","getChannelByUniqueName","then","channel","catch","body","code","createChannel","uniqueName","join","getMessages","on","twilioMessageToKendoMessage","message","text","author","timestamp","messagePage","items","map","prevState","event","componentWillUnmount","shutdown","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Chat from 'twilio-chat';\r\nimport { Chat as ChatUI } from '@progress/kendo-react-conversational-ui';\r\n\r\nclass ChatApp extends Component {\r\n\tconstructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoading: true,\r\n      messages: []\r\n    };\r\n\r\n    this.user = {\r\n      id: props.username,\r\n      name: props.username\r\n    };\r\n\r\n    this.setupChatClient = this.setupChatClient.bind(this);\r\n    this.messagesLoaded = this.messagesLoaded.bind(this);\r\n    this.messageAdded = this.messageAdded.bind(this);\r\n    this.sendMessage = this.sendMessage.bind(this);\r\n    this.handleError = this.handleError.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n\r\n    const response = await fetch(`https://warm-hollows-35856.herokuapp.com/getTwilioToken?identity=Kyrie`);\r\n    // fetch('/chat/token', {\r\n    //   headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n    //   method: 'POST',\r\n    //   body: `identity=${encodeURIComponent(this.props.username)}`\r\n    // })\r\n      // .then(res => res.json())\r\n      // .then(data => Chat.create(data.token))\r\n      // .then(this.setupChatClient)\r\n      // .catch(this.handleError);\r\n\r\n    const data = await response.json();\r\n    data => Chat.create(data.token);\r\n    this.setupChatClient;\r\n\r\n\r\n    }\r\n\r\n\thandleError(error) {\r\n\t    console.error(error);\r\n\t    this.setState({\r\n\t      error: 'Could not load chat.'\r\n\t    });\r\n\t  }\r\n\r\n\r\n\tsetupChatClient(client) {\r\n    this.client = client;\r\n    this.client\r\n      .getChannelByUniqueName('general')\r\n      .then(channel => channel)\r\n      .catch(error => {\r\n        if (error.body.code === 50300) {\r\n          return this.client.createChannel({ uniqueName: 'general' });\r\n        } else {\r\n          this.handleError(error);\r\n      }\r\n    })\r\n      .then(channel => {\r\n       this.channel = channel;\r\n       return this.channel.join().catch(() => {});\r\n      })\r\n      .then(() => {\r\n        this.setState({ isLoading: false });\r\n        this.channel.getMessages().then(this.messagesLoaded);\r\n        this.channel.on('messageAdded', this.messageAdded);\r\n      })\r\n      .catch(this.handleError);\r\n   \t}\r\n\r\n   \ttwilioMessageToKendoMessage(message) {\r\n    return {\r\n      text: message.body,\r\n      author: { id: message.author, name: message.author },\r\n      timestamp: message.timestamp\r\n    \t};\r\n\t  }\r\n\r\n\tmessagesLoaded(messagePage) {\r\n\t    this.setState({\r\n\t      messages: messagePage.items.map(this.twilioMessageToKendoMessage)\r\n\t    \t});\r\n\t  }\r\n\r\n\t  messageAdded(message) {\r\n    this.setState(prevState => ({\r\n      messages: [\r\n        ...prevState.messages,\r\n        this.twilioMessageToKendoMessage(message)\r\n      ]\r\n    }));\r\n  }\r\n\tsendMessage(event) {\r\n\t    this.channel.sendMessage(event.message.text);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t    this.client.shutdown();\r\n\t  }\r\n\r\n\r\n\trender() {\r\n\t    if (this.state.error) {\r\n\t      return <p>{this.state.error}</p>;\r\n\t    } else if (this.state.isLoading) {\r\n\t      return <p>Loading chat...</p>;\r\n\t    }\r\n\t    return (\r\n\t      <ChatUI\r\n\t        user={this.user}\r\n\t        messages={this.state.messages}\r\n\t        onMessageSend={this.sendMessage}\r\n\t        width={500}\r\n\t      />\r\n\t    );\r\n\t  }\r\n}\r\n\r\nexport default ChatApp;"]},"metadata":{},"sourceType":"module"}