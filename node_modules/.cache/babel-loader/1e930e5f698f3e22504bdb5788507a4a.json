{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Downloads\\\\Twilio\\\\src\\\\ChatApp.js\";\nimport React, { Component } from 'react';\nimport Chat from 'twilio-chat';\nimport { Chat as ChatUI } from '@progress/kendo-react-conversational-ui';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ChatApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoading: true,\n      messages: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('/chat/token', {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      method: 'POST',\n      body: `identity=${encodeURIComponent(this.props.username)}`\n    }).then(res => res.json()).then(data => Chat.create(data.token)).then(this.setupChatClient).catch(this.handleError);\n  }\n\n  handleError(error) {\n    console.error(error);\n    this.setState({\n      error: 'Could not load chat.'\n    });\n  }\n\n  render() {\n    if (this.state.error) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }, this);\n    } else if (this.state.isLoading) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading chat...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(ChatUI, {\n      user: this.user,\n      messages: this.state.messages,\n      onMessageSend: this.sendMessage,\n      width: 500\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 8\n    }, this);\n  }\n\n}\n\nexport default ChatApp;","map":{"version":3,"sources":["C:/Users/Usuario/Downloads/Twilio/src/ChatApp.js"],"names":["React","Component","Chat","ChatUI","ChatApp","constructor","props","state","error","isLoading","messages","componentDidMount","fetch","headers","method","body","encodeURIComponent","username","then","res","json","data","create","token","setupChatClient","catch","handleError","console","setState","render","user","sendMessage"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASA,IAAI,IAAIC,MAAjB,QAA+B,yCAA/B;;;AAEA,MAAMC,OAAN,SAAsBH,SAAtB,CAAgC;AAC/BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,IADI;AAEXC,MAAAA,SAAS,EAAE,IAFA;AAGXC,MAAAA,QAAQ,EAAE;AAHC,KAAb;AAKD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,CAAC,aAAD,EAAgB;AACnBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OADU;AAEnBC,MAAAA,MAAM,EAAE,MAFW;AAGnBC,MAAAA,IAAI,EAAG,YAAWC,kBAAkB,CAAC,KAAKV,KAAL,CAAWW,QAAZ,CAAsB;AAHvC,KAAhB,CAAL,CAKGC,IALH,CAKQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EALf,EAMGF,IANH,CAMQG,IAAI,IAAInB,IAAI,CAACoB,MAAL,CAAYD,IAAI,CAACE,KAAjB,CANhB,EAOGL,IAPH,CAOQ,KAAKM,eAPb,EAQGC,KARH,CAQS,KAAKC,WARd;AASC;;AAEJA,EAAAA,WAAW,CAAClB,KAAD,EAAQ;AACfmB,IAAAA,OAAO,CAACnB,KAAR,CAAcA,KAAd;AACA,SAAKoB,QAAL,CAAc;AACZpB,MAAAA,KAAK,EAAE;AADK,KAAd;AAGD;;AAEHqB,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKtB,KAAL,CAAWC,KAAf,EAAsB;AACpB,0BAAO;AAAA,kBAAI,KAAKD,KAAL,CAAWC;AAAf;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,MAEO,IAAI,KAAKD,KAAL,CAAWE,SAAf,EAA0B;AAC/B,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AACD,wBACE,QAAC,MAAD;AACE,MAAA,IAAI,EAAE,KAAKqB,IADb;AAEE,MAAA,QAAQ,EAAE,KAAKvB,KAAL,CAAWG,QAFvB;AAGE,MAAA,aAAa,EAAE,KAAKqB,WAHtB;AAIE,MAAA,KAAK,EAAE;AAJT;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AA3C4B;;AA8ChC,eAAe3B,OAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport Chat from 'twilio-chat';\r\nimport { Chat as ChatUI } from '@progress/kendo-react-conversational-ui';\r\n\r\nclass ChatApp extends Component {\r\n\tconstructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoading: true,\r\n      messages: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('/chat/token', {\r\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n      method: 'POST',\r\n      body: `identity=${encodeURIComponent(this.props.username)}`\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => Chat.create(data.token))\r\n      .then(this.setupChatClient)\r\n      .catch(this.handleError);\r\n    }\r\n\r\n\thandleError(error) {\r\n\t    console.error(error);\r\n\t    this.setState({\r\n\t      error: 'Could not load chat.'\r\n\t    });\r\n\t  }\r\n\t  \r\n\trender() {\r\n\t    if (this.state.error) {\r\n\t      return <p>{this.state.error}</p>;\r\n\t    } else if (this.state.isLoading) {\r\n\t      return <p>Loading chat...</p>;\r\n\t    }\r\n\t    return (\r\n\t      <ChatUI\r\n\t        user={this.user}\r\n\t        messages={this.state.messages}\r\n\t        onMessageSend={this.sendMessage}\r\n\t        width={500}\r\n\t      />\r\n\t    );\r\n\t  }\r\n}\r\n\r\nexport default ChatApp;"]},"metadata":{},"sourceType":"module"}