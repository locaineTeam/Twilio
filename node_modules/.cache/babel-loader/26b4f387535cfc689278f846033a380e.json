{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar MediaTrack = require('./mediatrack');\n/**\r\n * An {@link AudioTrack} is a {@link Track} representing audio.\r\n * @extends Track\r\n * @property {boolean} isStarted - Whether or not the {@link AudioTrack} has\r\n *   started; if the {@link AudioTrack} started, there is enough audio data to\r\n *   begin playback\r\n * @property {boolean} isEnabled - Whether or not the {@link AudioTrack} is\r\n *   enabled; if the {@link AudioTrack} is not enabled, it is \"muted\"\r\n * @property {Track.Kind} kind - \"audio\"\r\n * @property {MediaStreamTrack} mediaStreamTrack - An audio MediaStreamTrack\r\n * @property {?MediaStreamTrack} processedTrack - The source of processed audio samples.\r\n * It is always null as audio processing is not currently supported.\r\n * @emits AudioTrack#disabled\r\n * @emits AudioTrack#enabled\r\n * @emits AudioTrack#started\r\n */\n\n\nvar AudioTrack = function (_MediaTrack) {\n  _inherits(AudioTrack, _MediaTrack);\n  /**\r\n   * Construct an {@link AudioTrack}.\r\n   * @param {MediaTrackTransceiver} mediaTrackTransceiver\r\n   * @param {{log: Log}} options\r\n   */\n\n\n  function AudioTrack(mediaTrackTransceiver, options) {\n    _classCallCheck(this, AudioTrack);\n\n    return _possibleConstructorReturn(this, (AudioTrack.__proto__ || Object.getPrototypeOf(AudioTrack)).call(this, mediaTrackTransceiver, options));\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _createClass(AudioTrack, [{\n    key: '_start',\n    value: function _start() {\n      _get(AudioTrack.prototype.__proto__ || Object.getPrototypeOf(AudioTrack.prototype), '_start', this).call(this);\n\n      if (this._dummyEl) {\n        this._detachElement(this._dummyEl);\n      }\n    }\n    /**\r\n     * Create an HTMLAudioElement and attach the {@link AudioTrack} to it.\r\n     *\r\n     * The HTMLAudioElement's <code>srcObject</code> will be set to a new\r\n     * MediaStream containing the {@link AudioTrack}'s MediaStreamTrack.\r\n     *\r\n     * @returns {HTMLAudioElement} audioElement\r\n     * @example\r\n     * const Video = require('twilio-video');\r\n     *\r\n     * Video.createLocalAudioTrack().then(function(audioTrack) {\r\n     *   const audioElement = audioTrack.attach();\r\n     *   document.body.appendChild(audioElement);\r\n     * });\r\n    */\n\n    /**\r\n    * Attach the {@link AudioTrack} to an existing HTMLMediaElement. The\r\n    * HTMLMediaElement could be an HTMLAudioElement or an HTMLVideoElement.\r\n    *\r\n    * If the HTMLMediaElement's <code>srcObject</code> is not set to a MediaStream,\r\n    * this method sets it to a new MediaStream containing the {@link AudioTrack}'s\r\n    * MediaStreamTrack; otherwise, it adds the {@link MediaTrack}'s\r\n    * MediaStreamTrack to the existing MediaStream. Finally, if there are any other\r\n    * MediaStreamTracks of the same kind on the MediaStream, this method removes\r\n    * them.\r\n    *\r\n    * @param {HTMLMediaElement} mediaElement - The HTMLMediaElement to attach to\r\n    * @returns {HTMLMediaElement} mediaElement\r\n    * @example\r\n    * const Video = require('twilio-video');\r\n    *\r\n    * const videoElement = document.createElement('video');\r\n    * document.body.appendChild(videoElement);\r\n    *\r\n    * Video.createLocalAudioTrack().then(function(audioTrack) {\r\n    *   audioTrack.attach(videoElement);\r\n    * });\r\n    */\n\n    /**\r\n    * Attach the {@link AudioTrack} to an HTMLMediaElement selected by\r\n    * <code>document.querySelector</code>. The HTMLMediaElement could be an\r\n    * HTMLAudioElement or an HTMLVideoElement.\r\n    *\r\n    * If the HTMLMediaElement's <code>srcObject</code> is not set to a MediaStream,\r\n    * this method sets it to a new MediaStream containing the {@link AudioTrack}'s\r\n    * MediaStreamTrack; otherwise, it adds the {@link AudioTrack}'s\r\n    * MediaStreamTrack to the existing MediaStream. Finally, if there are any other\r\n    * MediaStreamTracks of the same kind on the MediaStream, this method removes\r\n    * them.\r\n    *\r\n    * @param {string} selector - A query selector for the HTMLMediaElement to\r\n    *   attach to\r\n    * @returns {HTMLMediaElement} mediaElement\r\n    * @example\r\n    * const Video = require('twilio-video');\r\n    *\r\n    * const videoElement = document.createElement('video');\r\n    * videoElement.id = 'my-video-element';\r\n    * document.body.appendChild(videoElement);\r\n    *\r\n    * Video.createLocalAudioTrack().then(function(track) {\r\n    *   track.attach('#my-video-element');\r\n    * });\r\n    */\n\n  }, {\n    key: 'attach',\n    value: function attach() {\n      return _get(AudioTrack.prototype.__proto__ || Object.getPrototypeOf(AudioTrack.prototype), 'attach', this).apply(this, arguments);\n    }\n    /**\r\n     * Detach the {@link AudioTrack} from all previously attached HTMLMediaElements.\r\n     * @returns {Array<HTMLMediaElement>} mediaElements\r\n     * @example\r\n     * const mediaElements = audioTrack.detach();\r\n     * mediaElements.forEach(mediaElement => mediaElement.remove());\r\n    */\n\n    /**\r\n    * Detach the {@link AudioTrack} from a previously attached HTMLMediaElement.\r\n    * @param {HTMLMediaElement} mediaElement - One of the HTMLMediaElements to\r\n    *   which the {@link AudioTrack} is attached\r\n    * @returns {HTMLMediaElement} mediaElement\r\n    * @example\r\n    * const videoElement = document.getElementById('my-video-element');\r\n    * audioTrack.detach(videoElement).remove();\r\n    */\n\n    /**\r\n    * Detach the {@link AudioTrack} from a previously attached HTMLMediaElement\r\n    *   specified by <code>document.querySelector</code>.\r\n    * @param {string} selector - The query selector of HTMLMediaElement to which\r\n    *    the {@link AudioTrack} is attached\r\n    * @returns {HTMLMediaElement} mediaElement\r\n    * @example\r\n    * audioTrack.detach('#my-video-element').remove();\r\n    */\n\n  }, {\n    key: 'detach',\n    value: function detach() {\n      return _get(AudioTrack.prototype.__proto__ || Object.getPrototypeOf(AudioTrack.prototype), 'detach', this).apply(this, arguments);\n    }\n  }]);\n\n  return AudioTrack;\n}(MediaTrack);\n/**\r\n * The {@link AudioTrack} was disabled, i.e. \"muted\".\r\n * @param {AudioTrack} track - The {@link AudioTrack} that was disabled\r\n * @event AudioTrack#disabled\r\n */\n\n/**\r\n * The {@link AudioTrack} was enabled, i.e. \"unmuted\".\r\n * @param {AudioTrack} track - The {@link AudioTrack} that was enabled\r\n * @event AudioTrack#enabled\r\n */\n\n/**\r\n * The {@link AudioTrack} started. This means there is enough audio data to\r\n * begin playback.\r\n * @param {AudioTrack} track - The {@link AudioTrack} that started\r\n * @event AudioTrack#started\r\n */\n\n\nmodule.exports = AudioTrack;","map":{"version":3,"sources":["C:/Users/Usuario/Downloads/Twilio/node_modules/twilio-video/es5/media/track/audiotrack.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_get","get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","undefined","parent","getPrototypeOf","value","getter","call","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","MediaTrack","require","AudioTrack","_MediaTrack","mediaTrackTransceiver","options","_start","_dummyEl","_detachElement","attach","apply","arguments","detach","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\r\n\r\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\r\n\r\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\r\n\r\nvar MediaTrack = require('./mediatrack');\r\n\r\n/**\r\n * An {@link AudioTrack} is a {@link Track} representing audio.\r\n * @extends Track\r\n * @property {boolean} isStarted - Whether or not the {@link AudioTrack} has\r\n *   started; if the {@link AudioTrack} started, there is enough audio data to\r\n *   begin playback\r\n * @property {boolean} isEnabled - Whether or not the {@link AudioTrack} is\r\n *   enabled; if the {@link AudioTrack} is not enabled, it is \"muted\"\r\n * @property {Track.Kind} kind - \"audio\"\r\n * @property {MediaStreamTrack} mediaStreamTrack - An audio MediaStreamTrack\r\n * @property {?MediaStreamTrack} processedTrack - The source of processed audio samples.\r\n * It is always null as audio processing is not currently supported.\r\n * @emits AudioTrack#disabled\r\n * @emits AudioTrack#enabled\r\n * @emits AudioTrack#started\r\n */\r\n\r\nvar AudioTrack = function (_MediaTrack) {\r\n  _inherits(AudioTrack, _MediaTrack);\r\n\r\n  /**\r\n   * Construct an {@link AudioTrack}.\r\n   * @param {MediaTrackTransceiver} mediaTrackTransceiver\r\n   * @param {{log: Log}} options\r\n   */\r\n  function AudioTrack(mediaTrackTransceiver, options) {\r\n    _classCallCheck(this, AudioTrack);\r\n\r\n    return _possibleConstructorReturn(this, (AudioTrack.__proto__ || Object.getPrototypeOf(AudioTrack)).call(this, mediaTrackTransceiver, options));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  _createClass(AudioTrack, [{\r\n    key: '_start',\r\n    value: function _start() {\r\n      _get(AudioTrack.prototype.__proto__ || Object.getPrototypeOf(AudioTrack.prototype), '_start', this).call(this);\r\n      if (this._dummyEl) {\r\n        this._detachElement(this._dummyEl);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Create an HTMLAudioElement and attach the {@link AudioTrack} to it.\r\n     *\r\n     * The HTMLAudioElement's <code>srcObject</code> will be set to a new\r\n     * MediaStream containing the {@link AudioTrack}'s MediaStreamTrack.\r\n     *\r\n     * @returns {HTMLAudioElement} audioElement\r\n     * @example\r\n     * const Video = require('twilio-video');\r\n     *\r\n     * Video.createLocalAudioTrack().then(function(audioTrack) {\r\n     *   const audioElement = audioTrack.attach();\r\n     *   document.body.appendChild(audioElement);\r\n     * });\r\n    */ /**\r\n       * Attach the {@link AudioTrack} to an existing HTMLMediaElement. The\r\n       * HTMLMediaElement could be an HTMLAudioElement or an HTMLVideoElement.\r\n       *\r\n       * If the HTMLMediaElement's <code>srcObject</code> is not set to a MediaStream,\r\n       * this method sets it to a new MediaStream containing the {@link AudioTrack}'s\r\n       * MediaStreamTrack; otherwise, it adds the {@link MediaTrack}'s\r\n       * MediaStreamTrack to the existing MediaStream. Finally, if there are any other\r\n       * MediaStreamTracks of the same kind on the MediaStream, this method removes\r\n       * them.\r\n       *\r\n       * @param {HTMLMediaElement} mediaElement - The HTMLMediaElement to attach to\r\n       * @returns {HTMLMediaElement} mediaElement\r\n       * @example\r\n       * const Video = require('twilio-video');\r\n       *\r\n       * const videoElement = document.createElement('video');\r\n       * document.body.appendChild(videoElement);\r\n       *\r\n       * Video.createLocalAudioTrack().then(function(audioTrack) {\r\n       *   audioTrack.attach(videoElement);\r\n       * });\r\n       */ /**\r\n          * Attach the {@link AudioTrack} to an HTMLMediaElement selected by\r\n          * <code>document.querySelector</code>. The HTMLMediaElement could be an\r\n          * HTMLAudioElement or an HTMLVideoElement.\r\n          *\r\n          * If the HTMLMediaElement's <code>srcObject</code> is not set to a MediaStream,\r\n          * this method sets it to a new MediaStream containing the {@link AudioTrack}'s\r\n          * MediaStreamTrack; otherwise, it adds the {@link AudioTrack}'s\r\n          * MediaStreamTrack to the existing MediaStream. Finally, if there are any other\r\n          * MediaStreamTracks of the same kind on the MediaStream, this method removes\r\n          * them.\r\n          *\r\n          * @param {string} selector - A query selector for the HTMLMediaElement to\r\n          *   attach to\r\n          * @returns {HTMLMediaElement} mediaElement\r\n          * @example\r\n          * const Video = require('twilio-video');\r\n          *\r\n          * const videoElement = document.createElement('video');\r\n          * videoElement.id = 'my-video-element';\r\n          * document.body.appendChild(videoElement);\r\n          *\r\n          * Video.createLocalAudioTrack().then(function(track) {\r\n          *   track.attach('#my-video-element');\r\n          * });\r\n          */\r\n\r\n  }, {\r\n    key: 'attach',\r\n    value: function attach() {\r\n      return _get(AudioTrack.prototype.__proto__ || Object.getPrototypeOf(AudioTrack.prototype), 'attach', this).apply(this, arguments);\r\n    }\r\n\r\n    /**\r\n     * Detach the {@link AudioTrack} from all previously attached HTMLMediaElements.\r\n     * @returns {Array<HTMLMediaElement>} mediaElements\r\n     * @example\r\n     * const mediaElements = audioTrack.detach();\r\n     * mediaElements.forEach(mediaElement => mediaElement.remove());\r\n    */ /**\r\n       * Detach the {@link AudioTrack} from a previously attached HTMLMediaElement.\r\n       * @param {HTMLMediaElement} mediaElement - One of the HTMLMediaElements to\r\n       *   which the {@link AudioTrack} is attached\r\n       * @returns {HTMLMediaElement} mediaElement\r\n       * @example\r\n       * const videoElement = document.getElementById('my-video-element');\r\n       * audioTrack.detach(videoElement).remove();\r\n       */ /**\r\n          * Detach the {@link AudioTrack} from a previously attached HTMLMediaElement\r\n          *   specified by <code>document.querySelector</code>.\r\n          * @param {string} selector - The query selector of HTMLMediaElement to which\r\n          *    the {@link AudioTrack} is attached\r\n          * @returns {HTMLMediaElement} mediaElement\r\n          * @example\r\n          * audioTrack.detach('#my-video-element').remove();\r\n          */\r\n\r\n  }, {\r\n    key: 'detach',\r\n    value: function detach() {\r\n      return _get(AudioTrack.prototype.__proto__ || Object.getPrototypeOf(AudioTrack.prototype), 'detach', this).apply(this, arguments);\r\n    }\r\n  }]);\r\n\r\n  return AudioTrack;\r\n}(MediaTrack);\r\n\r\n/**\r\n * The {@link AudioTrack} was disabled, i.e. \"muted\".\r\n * @param {AudioTrack} track - The {@link AudioTrack} that was disabled\r\n * @event AudioTrack#disabled\r\n */\r\n\r\n/**\r\n * The {@link AudioTrack} was enabled, i.e. \"unmuted\".\r\n * @param {AudioTrack} track - The {@link AudioTrack} that was enabled\r\n * @event AudioTrack#enabled\r\n */\r\n\r\n/**\r\n * The {@link AudioTrack} started. This means there is enough audio data to\r\n * begin playback.\r\n * @param {AudioTrack} track - The {@link AudioTrack} that started\r\n * @event AudioTrack#started\r\n */\r\n\r\nmodule.exports = AudioTrack;"]},"metadata":{},"sourceType":"script"}