{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar DefaultBackoff = require('backoff');\n\nvar _require = require('@twilio/webrtc'),\n    DefaultMediaStream = _require.MediaStream,\n    DefaultRTCIceCandidate = _require.RTCIceCandidate,\n    DefaultRTCPeerConnection = _require.RTCPeerConnection,\n    DefaultRTCSessionDescription = _require.RTCSessionDescription,\n    getStatistics = _require.getStats;\n\nvar _require2 = require('@twilio/webrtc/lib/util'),\n    guessBrowser = _require2.guessBrowser;\n\nvar _require3 = require('@twilio/webrtc/lib/util/sdp'),\n    getSdpFormat = _require3.getSdpFormat;\n\nvar _require4 = require('../../util/constants'),\n    DEFAULT_ICE_GATHERING_TIMEOUT_MS = _require4.DEFAULT_ICE_GATHERING_TIMEOUT_MS,\n    DEFAULT_LOG_LEVEL = _require4.DEFAULT_LOG_LEVEL,\n    DEFAULT_SESSION_TIMEOUT_SEC = _require4.DEFAULT_SESSION_TIMEOUT_SEC,\n    iceRestartBackoffConfig = _require4.iceRestartBackoffConfig;\n\nvar _require5 = require('../../util/sdp'),\n    createCodecMapForMediaSection = _require5.createCodecMapForMediaSection,\n    disableRtx = _require5.disableRtx,\n    enableDtxForOpus = _require5.enableDtxForOpus,\n    getMediaSections = _require5.getMediaSections,\n    removeSSRCAttributes = _require5.removeSSRCAttributes,\n    revertSimulcastForNonVP8MediaSections = _require5.revertSimulcastForNonVP8MediaSections,\n    setBitrateParameters = _require5.setBitrateParameters,\n    setCodecPreferences = _require5.setCodecPreferences,\n    setSimulcast = _require5.setSimulcast,\n    unifiedPlanAddOrRewriteNewTrackIds = _require5.unifiedPlanAddOrRewriteNewTrackIds,\n    unifiedPlanAddOrRewriteTrackIds = _require5.unifiedPlanAddOrRewriteTrackIds,\n    unifiedPlanFilterLocalCodecs = _require5.unifiedPlanFilterLocalCodecs;\n\nvar DefaultTimeout = require('../../util/timeout');\n\nvar _require6 = require('../../util/twilio-video-errors'),\n    MediaClientLocalDescFailedError = _require6.MediaClientLocalDescFailedError,\n    MediaClientRemoteDescFailedError = _require6.MediaClientRemoteDescFailedError;\n\nvar _require7 = require('../../util'),\n    buildLogLevels = _require7.buildLogLevels,\n    getPlatform = _require7.getPlatform,\n    isChromeScreenShareTrack = _require7.isChromeScreenShareTrack,\n    oncePerTick = _require7.oncePerTick;\n\nvar IceBox = require('./icebox');\n\nvar DefaultIceConnectionMonitor = require('./iceconnectionmonitor.js');\n\nvar DataTrackReceiver = require('../../data/receiver');\n\nvar MediaTrackReceiver = require('../../media/track/receiver');\n\nvar StateMachine = require('../../statemachine');\n\nvar Log = require('../../util/log');\n\nvar IdentityTrackMatcher = require('../../util/sdp/trackmatcher/identity');\n\nvar OrderedTrackMatcher = require('../../util/sdp/trackmatcher/ordered');\n\nvar MIDTrackMatcher = require('../../util/sdp/trackmatcher/mid');\n\nvar workaroundIssue8329 = require('../../util/sdp/issue8329');\n\nvar guess = guessBrowser();\nvar platform = getPlatform();\nvar isAndroid = /android/.test(platform);\nvar isChrome = guess === 'chrome';\nvar isFirefox = guess === 'firefox';\nvar isSafari = guess === 'safari';\nvar isRTCRtpSenderParamsSupported = typeof RTCRtpSender !== 'undefined' && typeof RTCRtpSender.prototype.getParameters === 'function' && typeof RTCRtpSender.prototype.setParameters === 'function';\nvar nInstances = 0;\n/*\r\nPeerConnectionV2 States\r\n-----------------------\r\n\r\n    +------+    +--------+\r\n    |      |    |        |\r\n    | open |--->| closed |\r\n    |      |    |        |\r\n    +------+    +--------+\r\n      |  ^          ^\r\n      |  |          |\r\n      |  |          |\r\n      v  |          |\r\n  +----------+      |\r\n  |          |      |\r\n  | updating |------+\r\n  |          |\r\n  +----------+\r\n\r\n*/\n\nvar states = {\n  open: ['closed', 'updating'],\n  updating: ['closed', 'open'],\n  closed: []\n};\n/**\r\n * @extends StateMachine\r\n * @property {id}\r\n * @emits PeerConnectionV2#connectionStateChanged\r\n * @emits PeerConnectionV2#iceConnectionStateChanged\r\n * @emits PeerConnectionV2#candidates\r\n * @emits PeerConnectionV2#description\r\n */\n\nvar PeerConnectionV2 = function (_StateMachine) {\n  _inherits(PeerConnectionV2, _StateMachine);\n  /**\r\n   * Construct a {@link PeerConnectionV2}.\r\n   * @param {string} id\r\n   * @param {EncodingParametersImpl} encodingParameters\r\n   * @param {PreferredCodecs} preferredCodecs\r\n   * @param {object} [options]\r\n   */\n\n\n  function PeerConnectionV2(id, encodingParameters, preferredCodecs, options) {\n    _classCallCheck(this, PeerConnectionV2);\n\n    var _this = _possibleConstructorReturn(this, (PeerConnectionV2.__proto__ || Object.getPrototypeOf(PeerConnectionV2)).call(this, 'open', states));\n\n    options = Object.assign({\n      enableDscp: false,\n      dummyAudioMediaStreamTrack: null,\n      isChromeScreenShareTrack: isChromeScreenShareTrack,\n      iceServers: [],\n      isRTCRtpSenderParamsSupported: isRTCRtpSenderParamsSupported,\n      logLevel: DEFAULT_LOG_LEVEL,\n      offerOptions: {},\n      revertSimulcastForNonVP8MediaSections: revertSimulcastForNonVP8MediaSections,\n      sessionTimeout: DEFAULT_SESSION_TIMEOUT_SEC * 1000,\n      setBitrateParameters: setBitrateParameters,\n      setCodecPreferences: setCodecPreferences,\n      setSimulcast: setSimulcast,\n      Backoff: DefaultBackoff,\n      IceConnectionMonitor: DefaultIceConnectionMonitor,\n      MediaStream: DefaultMediaStream,\n      RTCIceCandidate: DefaultRTCIceCandidate,\n      RTCPeerConnection: DefaultRTCPeerConnection,\n      RTCSessionDescription: DefaultRTCSessionDescription,\n      Timeout: DefaultTimeout\n    }, options);\n    var configuration = getConfiguration(options);\n    var sdpFormat = getSdpFormat(configuration.sdpSemantics);\n    var isUnifiedPlan = sdpFormat === 'unified';\n    var localMediaStream = isUnifiedPlan ? null : new options.MediaStream();\n    var logLevels = buildLogLevels(options.logLevel);\n    var RTCPeerConnection = options.RTCPeerConnection;\n\n    if (options.enableDscp === true) {\n      options.chromeSpecificConstraints = options.chromeSpecificConstraints || {};\n      options.chromeSpecificConstraints.optional = options.chromeSpecificConstraints.optional || [];\n      options.chromeSpecificConstraints.optional.push({\n        googDscp: true\n      });\n    }\n\n    var log = options.log ? options.log.createLog('webrtc', _this) : new Log('webrtc', _this, logLevels, options.loggerName);\n    var peerConnection = new RTCPeerConnection(configuration, options.chromeSpecificConstraints);\n\n    if (options.dummyAudioMediaStreamTrack) {\n      peerConnection.addTrack(options.dummyAudioMediaStreamTrack, localMediaStream || new options.MediaStream());\n    }\n\n    Object.defineProperties(_this, {\n      _appliedTrackIdsToAttributes: {\n        value: new Map(),\n        writable: true\n      },\n      _dataChannels: {\n        value: new Map()\n      },\n      _dataTrackReceivers: {\n        value: new Set()\n      },\n      _descriptionRevision: {\n        writable: true,\n        value: 0\n      },\n      _didGenerateLocalCandidates: {\n        writable: true,\n        value: false\n      },\n      _enableDscp: {\n        value: options.enableDscp\n      },\n      _encodingParameters: {\n        value: encodingParameters\n      },\n      _isChromeScreenShareTrack: {\n        value: options.isChromeScreenShareTrack\n      },\n      _iceGatheringFailed: {\n        value: false,\n        writable: true\n      },\n      _iceGatheringTimeout: {\n        value: new options.Timeout(function () {\n          return _this._handleIceGatheringTimeout();\n        }, DEFAULT_ICE_GATHERING_TIMEOUT_MS, false)\n      },\n      _iceRestartBackoff: {\n        value: options.Backoff.exponential(iceRestartBackoffConfig)\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _isIceConnectionInactive: {\n        writable: true,\n        value: false\n      },\n      _isIceLite: {\n        writable: true,\n        value: false\n      },\n      _isIceRestartBackoffInProgress: {\n        writable: true,\n        value: false\n      },\n      _isRestartingIce: {\n        writable: true,\n        value: false\n      },\n      _isUnifiedPlan: {\n        value: isUnifiedPlan\n      },\n      _isRTCRtpSenderParamsSupported: {\n        value: options.isRTCRtpSenderParamsSupported\n      },\n      _lastIceConnectionState: {\n        writable: true,\n        value: null\n      },\n      _lastStableDescriptionRevision: {\n        writable: true,\n        value: 0\n      },\n      _localCandidates: {\n        writable: true,\n        value: []\n      },\n      _localCodecs: {\n        value: new Set()\n      },\n      _localCandidatesRevision: {\n        writable: true,\n        value: 1\n      },\n      _localDescriptionWithoutSimulcast: {\n        writable: true,\n        value: null\n      },\n      _localDescription: {\n        writable: true,\n        value: null\n      },\n      _localMediaStream: {\n        value: localMediaStream\n      },\n      _localUfrag: {\n        writable: true,\n        value: null\n      },\n      _log: {\n        value: log\n      },\n      _eventObserver: {\n        value: options.eventObserver\n      },\n      _remoteCodecMaps: {\n        value: new Map()\n      },\n      _rtpSenders: {\n        value: new Map()\n      },\n      _iceConnectionMonitor: {\n        value: new options.IceConnectionMonitor(peerConnection)\n      },\n      _mediaTrackReceivers: {\n        value: new Set()\n      },\n      _needsAnswer: {\n        writable: true,\n        value: false\n      },\n      _negotiationRole: {\n        writable: true,\n        value: null\n      },\n      _offerOptions: {\n        writable: true,\n        value: options.offerOptions\n      },\n      _onEncodingParametersChanged: {\n        value: oncePerTick(function () {\n          if (_this._isRTCRtpSenderParamsSupported) {\n            if (!_this._needsAnswer) {\n              updateEncodingParameters(_this);\n            }\n\n            return;\n          }\n\n          _this.offer();\n        })\n      },\n      _peerConnection: {\n        value: peerConnection\n      },\n      _preferredAudioCodecs: {\n        value: preferredCodecs.audio\n      },\n      _preferredVideoCodecs: {\n        value: preferredCodecs.video\n      },\n      _shouldApplyDtx: {\n        value: preferredCodecs.audio.every(function (_ref) {\n          var codec = _ref.codec;\n          return codec !== 'opus';\n        }) || preferredCodecs.audio.some(function (_ref2) {\n          var codec = _ref2.codec,\n              dtx = _ref2.dtx;\n          return codec === 'opus' && dtx;\n        })\n      },\n      _shouldApplySimulcast: {\n        value: (isChrome || isSafari) && preferredCodecs.video.some(function (codecSettings) {\n          return codecSettings.codec.toLowerCase() === 'vp8' && codecSettings.simulcast;\n        })\n      },\n      _queuedDescription: {\n        writable: true,\n        value: null\n      },\n      _iceReconnectTimeout: {\n        value: new options.Timeout(function () {\n          log.debug('ICE reconnect timed out');\n\n          _this.close();\n        }, options.sessionTimeout, false)\n      },\n      _recycledTransceivers: {\n        value: {\n          audio: [],\n          video: []\n        }\n      },\n      _replaceTrackPromises: {\n        value: new Map()\n      },\n      _remoteCandidates: {\n        writable: true,\n        value: new IceBox()\n      },\n      _sdpFormat: {\n        value: sdpFormat\n      },\n      _setBitrateParameters: {\n        value: options.setBitrateParameters\n      },\n      _setCodecPreferences: {\n        // NOTE(mmalavalli): Re-ordering payload types in order to make sure a non-H264\n        // preferred codec is selected does not work on Android Firefox due to this behavior:\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1683258. So, we work around this by\n        // not applying any non-H264 preferred video codec.\n        value: isFirefox && isAndroid && preferredCodecs.video[0] && preferredCodecs.video[0].codec.toLowerCase() !== 'h264' ? function (sdp) {\n          return sdp;\n        } : options.setCodecPreferences\n      },\n      _setSimulcast: {\n        value: options.setSimulcast\n      },\n      _revertSimulcastForNonVP8MediaSections: {\n        value: options.revertSimulcastForNonVP8MediaSections\n      },\n      _RTCIceCandidate: {\n        value: options.RTCIceCandidate\n      },\n      _RTCPeerConnection: {\n        value: options.RTCPeerConnection\n      },\n      _RTCSessionDescription: {\n        value: options.RTCSessionDescription\n      },\n      _shouldOffer: {\n        writable: true,\n        value: false\n      },\n      _shouldRestartIce: {\n        writable: true,\n        value: false\n      },\n      _trackIdsToAttributes: {\n        value: new Map(),\n        writable: true\n      },\n      _trackMatcher: {\n        writable: true,\n        value: null\n      },\n      id: {\n        enumerable: true,\n        value: id\n      }\n    });\n    encodingParameters.on('changed', _this._onEncodingParametersChanged);\n    peerConnection.addEventListener('connectionstatechange', _this._handleConnectionStateChange.bind(_this));\n    peerConnection.addEventListener('datachannel', _this._handleDataChannelEvent.bind(_this));\n    peerConnection.addEventListener('icecandidate', _this._handleIceCandidateEvent.bind(_this));\n    peerConnection.addEventListener('iceconnectionstatechange', _this._handleIceConnectionStateChange.bind(_this));\n    peerConnection.addEventListener('icegatheringstatechange', _this._handleIceGatheringStateChange.bind(_this));\n    peerConnection.addEventListener('signalingstatechange', _this._handleSignalingStateChange.bind(_this));\n    peerConnection.addEventListener('track', _this._handleTrackEvent.bind(_this));\n\n    _this._iceRestartBackoff.on('ready', function () {\n      return _this._initiateIceRestart();\n    });\n\n    var self = _this;\n\n    _this.on('stateChanged', function stateChanged(state) {\n      if (state !== 'closed') {\n        return;\n      }\n\n      self.removeListener('stateChanged', stateChanged);\n\n      self._dataChannels.forEach(function (dataChannel, dataTrackSender) {\n        self.removeDataTrackSender(dataTrackSender);\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(PeerConnectionV2, [{\n    key: 'toString',\n    value: function toString() {\n      return '[PeerConnectionV2 #' + this._instanceId + ': ' + this.id + ']';\n    }\n    /**\r\n     * The {@link PeerConnectionV2}'s underlying RTCPeerConnection's RTCPeerConnectionState\r\n     * if supported by the browser, its RTCIceConnectionState otherwise.\r\n     * @property {RTCPeerConnectionState}\r\n     */\n\n  }, {\n    key: '_addIceCandidate',\n\n    /**\r\n     * Add an ICE candidate to the {@link PeerConnectionV2}.\r\n     * @private\r\n     * @param {object} candidate\r\n     * @returns {Promise<void>}\r\n     */\n    value: function _addIceCandidate(candidate) {\n      var _this2 = this;\n\n      return Promise.resolve().then(function () {\n        candidate = new _this2._RTCIceCandidate(candidate);\n        return _this2._peerConnection.addIceCandidate(candidate);\n      }).catch(function (error) {\n        // NOTE(mmalavalli): Firefox 68+ now generates an RTCIceCandidate with an\n        // empty candidate string to signal end-of-candidates, followed by a null\n        // candidate. As of now, Chrome and Safari reject this RTCIceCandidate. Since\n        // this does not affect the media connection between Firefox 68+ and Chrome/Safari\n        // in Peer-to-Peer Rooms, we suppress the Error and log a warning message.\n        //\n        // Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n        //\n        _this2._log.warn('Failed to add RTCIceCandidate ' + (candidate ? '\"' + candidate.candidate + '\"' : 'null') + ': ' + error.message);\n      });\n    }\n    /**\r\n     * Add ICE candidates to the {@link PeerConnectionV2}.\r\n     * @private\r\n     * @param {Array<object>} candidates\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: '_addIceCandidates',\n    value: function _addIceCandidates(candidates) {\n      return Promise.all(candidates.map(this._addIceCandidate, this)).then(function () {});\n    }\n    /**\r\n     * Add a new RTCRtpTransceiver or update an existing RTCRtpTransceiver for the\r\n     * given MediaStreamTrack.\r\n     * @private\r\n     * @param {MediaStreamTrack} track\r\n     * @returns {RTCRtpTransceiver}\r\n     */\n\n  }, {\n    key: '_addOrUpdateTransceiver',\n    value: function _addOrUpdateTransceiver(track) {\n      var _this3 = this;\n\n      var transceiver = takeRecycledTransceiver(this, track.kind);\n\n      if (transceiver && transceiver.sender) {\n        var oldTrackId = transceiver.sender.track ? transceiver.sender.track.id : null;\n\n        if (oldTrackId) {\n          this._log.warn('Reusing transceiver: ' + transceiver.mid + '] ' + oldTrackId + ' => ' + track.id);\n        } // NOTE(mpatwardhan):remember this transceiver while we replace track.\n        // we recycle transceivers that are not in use after 'negotiationCompleted', but we want to prevent\n        // this one from getting recycled while replaceTrack is pending.\n\n\n        this._replaceTrackPromises.set(transceiver, transceiver.sender.replaceTrack(track).then(function () {\n          transceiver.direction = 'sendrecv';\n        }, function () {// Do nothing.\n        }).finally(function () {\n          _this3._replaceTrackPromises.delete(transceiver);\n        }));\n\n        return transceiver;\n      }\n\n      return this._peerConnection.addTransceiver(track);\n    }\n    /**\r\n     * Check the {@link IceBox}.\r\n     * @private\r\n     * @param {RTCSessionDescriptionInit} description\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: '_checkIceBox',\n    value: function _checkIceBox(description) {\n      var ufrag = getUfrag(description);\n\n      if (!ufrag) {\n        return Promise.resolve();\n      }\n\n      var candidates = this._remoteCandidates.setUfrag(ufrag);\n\n      return this._addIceCandidates(candidates);\n    }\n    /**\r\n     * Create an answer and set it on the {@link PeerConnectionV2}.\r\n     * @private\r\n     * @param {RTCSessionDescriptionInit} offer\r\n     * @returns {Promise<boolean>}\r\n     */\n\n  }, {\n    key: '_answer',\n    value: function _answer(offer) {\n      var _this4 = this;\n\n      return Promise.resolve().then(function () {\n        if (!_this4._negotiationRole) {\n          _this4._negotiationRole = 'answerer';\n        }\n\n        return _this4._setRemoteDescription(offer);\n      }).catch(function () {\n        throw new MediaClientRemoteDescFailedError();\n      }).then(function () {\n        return _this4._peerConnection.createAnswer();\n      }).then(function (answer) {\n        if (isFirefox) {\n          // NOTE(mmalavalli): We work around Chromium bug 1106157 by disabling\n          // RTX in Firefox 79+. For more details about the bug, please go here:\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1106157\n          answer = new _this4._RTCSessionDescription({\n            sdp: disableRtx(answer.sdp),\n            type: answer.type\n          });\n        } else {\n          answer = workaroundIssue8329(answer);\n        } // NOTE(mpatwardhan): Upcoming chrome versions are going to remove ssrc attributes\n        // mslabel and label. See this bug https://bugs.chromium.org/p/webrtc/issues/detail?id=7110\n        // and PSA: https://groups.google.com/forum/#!searchin/discuss-webrtc/PSA%7Csort:date/discuss-webrtc/jcZO-Wj0Wus/k2XvPCvoAwAJ\n        // We are not referencing those attributes, but this changes goes ahead and removes them to see if it works.\n        // this also helps reduce bytes on wires\n\n\n        var updatedSdp = removeSSRCAttributes(answer.sdp, ['mslabel', 'label']);\n\n        if (_this4._shouldApplySimulcast) {\n          var sdpWithoutSimulcast = updatedSdp;\n          updatedSdp = _this4._setSimulcast(sdpWithoutSimulcast, _this4._sdpFormat, _this4._trackIdsToAttributes); // NOTE(syerrapragada): VMS does not support H264 simulcast. So,\n          // unset simulcast for sections in local offer where corresponding\n          // sections in answer doesn't have vp8 as preferred codec and reapply offer.\n\n          updatedSdp = _this4._revertSimulcastForNonVP8MediaSections(updatedSdp, sdpWithoutSimulcast, offer.sdp);\n        } // NOTE(mmalavalli): Work around Chromium bug 1074421.\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1074421\n\n\n        updatedSdp = updatedSdp.replace(/42e015/g, '42e01f');\n        return _this4._setLocalDescription({\n          type: answer.type,\n          sdp: updatedSdp\n        });\n      }).then(function () {\n        return _this4._checkIceBox(offer);\n      }).then(function () {\n        return _this4._queuedDescription && _this4._updateDescription(_this4._queuedDescription);\n      }).then(function () {\n        _this4._queuedDescription = null;\n        return _this4._maybeReoffer(_this4._peerConnection.localDescription);\n      }).catch(function (error) {\n        var errorToThrow = error instanceof MediaClientRemoteDescFailedError ? error : new MediaClientLocalDescFailedError();\n\n        _this4._publishMediaWarning({\n          message: 'Failed to _answer',\n          code: errorToThrow.code,\n          error: error\n        });\n\n        throw errorToThrow;\n      });\n    }\n    /**\r\n     * Close the underlying RTCPeerConnection. Returns false if the\r\n     * RTCPeerConnection was already closed.\r\n     * @private\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: '_close',\n    value: function _close() {\n      this._iceConnectionMonitor.stop();\n\n      if (this._peerConnection.signalingState !== 'closed') {\n        this._peerConnection.close();\n\n        this.preempt('closed');\n\n        this._encodingParameters.removeListener('changed', this._onEncodingParametersChanged);\n\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n     * Handle a \"connectionstatechange\" event.\r\n     * @private\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: '_handleConnectionStateChange',\n    value: function _handleConnectionStateChange() {\n      this.emit('connectionStateChanged');\n    }\n    /**\r\n     * Handle a \"datachannel\" event.\r\n     * @private\r\n     * @param {RTCDataChannelEvent} event\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: '_handleDataChannelEvent',\n    value: function _handleDataChannelEvent(event) {\n      var _this5 = this;\n\n      var dataChannel = event.channel;\n      var dataTrackReceiver = new DataTrackReceiver(dataChannel);\n\n      this._dataTrackReceivers.add(dataTrackReceiver);\n\n      dataChannel.addEventListener('close', function () {\n        _this5._dataTrackReceivers.delete(dataTrackReceiver);\n      });\n      this.emit('trackAdded', dataTrackReceiver);\n    }\n    /**\r\n     * Handle a glare scenario on the {@link PeerConnectionV2}.\r\n     * @private\r\n     * @param {RTCSessionDescriptionInit} offer\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: '_handleGlare',\n    value: function _handleGlare(offer) {\n      var _this6 = this;\n\n      this._log.debug('Glare detected; rolling back');\n\n      if (this._isRestartingIce) {\n        this._log.debug('An ICE restart was in progress; we\\'ll need to restart ICE again after rolling back');\n\n        this._isRestartingIce = false;\n        this._shouldRestartIce = true;\n      }\n\n      return Promise.resolve().then(function () {\n        _this6._trackIdsToAttributes = new Map(_this6._appliedTrackIdsToAttributes);\n        return _this6._setLocalDescription({\n          type: 'rollback'\n        });\n      }).then(function () {\n        _this6._needsAnswer = false;\n        return _this6._answer(offer);\n      }).then(function (didReoffer) {\n        return didReoffer ? Promise.resolve() : _this6._offer();\n      });\n    }\n  }, {\n    key: '_publishMediaWarning',\n    value: function _publishMediaWarning(_ref3) {\n      var message = _ref3.message,\n          code = _ref3.code,\n          error = _ref3.error,\n          sdp = _ref3.sdp;\n\n      this._eventObserver.emit('event', {\n        level: 'warning',\n        name: 'error',\n        group: 'media',\n        payload: {\n          message: message,\n          code: code,\n          context: JSON.stringify({\n            error: error.message,\n            sdp: sdp\n          })\n        }\n      });\n    }\n    /**\r\n     * Handle an ICE candidate event.\r\n     * @private\r\n     * @param {Event} event\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: '_handleIceCandidateEvent',\n    value: function _handleIceCandidateEvent(event) {\n      if (event.candidate) {\n        this._log.debug('Clearing ICE gathering timeout');\n\n        this._didGenerateLocalCandidates = true;\n\n        this._iceGatheringTimeout.clear();\n\n        this._localCandidates.push(event.candidate);\n      }\n\n      var peerConnectionState = {\n        ice: {\n          candidates: this._isIceLite ? [] : this._localCandidates.slice(),\n          ufrag: this._localUfrag\n        },\n        id: this.id\n      };\n\n      if (!event.candidate) {\n        peerConnectionState.ice.complete = true;\n      }\n\n      if (!(this._isIceLite && event.candidate)) {\n        peerConnectionState.ice.revision = this._localCandidatesRevision++;\n        this.emit('candidates', peerConnectionState);\n      }\n    }\n    /**\r\n     * Handle an ICE connection state change event.\r\n     * @private\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: '_handleIceConnectionStateChange',\n    value: function _handleIceConnectionStateChange() {\n      var _this7 = this;\n\n      var iceConnectionState = this._peerConnection.iceConnectionState;\n      var isIceConnectedOrComplete = ['connected', 'completed'].includes(iceConnectionState);\n      var log = this._log;\n      log.debug('ICE connection state is \"' + iceConnectionState + '\"');\n\n      if (isIceConnectedOrComplete) {\n        this._iceReconnectTimeout.clear();\n\n        this._iceRestartBackoff.reset();\n      }\n\n      if (this._lastIceConnectionState !== 'failed' && iceConnectionState === 'failed' && !this._shouldRestartIce && !this._isRestartingIce) {\n        // Case 1: Transition to \"failed\".\n        log.warn('ICE failed');\n\n        this._initiateIceRestartBackoff();\n      } else if (['disconnected', 'failed'].includes(this._lastIceConnectionState) && isIceConnectedOrComplete) {\n        // Case 2: Transition from \"disconnected\" or \"failed\".\n        log.debug('ICE reconnected');\n      } // start monitor media when connected, and continue to monitor while state is complete-disconnected-connected.\n\n\n      if (iceConnectionState === 'connected') {\n        this._isIceConnectionInactive = false;\n\n        this._iceConnectionMonitor.start(function () {\n          // note: iceConnection monitor waits for iceConnectionState=disconnected for\n          // detecting inactivity. Its possible that it may know about disconnected before _handleIceConnectionStateChange\n          _this7._iceConnectionMonitor.stop();\n\n          if (!_this7._shouldRestartIce && !_this7._isRestartingIce) {\n            log.warn('ICE Connection Monitor detected inactivity');\n            _this7._isIceConnectionInactive = true;\n\n            _this7._initiateIceRestartBackoff();\n\n            _this7.emit('iceConnectionStateChanged');\n\n            _this7.emit('connectionStateChanged');\n          }\n        });\n      } else if (!['disconnected', 'completed'].includes(iceConnectionState)) {\n        // don't stop monitoring for disconnected or completed.\n        this._iceConnectionMonitor.stop();\n\n        this._isIceConnectionInactive = false;\n      }\n\n      this._lastIceConnectionState = iceConnectionState;\n      this.emit('iceConnectionStateChanged');\n    }\n    /**\r\n     * Handle ICE gathering timeout.\r\n     * @private\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: '_handleIceGatheringTimeout',\n    value: function _handleIceGatheringTimeout() {\n      this._log.warn('ICE failed to gather any local candidates');\n\n      this._iceGatheringFailed = true;\n\n      this._initiateIceRestartBackoff();\n\n      this.emit('iceConnectionStateChanged');\n      this.emit('connectionStateChanged');\n    }\n    /**\r\n     * Handle an ICE gathering state change event.\r\n     * @private\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: '_handleIceGatheringStateChange',\n    value: function _handleIceGatheringStateChange() {\n      var iceGatheringState = this._peerConnection.iceGatheringState;\n      var log = this._log;\n      log.debug('ICE gathering state is \"' + iceGatheringState + '\"'); // NOTE(mmalavalli): Start the ICE gathering timeout only if the RTCPeerConnection\n      // has started gathering candidates for the first time since the initial offer/answer\n      // or an offer/answer with ICE restart.\n\n      var _iceGatheringTimeout = this._iceGatheringTimeout,\n          delay = _iceGatheringTimeout.delay,\n          isSet = _iceGatheringTimeout.isSet;\n\n      if (iceGatheringState === 'gathering' && !this._didGenerateLocalCandidates && !isSet) {\n        log.debug('Starting ICE gathering timeout: ' + delay);\n        this._iceGatheringFailed = false;\n\n        this._iceGatheringTimeout.start();\n      }\n    }\n    /**\r\n     * Handle a signaling state change event.\r\n     * @private\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: '_handleSignalingStateChange',\n    value: function _handleSignalingStateChange() {\n      if (this._peerConnection.signalingState === 'stable') {\n        this._appliedTrackIdsToAttributes = new Map(this._trackIdsToAttributes);\n      }\n    }\n    /**\r\n     * Handle a track event.\r\n     * @private\r\n     * @param {Event} event\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: '_handleTrackEvent',\n    value: function _handleTrackEvent(event) {\n      var _this8 = this;\n\n      var sdp = this._peerConnection.remoteDescription ? this._peerConnection.remoteDescription.sdp : null;\n\n      if (!this._trackMatcher) {\n        this._trackMatcher = event.transceiver && event.transceiver.mid ? new MIDTrackMatcher() // NOTE(mroberts): Until Chrome ships RTCRtpTransceivers with MID\n        // support, we have to use the same hacky solution as Safari. Revisit\n        // this when RTCRtpTransceivers and MIDs land. We should be able to use\n        // the same technique as Firefox.\n        : isSafari || this._isUnifiedPlan ? new OrderedTrackMatcher() : new IdentityTrackMatcher();\n      }\n\n      this._trackMatcher.update(sdp);\n\n      var mediaStreamTrack = event.track;\n      var signaledTrackId = this._trackMatcher.match(event) || mediaStreamTrack.id;\n      var mediaTrackReceiver = new MediaTrackReceiver(signaledTrackId, mediaStreamTrack); // NOTE(mmalavalli): In unified plan mode, \"ended\" is not fired on the remote\n      // MediaStreamTrack when the remote peer removes a track. So, when this\n      // MediaStreamTrack is re-used for a different track due to the remote peer\n      // calling RTCRtpSender.replaceTrack(), we delete the previous MediaTrackReceiver\n      // that owned this MediaStreamTrack before adding the new MediaTrackReceiver.\n\n      this._mediaTrackReceivers.forEach(function (trackReceiver) {\n        if (trackReceiver.track.id === mediaTrackReceiver.track.id) {\n          _this8._mediaTrackReceivers.delete(trackReceiver);\n        }\n      });\n\n      this._mediaTrackReceivers.add(mediaTrackReceiver);\n\n      mediaStreamTrack.addEventListener('ended', function () {\n        return _this8._mediaTrackReceivers.delete(mediaTrackReceiver);\n      });\n      this.emit('trackAdded', mediaTrackReceiver);\n    }\n    /**\r\n     * Initiate ICE Restart.\r\n     * @private\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: '_initiateIceRestart',\n    value: function _initiateIceRestart() {\n      if (this._peerConnection.signalingState === 'closed') {\n        return;\n      }\n\n      var log = this._log;\n      log.warn('Attempting to restart ICE');\n      this._didGenerateLocalCandidates = false;\n      this._isIceRestartBackoffInProgress = false;\n      this._shouldRestartIce = true;\n      var _iceReconnectTimeout = this._iceReconnectTimeout,\n          delay = _iceReconnectTimeout.delay,\n          isSet = _iceReconnectTimeout.isSet;\n\n      if (!isSet) {\n        log.debug('Starting ICE reconnect timeout: ' + delay);\n\n        this._iceReconnectTimeout.start();\n      }\n\n      this.offer();\n    }\n    /**\r\n     * Schedule an ICE Restart.\r\n     * @private\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: '_initiateIceRestartBackoff',\n    value: function _initiateIceRestartBackoff() {\n      if (this._peerConnection.signalingState === 'closed' || this._isIceRestartBackoffInProgress) {\n        return;\n      }\n\n      this._log.warn('An ICE restart has been scheduled');\n\n      this._isIceRestartBackoffInProgress = true;\n\n      this._iceRestartBackoff.backoff();\n    }\n    /**\r\n     * Conditionally re-offer.\r\n     * @private\r\n     * @param {?RTCSessionDescriptionInit} localDescription\r\n     * @returns {Promise<boolean>}\r\n     */\n\n  }, {\n    key: '_maybeReoffer',\n    value: function _maybeReoffer(localDescription) {\n      var shouldReoffer = this._shouldOffer;\n\n      if (localDescription && localDescription.sdp) {\n        // NOTE(mmalavalli): For \"unified-plan\" sdps, if the local RTCSessionDescription\n        // has fewer audio and/or video send* m= lines than the corresponding RTCRtpSenders\n        // with non-null MediaStreamTracks, it means that the newly added RTCRtpSenders\n        // require renegotiation.\n        if (this._isUnifiedPlan) {\n          var senders = this._peerConnection.getSenders().filter(function (sender) {\n            return sender.track;\n          });\n\n          shouldReoffer = ['audio', 'video'].reduce(function (shouldOffer, kind) {\n            var mediaSections = getMediaSections(localDescription.sdp, kind, '(sendrecv|sendonly)');\n            var sendersOfKind = senders.filter(isSenderOfKind.bind(null, kind));\n            return shouldOffer || mediaSections.length < sendersOfKind.length;\n          }, shouldReoffer);\n        } // NOTE(mroberts): We also need to re-offer if we have a DataTrack to share\n        // but no m= application section.\n\n\n        var hasDataTrack = this._dataChannels.size > 0;\n        var hasApplicationMediaSection = getMediaSections(localDescription.sdp, 'application').length > 0;\n        var needsApplicationMediaSection = hasDataTrack && !hasApplicationMediaSection;\n        shouldReoffer = shouldReoffer || needsApplicationMediaSection;\n      }\n\n      var promise = shouldReoffer ? this._offer() : Promise.resolve();\n      return promise.then(function () {\n        return shouldReoffer;\n      });\n    }\n    /**\r\n     * Create an offer and set it on the {@link PeerConnectionV2}.\r\n     * @private\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: '_offer',\n    value: function _offer() {\n      var _this9 = this;\n\n      var offerOptions = Object.assign({}, this._offerOptions);\n      this._needsAnswer = true;\n\n      if (this._shouldRestartIce) {\n        this._shouldRestartIce = false;\n        this._isRestartingIce = true;\n        offerOptions.iceRestart = true;\n      }\n\n      return Promise.all(this._replaceTrackPromises.values()).then(function () {\n        return _this9._peerConnection.createOffer(offerOptions);\n      }).catch(function (error) {\n        var errorToThrow = new MediaClientLocalDescFailedError();\n\n        _this9._publishMediaWarning({\n          message: 'Failed to create offer',\n          code: errorToThrow.code,\n          error: error\n        });\n\n        throw errorToThrow;\n      }).then(function (offer) {\n        if (isFirefox) {\n          // NOTE(mmalavalli): We work around Chromium bug 1106157 by disabling\n          // RTX in Firefox 79+. For more details about the bug, please go here:\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1106157\n          offer = new _this9._RTCSessionDescription({\n            sdp: disableRtx(offer.sdp),\n            type: offer.type\n          });\n        } else {\n          offer = workaroundIssue8329(offer);\n        } // NOTE(mpatwardhan): upcoming chrome versions are going to remove ssrc attributes\n        // mslabel and label. See this bug https://bugs.chromium.org/p/webrtc/issues/detail?id=7110\n        // and PSA: https://groups.google.com/forum/#!searchin/discuss-webrtc/PSA%7Csort:date/discuss-webrtc/jcZO-Wj0Wus/k2XvPCvoAwAJ\n        // Looks like we are not referencing those attributes, but this changes goes ahead and removes them to see if it works.\n        // this also helps reduce bytes on wires\n\n\n        var sdp = removeSSRCAttributes(offer.sdp, ['mslabel', 'label']);\n        sdp = _this9._isUnifiedPlan && _this9._peerConnection.remoteDescription ? unifiedPlanFilterLocalCodecs(sdp, _this9._peerConnection.remoteDescription.sdp) : sdp;\n\n        var updatedSdp = _this9._setCodecPreferences(sdp, _this9._preferredAudioCodecs, _this9._preferredVideoCodecs);\n\n        _this9._shouldOffer = false;\n\n        if (!_this9._negotiationRole) {\n          _this9._negotiationRole = 'offerer';\n        }\n\n        if (_this9._shouldApplySimulcast) {\n          _this9._localDescriptionWithoutSimulcast = {\n            type: 'offer',\n            sdp: updatedSdp\n          };\n          updatedSdp = _this9._setSimulcast(updatedSdp, _this9._sdpFormat, _this9._trackIdsToAttributes);\n        }\n\n        return _this9._setLocalDescription({\n          type: 'offer',\n          sdp: updatedSdp\n        });\n      });\n    }\n    /**\r\n     * Get the MediaTrackSender ID of the given MediaStreamTrack ID.\r\n     * Since a MediaTrackSender's underlying MediaStreamTrack can be\r\n     * replaced, the corresponding IDs can mismatch.\r\n     * @private\r\n     * @param {Track.ID} id\r\n     * @returns {Track.ID}\r\n     */\n\n  }, {\n    key: '_getMediaTrackSenderId',\n    value: function _getMediaTrackSenderId(trackId) {\n      var mediaTrackSender = Array.from(this._rtpSenders.keys()).find(function (_ref4) {\n        var id = _ref4.track.id;\n        return id === trackId;\n      });\n      return mediaTrackSender ? mediaTrackSender.id : trackId;\n    }\n    /**\r\n     * Add or rewrite local MediaStreamTrack IDs in the given Unified Plan RTCSessionDescription.\r\n     * @private\r\n     * @param {RTCSessionDescription} description\r\n     * @return {RTCSessionDescription}\r\n     */\n\n  }, {\n    key: '_addOrRewriteLocalTrackIds',\n    value: function _addOrRewriteLocalTrackIds(description) {\n      var _this10 = this;\n\n      var transceivers = this._peerConnection.getTransceivers();\n\n      var activeTransceivers = transceivers.filter(function (_ref5) {\n        var sender = _ref5.sender,\n            stopped = _ref5.stopped;\n        return !stopped && sender && sender.track;\n      }); // NOTE(mmalavalli): There is no guarantee that MediaStreamTrack IDs will be present in\n      // SDPs, and even if they are, there is no guarantee that they will be the same as the\n      // actual MediaStreamTrack IDs. So, we add or re-write the actual MediaStreamTrack IDs\n      // to the assigned m= sections here.\n\n      var assignedTransceivers = activeTransceivers.filter(function (_ref6) {\n        var mid = _ref6.mid;\n        return mid;\n      });\n      var midsToTrackIds = new Map(assignedTransceivers.map(function (_ref7) {\n        var mid = _ref7.mid,\n            sender = _ref7.sender;\n        return [mid, _this10._getMediaTrackSenderId(sender.track.id)];\n      }));\n      var sdp1 = unifiedPlanAddOrRewriteTrackIds(description.sdp, midsToTrackIds); // NOTE(mmalavalli): Chrome and Safari do not apply the offer until they get an answer.\n      // So, we add or re-write the actual MediaStreamTrack IDs to the unassigned m= sections here.\n\n      var unassignedTransceivers = activeTransceivers.filter(function (_ref8) {\n        var mid = _ref8.mid;\n        return !mid;\n      });\n      var newTrackIdsByKind = new Map(['audio', 'video'].map(function (kind) {\n        return [kind, unassignedTransceivers.filter(function (_ref9) {\n          var sender = _ref9.sender;\n          return sender.track.kind === kind;\n        }).map(function (_ref10) {\n          var sender = _ref10.sender;\n          return _this10._getMediaTrackSenderId(sender.track.id);\n        })];\n      }));\n      var sdp2 = unifiedPlanAddOrRewriteNewTrackIds(sdp1, midsToTrackIds, newTrackIdsByKind);\n      return new this._RTCSessionDescription({\n        sdp: sdp2,\n        type: description.type\n      });\n    }\n    /**\r\n     * Rollback and apply the given offer.\r\n     * @private\r\n     * @param {RTCSessionDescriptionInit} offer\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: '_rollbackAndApplyOffer',\n    value: function _rollbackAndApplyOffer(offer) {\n      var _this11 = this;\n\n      return this._setLocalDescription({\n        type: 'rollback'\n      }).then(function () {\n        return _this11._setLocalDescription(offer);\n      });\n    }\n    /**\r\n     * Set a local description on the {@link PeerConnectionV2}.\r\n     * @private\r\n     * @param {RTCSessionDescription|RTCSessionDescriptionInit} description\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: '_setLocalDescription',\n    value: function _setLocalDescription(description) {\n      var _this12 = this;\n\n      if (description.type !== 'rollback' && this._shouldApplyDtx) {\n        description = new this._RTCSessionDescription({\n          sdp: enableDtxForOpus(description.sdp),\n          type: description.type\n        });\n      }\n\n      return this._peerConnection.setLocalDescription(description).catch(function (error) {\n        _this12._log.warn('Calling setLocalDescription with an RTCSessionDescription of type \"' + description.type + '\" failed with the error \"' + error.message + '\".');\n\n        var errorToThrow = new MediaClientLocalDescFailedError();\n        var publishWarning = {\n          message: 'Calling setLocalDescription with an RTCSessionDescription of type \"' + description.type + '\" failed',\n          code: errorToThrow.code,\n          error: error\n        };\n\n        if (description.sdp) {\n          _this12._log.warn('The SDP was ' + description.sdp);\n\n          publishWarning.sdp = description.sdp;\n        }\n\n        _this12._publishMediaWarning(publishWarning);\n\n        throw errorToThrow;\n      }).then(function () {\n        if (description.type !== 'rollback') {\n          _this12._localDescription = _this12._isUnifiedPlan ? _this12._addOrRewriteLocalTrackIds(description) : description; // NOTE(mmalavalli): In order for this feature to be backward compatible with older\n          // SDK versions which to not support opus DTX, we append \"usedtx=1\" to the local SDP\n          // only while applying it. We will not send it over the wire to prevent inadvertent\n          // enabling of opus DTX in older SDKs. Newer SDKs will append \"usedtx=1\" by themselves\n          // if the developer has requested opus DTX to be enabled. (JSDK-3063)\n\n          if (_this12._shouldApplyDtx) {\n            _this12._localDescription = new _this12._RTCSessionDescription({\n              sdp: enableDtxForOpus(_this12._localDescription.sdp, []),\n              type: _this12._localDescription.type\n            });\n          }\n\n          _this12._localCandidates = [];\n\n          if (description.type === 'offer') {\n            _this12._descriptionRevision++;\n          } else if (description.type === 'answer') {\n            _this12._lastStableDescriptionRevision = _this12._descriptionRevision;\n            negotiationCompleted(_this12);\n          }\n\n          _this12._localUfrag = getUfrag(description);\n\n          _this12.emit('description', _this12.getState());\n        }\n      });\n    }\n    /**\r\n     * Set a remote RTCSessionDescription on the {@link PeerConnectionV2}.\r\n     * @private\r\n     * @param {RTCSessionDescriptionInit} description\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: '_setRemoteDescription',\n    value: function _setRemoteDescription(description) {\n      var _this13 = this;\n\n      if (description.sdp) {\n        if (!this._isRTCRtpSenderParamsSupported) {\n          description.sdp = this._setBitrateParameters(description.sdp, isFirefox ? 'TIAS' : 'AS', this._encodingParameters.maxAudioBitrate, this._encodingParameters.maxVideoBitrate);\n        }\n\n        description.sdp = this._setCodecPreferences(description.sdp, this._preferredAudioCodecs, this._preferredVideoCodecs);\n\n        if (this._shouldApplyDtx) {\n          description.sdp = enableDtxForOpus(description.sdp);\n        } else {\n          // NOTE(mmalavalli): Remove \"usedtx=1\" from opus's fmtp line if present\n          // since DTX is disabled.\n          description.sdp = enableDtxForOpus(description.sdp, []);\n        }\n\n        if (isFirefox) {\n          // NOTE(mroberts): Do this to reduce our MediaStream count in Firefox. By\n          // mapping MediaStream IDs in the SDP to \"-\", we ensure the \"track\" event\n          // doesn't include any new MediaStreams in Firefox. Its `streams` member\n          // will always be the empty Array.\n          description.sdp = filterOutMediaStreamIds(description.sdp);\n        }\n\n        if (!this._peerConnection.remoteDescription) {\n          this._isIceLite = /a=ice-lite/.test(description.sdp);\n        }\n      }\n\n      description = new this._RTCSessionDescription(description); // eslint-disable-next-line consistent-return\n\n      return Promise.resolve().then(function () {\n        // NOTE(syerrapragada): VMS does not support H264 simulcast. So,\n        // unset simulcast for sections in local offer where corresponding\n        // sections in answer doesn't have vp8 as preferred codec and reapply offer.\n        if (description.type === 'answer' && _this13._shouldApplySimulcast) {\n          var sdpWithoutSimulcastForNonVP8MediaSections = _this13._revertSimulcastForNonVP8MediaSections(_this13._localDescription.sdp, _this13._localDescriptionWithoutSimulcast.sdp, description.sdp);\n\n          if (sdpWithoutSimulcastForNonVP8MediaSections !== _this13._localDescription.sdp) {\n            return _this13._rollbackAndApplyOffer({\n              type: _this13._localDescription.type,\n              sdp: sdpWithoutSimulcastForNonVP8MediaSections\n            });\n          }\n        }\n      }).then(function () {\n        return _this13._peerConnection.setRemoteDescription(description);\n      }).then(function () {\n        if (description.type === 'answer') {\n          if (_this13._isRestartingIce) {\n            _this13._log.debug('An ICE restart was in-progress and is now completed');\n\n            _this13._isRestartingIce = false;\n          }\n\n          negotiationCompleted(_this13);\n        }\n      }, function (error) {\n        _this13._log.warn('Calling setRemoteDescription with an RTCSessionDescription of type \"' + description.type + '\" failed with the error \"' + error.message + '\".');\n\n        if (description.sdp) {\n          _this13._log.warn('The SDP was ' + description.sdp);\n        }\n\n        throw error;\n      });\n    }\n    /**\r\n     * Update the {@link PeerConnectionV2}'s description.\r\n     * @private\r\n     * @param {RTCSessionDescriptionInit} description\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: '_updateDescription',\n    value: function _updateDescription(description) {\n      var _this14 = this;\n\n      switch (description.type) {\n        case 'answer':\n        case 'pranswer':\n          if (description.revision !== this._descriptionRevision || this._peerConnection.signalingState !== 'have-local-offer') {\n            return Promise.resolve();\n          }\n\n          this._descriptionRevision = description.revision;\n          break;\n\n        case 'close':\n          return this._close();\n\n        case 'create-offer':\n          if (description.revision <= this._lastStableDescriptionRevision) {\n            return Promise.resolve();\n          } else if (this._needsAnswer) {\n            this._queuedDescription = description;\n            return Promise.resolve();\n          }\n\n          this._descriptionRevision = description.revision;\n          return this._offer();\n\n        case 'offer':\n          if (description.revision <= this._lastStableDescriptionRevision || this._peerConnection.signalingState === 'closed') {\n            return Promise.resolve();\n          }\n\n          if (this._peerConnection.signalingState === 'have-local-offer') {\n            // NOTE(mpatwardhan): For a peer connection\n            // 1) createOffer always generate SDP with `setup:actpass`\n            // 2) when remote description is set `setup:active`  - the answer generated selects the dtls role of setup:passive\n            // 3) when remote description is set `setup:passive` - the answer generated selects the dtls role of setup:active\n            // 4) when remote description is set `setup:actpass` - the answer generated uses the previously negotiated role (if not negotiated previously setup:active is used)\n            // This test shows the  behavior: https://github.com/twilio/twilio-webrtc.js/blob/master/test/integration/spec/rtcpeerconnection.js#L936\n            // with glare handling (if dtls role was not negotiated before ) the generated answer will set setup:active.\n            // we do not want that. lets wait for \"initial negotiation\" before attempting glare handling.\n            if (this._needsAnswer && this._lastStableDescriptionRevision === 0) {\n              this._queuedDescription = description;\n              return Promise.resolve();\n            }\n\n            this._descriptionRevision = description.revision;\n            return this._handleGlare(description);\n          }\n\n          this._descriptionRevision = description.revision;\n          return this._answer(description).then(function () {});\n\n        default: // Do nothing.\n\n      } // Handle answer or pranswer.\n\n\n      var revision = description.revision;\n      return Promise.resolve().then(function () {\n        return _this14._setRemoteDescription(description);\n      }).catch(function (error) {\n        var errorToThrow = new MediaClientRemoteDescFailedError();\n\n        _this14._publishMediaWarning({\n          message: 'Calling setRemoteDescription with an RTCSessionDescription of type \"' + description.type + '\" failed',\n          code: errorToThrow.code,\n          error: error,\n          sdp: description.sdp\n        });\n\n        throw errorToThrow;\n      }).then(function () {\n        _this14._lastStableDescriptionRevision = revision;\n        _this14._needsAnswer = false;\n        return _this14._checkIceBox(description);\n      }).then(function () {\n        return _this14._queuedDescription && _this14._updateDescription(_this14._queuedDescription);\n      }).then(function () {\n        _this14._queuedDescription = null;\n        return _this14._maybeReoffer(_this14._peerConnection.localDescription).then(function () {});\n      });\n    }\n    /**\r\n     * Update the {@link PeerConnectionV2}'s ICE candidates.\r\n     * @private\r\n     * @param {object} iceState\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: '_updateIce',\n    value: function _updateIce(iceState) {\n      var candidates = this._remoteCandidates.update(iceState);\n\n      return this._addIceCandidates(candidates);\n    }\n    /**\r\n     * Add a {@link DataTrackSender} to the {@link PeerConnectionV2}.\r\n     * @param {DataTrackSender} dataTrackSender\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: 'addDataTrackSender',\n    value: function addDataTrackSender(dataTrackSender) {\n      if (this._dataChannels.has(dataTrackSender)) {\n        return;\n      }\n\n      try {\n        var dataChannelDict = {\n          ordered: dataTrackSender.ordered\n        };\n\n        if (dataTrackSender.maxPacketLifeTime !== null) {\n          dataChannelDict.maxPacketLifeTime = dataTrackSender.maxPacketLifeTime;\n        }\n\n        if (dataTrackSender.maxRetransmits !== null) {\n          dataChannelDict.maxRetransmits = dataTrackSender.maxRetransmits;\n        }\n\n        var dataChannel = this._peerConnection.createDataChannel(dataTrackSender.id, dataChannelDict);\n\n        dataTrackSender.addDataChannel(dataChannel);\n\n        this._dataChannels.set(dataTrackSender, dataChannel);\n      } catch (error) {\n        this._log.warn('Error creating an RTCDataChannel for DataTrack \"' + dataTrackSender.id + '\": ' + error.message);\n      }\n    }\n    /**\r\n     * Add the {@link MediaTrackSender} to the {@link PeerConnectionV2}.\r\n     * @param {MediaTrackSender} mediaTrackSender\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: 'addMediaTrackSender',\n    value: function addMediaTrackSender(mediaTrackSender) {\n      if (this._peerConnection.signalingState === 'closed' || this._rtpSenders.has(mediaTrackSender)) {\n        return;\n      }\n\n      var sender = void 0;\n\n      if (this._localMediaStream) {\n        this._localMediaStream.addTrack(mediaTrackSender.track);\n\n        sender = this._peerConnection.addTrack(mediaTrackSender.track, this._localMediaStream);\n      } else {\n        var transceiver = this._addOrUpdateTransceiver(mediaTrackSender.track);\n\n        sender = transceiver.sender;\n      }\n\n      mediaTrackSender.addSender(sender);\n\n      this._rtpSenders.set(mediaTrackSender, sender);\n    }\n    /**\r\n     * Close the {@link PeerConnectionV2}.\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      if (this._close()) {\n        this._descriptionRevision++;\n        this._localDescription = {\n          type: 'close'\n        };\n        this.emit('description', this.getState());\n      }\n    }\n    /**\r\n     * Get the {@link DataTrackReceiver}s and the {@link MediaTrackReceivers} on the\r\n     * {@link PeerConnectionV2}.\r\n     * @returns {Array<DataTrackReceiver|MediaTrackReceiver>} trackReceivers\r\n     */\n\n  }, {\n    key: 'getTrackReceivers',\n    value: function getTrackReceivers() {\n      return Array.from(this._dataTrackReceivers).concat(Array.from(this._mediaTrackReceivers));\n    }\n    /**\r\n     * Get the {@link PeerConnectionV2}'s state (specifically, its description).\r\n     * @returns {?object}\r\n     */\n\n  }, {\n    key: 'getState',\n    value: function getState() {\n      if (!this._localDescription) {\n        return null;\n      } // NOTE(mpatwardhan): Return most recent localDescription. If the most recent local description is an\n      // answer, and this method is called for sending a \"sync\" message while the next remote offer is being processed,\n      // we need to send the most recent stable description revision instead of the current description revision,\n      // which is supposed to be for the next local answer.\n\n\n      var localDescriptionRevision = this._localDescription.type === 'answer' ? this._lastStableDescriptionRevision : this._descriptionRevision;\n      var localDescription = {\n        type: this._localDescription.type,\n        revision: localDescriptionRevision\n      };\n\n      if (this._localDescription.sdp) {\n        localDescription.sdp = this._localDescription.sdp;\n      }\n\n      return {\n        description: localDescription,\n        id: this.id\n      };\n    }\n    /**\r\n     * Create an offer and set it on the {@link PeerConnectionV2}.\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: 'offer',\n    value: function offer() {\n      var _this15 = this;\n\n      if (this._needsAnswer || this._isRestartingIce) {\n        this._shouldOffer = true;\n        return Promise.resolve();\n      }\n\n      return this.bracket('offering', function (key) {\n        _this15.transition('updating', key);\n\n        var promise = _this15._needsAnswer || _this15._isRestartingIce ? Promise.resolve() : _this15._offer();\n        return promise.then(function () {\n          _this15.tryTransition('open', key);\n        }, function (error) {\n          _this15.tryTransition('open', key);\n\n          throw error;\n        });\n      });\n    }\n    /**\r\n     * Remove a {@link DataTrackSender} from the {@link PeerConnectionV2}.\r\n     * @param {DataTrackSender} dataTrackSender\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: 'removeDataTrackSender',\n    value: function removeDataTrackSender(dataTrackSender) {\n      var dataChannel = this._dataChannels.get(dataTrackSender);\n\n      if (dataChannel) {\n        dataTrackSender.removeDataChannel(dataChannel);\n\n        this._dataChannels.delete(dataTrackSender);\n\n        dataChannel.close();\n      }\n    }\n    /**\r\n     * Remove the {@link MediaTrackSender} from the {@link PeerConnectionV2}.\r\n     * @param {MediaTrackSender} mediaTrackSender\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: 'removeMediaTrackSender',\n    value: function removeMediaTrackSender(mediaTrackSender) {\n      var sender = this._rtpSenders.get(mediaTrackSender);\n\n      if (!sender) {\n        return;\n      }\n\n      if (this._peerConnection.signalingState !== 'closed') {\n        this._peerConnection.removeTrack(sender);\n      }\n\n      if (this._localMediaStream) {\n        this._localMediaStream.removeTrack(mediaTrackSender.track);\n      }\n\n      mediaTrackSender.removeSender(sender);\n\n      this._rtpSenders.delete(mediaTrackSender);\n    }\n    /**\r\n     * Set the RTCConfiguration on the underlying RTCPeerConnection.\r\n     * @param {RTCConfiguration} configuration\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: 'setConfiguration',\n    value: function setConfiguration(configuration) {\n      if (typeof this._peerConnection.setConfiguration === 'function') {\n        this._peerConnection.setConfiguration(getConfiguration(configuration));\n      }\n    }\n    /**\r\n     * Set the ICE reconnect timeout period.\r\n     * @param {number} period - Period in milliseconds.\r\n     * @returns {this}\r\n     */\n\n  }, {\n    key: 'setIceReconnectTimeout',\n    value: function setIceReconnectTimeout(period) {\n      this._iceReconnectTimeout.setDelay(period);\n\n      this._log.debug('Updated ICE reconnection timeout period:', this._iceReconnectTimeout.delay);\n\n      return this;\n    }\n    /**\r\n     * Update the {@link PeerConnectionV2}.\r\n     * @param {object} peerConnectionState\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: 'update',\n    value: function update(peerConnectionState) {\n      var _this16 = this;\n\n      return this.bracket('updating', function (key) {\n        if (_this16.state === 'closed') {\n          return Promise.resolve();\n        }\n\n        _this16.transition('updating', key);\n\n        var updates = [];\n\n        if (peerConnectionState.ice) {\n          updates.push(_this16._updateIce(peerConnectionState.ice));\n        }\n\n        if (peerConnectionState.description) {\n          updates.push(_this16._updateDescription(peerConnectionState.description));\n        }\n\n        return Promise.all(updates).then(function () {\n          _this16.tryTransition('open', key);\n        }, function (error) {\n          _this16.tryTransition('open', key);\n\n          throw error;\n        });\n      });\n    }\n    /**\r\n     * Get the {@link PeerConnectionV2}'s media statistics.\r\n     * @returns {Promise<StandardizedStatsResponse>}\r\n     */\n\n  }, {\n    key: 'getStats',\n    value: function getStats() {\n      var _this17 = this;\n\n      return getStatistics(this._peerConnection).then(function (response) {\n        return rewriteTrackIds(_this17, response);\n      });\n    }\n  }, {\n    key: 'connectionState',\n    get: function get() {\n      return this.iceConnectionState === 'failed' ? 'failed' : this._peerConnection.connectionState || this.iceConnectionState;\n    }\n    /**\r\n     * The {@link PeerConnectionV2}'s underlying RTCPeerConnection's\r\n     * RTCIceConnectionState.\r\n     * @property {RTCIceConnectionState}\r\n     */\n\n  }, {\n    key: 'iceConnectionState',\n    get: function get() {\n      return this._isIceConnectionInactive && this._peerConnection.iceConnectionState === 'disconnected' || this._iceGatheringFailed ? 'failed' : this._peerConnection.iceConnectionState;\n    }\n    /**\r\n     * Whether the {@link PeerConnectionV2} has negotiated or is in the process\r\n     * of negotiating the application m= section.\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: 'isApplicationSectionNegotiated',\n    get: function get() {\n      if (this._peerConnection.signalingState !== 'closed') {\n        // accessing .localDescription in 'closed' state causes it throw exceptions.\n        return this._peerConnection.localDescription ? getMediaSections(this._peerConnection.localDescription.sdp, 'application').length > 0 : false;\n      }\n\n      return true;\n    }\n  }]);\n\n  return PeerConnectionV2;\n}(StateMachine);\n\nfunction rewriteLocalTrackId(pcv2, stats) {\n  var trackId = pcv2._getMediaTrackSenderId(stats.trackId);\n\n  return Object.assign(stats, {\n    trackId: trackId\n  });\n}\n\nfunction rewriteTrackId(pcv2, stats) {\n  var receiver = [].concat(_toConsumableArray(pcv2._mediaTrackReceivers)).find(function (receiver) {\n    return receiver.track.id === stats.trackId;\n  });\n  var trackId = receiver ? receiver.id : null;\n  return Object.assign(stats, {\n    trackId: trackId\n  });\n}\n\nfunction rewriteTrackIds(pcv2, response) {\n  return Object.assign(response, {\n    remoteAudioTrackStats: response.remoteAudioTrackStats.map(function (stats) {\n      return rewriteTrackId(pcv2, stats);\n    }),\n    remoteVideoTrackStats: response.remoteVideoTrackStats.map(function (stats) {\n      return rewriteTrackId(pcv2, stats);\n    }),\n    localAudioTrackStats: response.localAudioTrackStats.map(function (stats) {\n      return rewriteLocalTrackId(pcv2, stats);\n    }),\n    localVideoTrackStats: response.localVideoTrackStats.map(function (stats) {\n      return rewriteLocalTrackId(pcv2, stats);\n    })\n  });\n}\n/**\r\n * @event PeerConnectionV2#candidates\r\n * @param {object} candidates\r\n */\n\n/**\r\n * @event PeerConnectionV2#connectionStateChanged\r\n */\n\n/**\r\n * @event PeerConnectionV2#description\r\n * @param {object} description\r\n */\n\n/**\r\n * @event PeerConnectionV2#iceConnectionStateChanged\r\n */\n\n/**\r\n * @event PeerConnectionV2#trackAdded\r\n * @param {DataTrackReceiver|MediaTrackReceiver} trackReceiver\r\n */\n\n\nfunction getUfrag(description) {\n  if (description.sdp) {\n    var match = description.sdp.match(/^a=ice-ufrag:([a-zA-Z0-9+/]+)/m);\n\n    if (match) {\n      return match[1];\n    }\n  }\n\n  return null;\n}\n\nfunction getConfiguration(configuration) {\n  return Object.assign({\n    bundlePolicy: 'max-bundle',\n    rtcpMuxPolicy: 'require'\n  }, configuration);\n}\n/**\r\n * Whether the MediaStreamTrack of the given RTCRTPSender is a non-ended\r\n * MediaStreamTrack of a given kind.\r\n * @private\r\n * @param {string} kind\r\n * @param {RTCRtpSender} sender\r\n * @return {boolean}\r\n */\n\n\nfunction isSenderOfKind(kind, sender) {\n  var track = sender.track;\n  return track && track.kind === kind && track.readyState !== 'ended';\n}\n/**\r\n * Preferred codecs.\r\n * @typedef {object} PreferredCodecs\r\n * @property {Array<AudioCodec>} audio\r\n * @property {Array<VideoCodec>} video\r\n */\n\n\nfunction filterOutMediaStreamIds(sdp) {\n  return sdp.replace(/a=msid:[^ ]+ /g, 'a=msid:- ');\n}\n/**\r\n * Whether an RTCRtpTransceiver can be recycled.\r\n * @param {RTCRtpTransceiver} transceiver\r\n * @returns {boolean}\r\n */\n\n\nfunction shouldRecycleTransceiver(transceiver, pcv2) {\n  return !transceiver.stopped && !pcv2._replaceTrackPromises.has(transceiver) && ['inactive', 'recvonly'].includes(transceiver.direction);\n}\n/**\r\n * Take a recycled RTCRtpTransceiver if available.\r\n * @param {PeerConnectionV2} pcv2\r\n * @param {Track.Kind} kind\r\n * @returns {?RTCRtpTransceiver}\r\n */\n\n\nfunction takeRecycledTransceiver(pcv2, kind) {\n  var preferredCodecs = {\n    audio: pcv2._preferredAudioCodecs.map(function (_ref11) {\n      var codec = _ref11.codec;\n      return codec.toLowerCase();\n    }),\n    video: pcv2._preferredVideoCodecs.map(function (_ref12) {\n      var codec = _ref12.codec;\n      return codec.toLowerCase();\n    })\n  }[kind];\n  var recycledTransceivers = pcv2._recycledTransceivers[kind];\n  var localCodec = preferredCodecs.find(function (codec) {\n    return pcv2._localCodecs.has(codec);\n  });\n\n  if (!localCodec) {\n    return recycledTransceivers.shift();\n  }\n\n  var transceiver = recycledTransceivers.find(function (transceiver) {\n    var remoteCodecMap = pcv2._remoteCodecMaps.get(transceiver.mid);\n\n    return remoteCodecMap && remoteCodecMap.has(localCodec);\n  });\n\n  if (transceiver) {\n    recycledTransceivers.splice(recycledTransceivers.indexOf(transceiver), 1);\n  }\n\n  return transceiver;\n}\n/**\r\n * Update the set of locally supported {@link Codec}s.\r\n * @param pcv2\r\n * @returns {void}\r\n */\n\n\nfunction updateLocalCodecs(pcv2) {\n  var description = pcv2._peerConnection.localDescription;\n\n  if (!description) {\n    return;\n  }\n\n  getMediaSections(description.sdp).forEach(function (section) {\n    var codecMap = createCodecMapForMediaSection(section);\n    codecMap.forEach(function (pts, codec) {\n      return pcv2._localCodecs.add(codec);\n    });\n  });\n}\n/**\r\n * Update the {@link Codec} maps for all m= sections in the remote {@link RTCSessionDescription}s.\r\n * @param {PeerConnectionV2} pcv2\r\n * @returns {void}\r\n */\n\n\nfunction updateRemoteCodecMaps(pcv2) {\n  var description = pcv2._peerConnection.remoteDescription;\n\n  if (!description) {\n    return;\n  }\n\n  getMediaSections(description.sdp).forEach(function (section) {\n    var mid = section.match(/^a=mid:(.+)$/m)[1];\n    var codecMap = createCodecMapForMediaSection(section);\n\n    pcv2._remoteCodecMaps.set(mid, codecMap);\n  });\n}\n/**\r\n * Update the list of recycled RTCRtpTransceivers.\r\n * @param {PeerConnectionV2} pcv2\r\n */\n\n\nfunction updateRecycledTransceivers(pcv2) {\n  pcv2._recycledTransceivers.audio = [];\n  pcv2._recycledTransceivers.video = [];\n\n  pcv2._peerConnection.getTransceivers().forEach(function (transceiver) {\n    if (shouldRecycleTransceiver(transceiver, pcv2)) {\n      var track = transceiver.receiver.track;\n\n      pcv2._recycledTransceivers[track.kind].push(transceiver);\n    }\n  });\n}\n/**\r\n * Perform certain updates after an SDP negotiation is completed.\r\n * @param {PeerConnectionV2} pcv2\r\n * @returns {void}\r\n */\n\n\nfunction negotiationCompleted(pcv2) {\n  if (pcv2._isUnifiedPlan) {\n    updateRecycledTransceivers(pcv2);\n    updateLocalCodecs(pcv2);\n    updateRemoteCodecMaps(pcv2);\n  }\n\n  if (pcv2._isRTCRtpSenderParamsSupported) {\n    updateEncodingParameters(pcv2);\n  }\n}\n/**\r\n * Update the RTCRtpEncodingParameters of all active RTCRtpSenders.\r\n * @param {PeerConnectionV2} pcv2\r\n * @returns {void}\r\n */\n\n\nfunction updateEncodingParameters(pcv2) {\n  var _pcv2$_encodingParame = pcv2._encodingParameters,\n      maxAudioBitrate = _pcv2$_encodingParame.maxAudioBitrate,\n      maxVideoBitrate = _pcv2$_encodingParame.maxVideoBitrate;\n  var maxBitrates = new Map([['audio', maxAudioBitrate], ['video', maxVideoBitrate]]);\n\n  pcv2._peerConnection.getSenders().filter(function (sender) {\n    return sender.track;\n  }).forEach(function (sender) {\n    var maxBitrate = maxBitrates.get(sender.track.kind);\n    var params = sender.getParameters();\n\n    if (maxBitrate === null || maxBitrate === 0) {\n      removeMaxBitrate(params);\n    } else if (pcv2._isChromeScreenShareTrack(sender.track)) {\n      // NOTE(mpatwardhan): Sometimes (JSDK-2557) chrome does not send any bytes on screen track if MaxBitRate is set on it via setParameters,\n      // To workaround this issue we will not apply maxBitrate if the track appears to be a screen share track created by chrome\n      pcv2._log.warn('Not setting maxBitrate for ' + sender.track.kind + ' Track ' + sender.track.id + ' because it appears to be screen share track: ' + sender.track.label);\n    } else {\n      setMaxBitrate(params, maxBitrate);\n    }\n\n    if (!isFirefox && pcv2._enableDscp && params.encodings.length > 0) {\n      // NOTE(mmalavalli): \"networkPriority\" is a per-sender property and not\n      // a per-encoding-layer property. So, we set the value only on the first\n      // encoding layer. Any attempt to set the value on subsequent encoding\n      // layers (in the case of simulcast) will result in the Promise returned\n      // by RTCRtpSender.setParameters() being rejected.\n      params.encodings[0].networkPriority = 'high';\n    }\n\n    sender.setParameters(params).catch(function (error) {\n      pcv2._log.warn('Error while setting encodings parameters for ' + sender.track.kind + ' Track ' + sender.track.id + ': ' + (error.message || error.name));\n    });\n  });\n}\n/**\r\n * Remove maxBitrate from the RTCRtpSendParameters' encodings.\r\n * @param {RTCRtpSendParameters} params\r\n * @returns {void}\r\n */\n\n\nfunction removeMaxBitrate(params) {\n  if (Array.isArray(params.encodings)) {\n    params.encodings.forEach(function (encoding) {\n      return delete encoding.maxBitrate;\n    });\n  }\n}\n/**\r\n * Set the given maxBitrate in the RTCRtpSendParameters' encodings.\r\n * @param {RTCRtpSendParameters} params\r\n * @param {number} maxBitrate\r\n * @returns {void}\r\n */\n\n\nfunction setMaxBitrate(params, maxBitrate) {\n  if (isFirefox) {\n    params.encodings = [{\n      maxBitrate: maxBitrate\n    }];\n  } else {\n    params.encodings.forEach(function (encoding) {\n      encoding.maxBitrate = maxBitrate;\n    });\n  }\n}\n\nmodule.exports = PeerConnectionV2;","map":{"version":3,"sources":["C:/Users/IJuanchoG/Desktop/Twilio/node_modules/twilio-video/es5/signaling/v2/peerconnection.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_toConsumableArray","arr","Array","isArray","arr2","from","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","DefaultBackoff","require","_require","DefaultMediaStream","MediaStream","DefaultRTCIceCandidate","RTCIceCandidate","DefaultRTCPeerConnection","RTCPeerConnection","DefaultRTCSessionDescription","RTCSessionDescription","getStatistics","getStats","_require2","guessBrowser","_require3","getSdpFormat","_require4","DEFAULT_ICE_GATHERING_TIMEOUT_MS","DEFAULT_LOG_LEVEL","DEFAULT_SESSION_TIMEOUT_SEC","iceRestartBackoffConfig","_require5","createCodecMapForMediaSection","disableRtx","enableDtxForOpus","getMediaSections","removeSSRCAttributes","revertSimulcastForNonVP8MediaSections","setBitrateParameters","setCodecPreferences","setSimulcast","unifiedPlanAddOrRewriteNewTrackIds","unifiedPlanAddOrRewriteTrackIds","unifiedPlanFilterLocalCodecs","DefaultTimeout","_require6","MediaClientLocalDescFailedError","MediaClientRemoteDescFailedError","_require7","buildLogLevels","getPlatform","isChromeScreenShareTrack","oncePerTick","IceBox","DefaultIceConnectionMonitor","DataTrackReceiver","MediaTrackReceiver","StateMachine","Log","IdentityTrackMatcher","OrderedTrackMatcher","MIDTrackMatcher","workaroundIssue8329","guess","platform","isAndroid","test","isChrome","isFirefox","isSafari","isRTCRtpSenderParamsSupported","RTCRtpSender","getParameters","setParameters","nInstances","states","open","updating","closed","PeerConnectionV2","_StateMachine","id","encodingParameters","preferredCodecs","options","_this","getPrototypeOf","assign","enableDscp","dummyAudioMediaStreamTrack","iceServers","logLevel","offerOptions","sessionTimeout","Backoff","IceConnectionMonitor","Timeout","configuration","getConfiguration","sdpFormat","sdpSemantics","isUnifiedPlan","localMediaStream","logLevels","chromeSpecificConstraints","optional","push","googDscp","log","createLog","loggerName","peerConnection","addTrack","_appliedTrackIdsToAttributes","Map","_dataChannels","_dataTrackReceivers","Set","_descriptionRevision","_didGenerateLocalCandidates","_enableDscp","_encodingParameters","_isChromeScreenShareTrack","_iceGatheringFailed","_iceGatheringTimeout","_handleIceGatheringTimeout","_iceRestartBackoff","exponential","_instanceId","_isIceConnectionInactive","_isIceLite","_isIceRestartBackoffInProgress","_isRestartingIce","_isUnifiedPlan","_isRTCRtpSenderParamsSupported","_lastIceConnectionState","_lastStableDescriptionRevision","_localCandidates","_localCodecs","_localCandidatesRevision","_localDescriptionWithoutSimulcast","_localDescription","_localMediaStream","_localUfrag","_log","_eventObserver","eventObserver","_remoteCodecMaps","_rtpSenders","_iceConnectionMonitor","_mediaTrackReceivers","_needsAnswer","_negotiationRole","_offerOptions","_onEncodingParametersChanged","updateEncodingParameters","offer","_peerConnection","_preferredAudioCodecs","audio","_preferredVideoCodecs","video","_shouldApplyDtx","every","_ref","codec","some","_ref2","dtx","_shouldApplySimulcast","codecSettings","toLowerCase","simulcast","_queuedDescription","_iceReconnectTimeout","debug","close","_recycledTransceivers","_replaceTrackPromises","_remoteCandidates","_sdpFormat","_setBitrateParameters","_setCodecPreferences","sdp","_setSimulcast","_revertSimulcastForNonVP8MediaSections","_RTCIceCandidate","_RTCPeerConnection","_RTCSessionDescription","_shouldOffer","_shouldRestartIce","_trackIdsToAttributes","_trackMatcher","on","addEventListener","_handleConnectionStateChange","bind","_handleDataChannelEvent","_handleIceCandidateEvent","_handleIceConnectionStateChange","_handleIceGatheringStateChange","_handleSignalingStateChange","_handleTrackEvent","_initiateIceRestart","stateChanged","state","removeListener","forEach","dataChannel","dataTrackSender","removeDataTrackSender","toString","_addIceCandidate","candidate","_this2","Promise","resolve","then","addIceCandidate","catch","error","warn","message","_addIceCandidates","candidates","all","map","_addOrUpdateTransceiver","track","_this3","transceiver","takeRecycledTransceiver","kind","sender","oldTrackId","mid","set","replaceTrack","direction","finally","delete","addTransceiver","_checkIceBox","description","ufrag","getUfrag","setUfrag","_answer","_this4","_setRemoteDescription","createAnswer","answer","type","updatedSdp","sdpWithoutSimulcast","replace","_setLocalDescription","_updateDescription","_maybeReoffer","localDescription","errorToThrow","_publishMediaWarning","code","_close","stop","signalingState","preempt","emit","event","_this5","channel","dataTrackReceiver","add","_handleGlare","_this6","didReoffer","_offer","_ref3","level","name","group","payload","context","JSON","stringify","clear","peerConnectionState","ice","slice","complete","revision","_this7","iceConnectionState","isIceConnectedOrComplete","includes","reset","_initiateIceRestartBackoff","start","iceGatheringState","delay","isSet","_this8","remoteDescription","update","mediaStreamTrack","signaledTrackId","match","mediaTrackReceiver","trackReceiver","backoff","shouldReoffer","senders","getSenders","filter","reduce","shouldOffer","mediaSections","sendersOfKind","isSenderOfKind","hasDataTrack","size","hasApplicationMediaSection","needsApplicationMediaSection","promise","_this9","iceRestart","values","createOffer","_getMediaTrackSenderId","trackId","mediaTrackSender","keys","find","_ref4","_addOrRewriteLocalTrackIds","_this10","transceivers","getTransceivers","activeTransceivers","_ref5","stopped","assignedTransceivers","_ref6","midsToTrackIds","_ref7","sdp1","unassignedTransceivers","_ref8","newTrackIdsByKind","_ref9","_ref10","sdp2","_rollbackAndApplyOffer","_this11","_this12","setLocalDescription","publishWarning","negotiationCompleted","getState","_this13","maxAudioBitrate","maxVideoBitrate","filterOutMediaStreamIds","sdpWithoutSimulcastForNonVP8MediaSections","setRemoteDescription","_this14","_updateIce","iceState","addDataTrackSender","has","dataChannelDict","ordered","maxPacketLifeTime","maxRetransmits","createDataChannel","addDataChannel","addMediaTrackSender","addSender","getTrackReceivers","concat","localDescriptionRevision","_this15","bracket","transition","tryTransition","get","removeDataChannel","removeMediaTrackSender","removeTrack","removeSender","setConfiguration","setIceReconnectTimeout","period","setDelay","_this16","updates","_this17","response","rewriteTrackIds","connectionState","rewriteLocalTrackId","pcv2","stats","rewriteTrackId","receiver","remoteAudioTrackStats","remoteVideoTrackStats","localAudioTrackStats","localVideoTrackStats","bundlePolicy","rtcpMuxPolicy","readyState","shouldRecycleTransceiver","_ref11","_ref12","recycledTransceivers","localCodec","shift","remoteCodecMap","splice","indexOf","updateLocalCodecs","section","codecMap","pts","updateRemoteCodecMaps","updateRecycledTransceivers","_pcv2$_encodingParame","maxBitrates","maxBitrate","params","removeMaxBitrate","label","setMaxBitrate","encodings","networkPriority","encoding","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\r\n\r\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\r\n\r\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\r\n\r\nvar DefaultBackoff = require('backoff');\r\n\r\nvar _require = require('@twilio/webrtc'),\r\n    DefaultMediaStream = _require.MediaStream,\r\n    DefaultRTCIceCandidate = _require.RTCIceCandidate,\r\n    DefaultRTCPeerConnection = _require.RTCPeerConnection,\r\n    DefaultRTCSessionDescription = _require.RTCSessionDescription,\r\n    getStatistics = _require.getStats;\r\n\r\nvar _require2 = require('@twilio/webrtc/lib/util'),\r\n    guessBrowser = _require2.guessBrowser;\r\n\r\nvar _require3 = require('@twilio/webrtc/lib/util/sdp'),\r\n    getSdpFormat = _require3.getSdpFormat;\r\n\r\nvar _require4 = require('../../util/constants'),\r\n    DEFAULT_ICE_GATHERING_TIMEOUT_MS = _require4.DEFAULT_ICE_GATHERING_TIMEOUT_MS,\r\n    DEFAULT_LOG_LEVEL = _require4.DEFAULT_LOG_LEVEL,\r\n    DEFAULT_SESSION_TIMEOUT_SEC = _require4.DEFAULT_SESSION_TIMEOUT_SEC,\r\n    iceRestartBackoffConfig = _require4.iceRestartBackoffConfig;\r\n\r\nvar _require5 = require('../../util/sdp'),\r\n    createCodecMapForMediaSection = _require5.createCodecMapForMediaSection,\r\n    disableRtx = _require5.disableRtx,\r\n    enableDtxForOpus = _require5.enableDtxForOpus,\r\n    getMediaSections = _require5.getMediaSections,\r\n    removeSSRCAttributes = _require5.removeSSRCAttributes,\r\n    revertSimulcastForNonVP8MediaSections = _require5.revertSimulcastForNonVP8MediaSections,\r\n    setBitrateParameters = _require5.setBitrateParameters,\r\n    setCodecPreferences = _require5.setCodecPreferences,\r\n    setSimulcast = _require5.setSimulcast,\r\n    unifiedPlanAddOrRewriteNewTrackIds = _require5.unifiedPlanAddOrRewriteNewTrackIds,\r\n    unifiedPlanAddOrRewriteTrackIds = _require5.unifiedPlanAddOrRewriteTrackIds,\r\n    unifiedPlanFilterLocalCodecs = _require5.unifiedPlanFilterLocalCodecs;\r\n\r\nvar DefaultTimeout = require('../../util/timeout');\r\n\r\nvar _require6 = require('../../util/twilio-video-errors'),\r\n    MediaClientLocalDescFailedError = _require6.MediaClientLocalDescFailedError,\r\n    MediaClientRemoteDescFailedError = _require6.MediaClientRemoteDescFailedError;\r\n\r\nvar _require7 = require('../../util'),\r\n    buildLogLevels = _require7.buildLogLevels,\r\n    getPlatform = _require7.getPlatform,\r\n    isChromeScreenShareTrack = _require7.isChromeScreenShareTrack,\r\n    oncePerTick = _require7.oncePerTick;\r\n\r\nvar IceBox = require('./icebox');\r\nvar DefaultIceConnectionMonitor = require('./iceconnectionmonitor.js');\r\nvar DataTrackReceiver = require('../../data/receiver');\r\nvar MediaTrackReceiver = require('../../media/track/receiver');\r\nvar StateMachine = require('../../statemachine');\r\nvar Log = require('../../util/log');\r\nvar IdentityTrackMatcher = require('../../util/sdp/trackmatcher/identity');\r\nvar OrderedTrackMatcher = require('../../util/sdp/trackmatcher/ordered');\r\nvar MIDTrackMatcher = require('../../util/sdp/trackmatcher/mid');\r\nvar workaroundIssue8329 = require('../../util/sdp/issue8329');\r\n\r\nvar guess = guessBrowser();\r\nvar platform = getPlatform();\r\nvar isAndroid = /android/.test(platform);\r\nvar isChrome = guess === 'chrome';\r\nvar isFirefox = guess === 'firefox';\r\nvar isSafari = guess === 'safari';\r\n\r\nvar isRTCRtpSenderParamsSupported = typeof RTCRtpSender !== 'undefined' && typeof RTCRtpSender.prototype.getParameters === 'function' && typeof RTCRtpSender.prototype.setParameters === 'function';\r\n\r\nvar nInstances = 0;\r\n\r\n/*\r\nPeerConnectionV2 States\r\n-----------------------\r\n\r\n    +------+    +--------+\r\n    |      |    |        |\r\n    | open |--->| closed |\r\n    |      |    |        |\r\n    +------+    +--------+\r\n      |  ^          ^\r\n      |  |          |\r\n      |  |          |\r\n      v  |          |\r\n  +----------+      |\r\n  |          |      |\r\n  | updating |------+\r\n  |          |\r\n  +----------+\r\n\r\n*/\r\n\r\nvar states = {\r\n  open: ['closed', 'updating'],\r\n  updating: ['closed', 'open'],\r\n  closed: []\r\n};\r\n\r\n/**\r\n * @extends StateMachine\r\n * @property {id}\r\n * @emits PeerConnectionV2#connectionStateChanged\r\n * @emits PeerConnectionV2#iceConnectionStateChanged\r\n * @emits PeerConnectionV2#candidates\r\n * @emits PeerConnectionV2#description\r\n */\r\n\r\nvar PeerConnectionV2 = function (_StateMachine) {\r\n  _inherits(PeerConnectionV2, _StateMachine);\r\n\r\n  /**\r\n   * Construct a {@link PeerConnectionV2}.\r\n   * @param {string} id\r\n   * @param {EncodingParametersImpl} encodingParameters\r\n   * @param {PreferredCodecs} preferredCodecs\r\n   * @param {object} [options]\r\n   */\r\n  function PeerConnectionV2(id, encodingParameters, preferredCodecs, options) {\r\n    _classCallCheck(this, PeerConnectionV2);\r\n\r\n    var _this = _possibleConstructorReturn(this, (PeerConnectionV2.__proto__ || Object.getPrototypeOf(PeerConnectionV2)).call(this, 'open', states));\r\n\r\n    options = Object.assign({\r\n      enableDscp: false,\r\n      dummyAudioMediaStreamTrack: null,\r\n      isChromeScreenShareTrack: isChromeScreenShareTrack,\r\n      iceServers: [],\r\n      isRTCRtpSenderParamsSupported: isRTCRtpSenderParamsSupported,\r\n      logLevel: DEFAULT_LOG_LEVEL,\r\n      offerOptions: {},\r\n      revertSimulcastForNonVP8MediaSections: revertSimulcastForNonVP8MediaSections,\r\n      sessionTimeout: DEFAULT_SESSION_TIMEOUT_SEC * 1000,\r\n      setBitrateParameters: setBitrateParameters,\r\n      setCodecPreferences: setCodecPreferences,\r\n      setSimulcast: setSimulcast,\r\n      Backoff: DefaultBackoff,\r\n      IceConnectionMonitor: DefaultIceConnectionMonitor,\r\n      MediaStream: DefaultMediaStream,\r\n      RTCIceCandidate: DefaultRTCIceCandidate,\r\n      RTCPeerConnection: DefaultRTCPeerConnection,\r\n      RTCSessionDescription: DefaultRTCSessionDescription,\r\n      Timeout: DefaultTimeout\r\n    }, options);\r\n\r\n    var configuration = getConfiguration(options);\r\n    var sdpFormat = getSdpFormat(configuration.sdpSemantics);\r\n    var isUnifiedPlan = sdpFormat === 'unified';\r\n\r\n    var localMediaStream = isUnifiedPlan ? null : new options.MediaStream();\r\n    var logLevels = buildLogLevels(options.logLevel);\r\n    var RTCPeerConnection = options.RTCPeerConnection;\r\n\r\n    if (options.enableDscp === true) {\r\n      options.chromeSpecificConstraints = options.chromeSpecificConstraints || {};\r\n      options.chromeSpecificConstraints.optional = options.chromeSpecificConstraints.optional || [];\r\n      options.chromeSpecificConstraints.optional.push({ googDscp: true });\r\n    }\r\n\r\n    var log = options.log ? options.log.createLog('webrtc', _this) : new Log('webrtc', _this, logLevels, options.loggerName);\r\n    var peerConnection = new RTCPeerConnection(configuration, options.chromeSpecificConstraints);\r\n\r\n    if (options.dummyAudioMediaStreamTrack) {\r\n      peerConnection.addTrack(options.dummyAudioMediaStreamTrack, localMediaStream || new options.MediaStream());\r\n    }\r\n\r\n    Object.defineProperties(_this, {\r\n      _appliedTrackIdsToAttributes: {\r\n        value: new Map(),\r\n        writable: true\r\n      },\r\n      _dataChannels: {\r\n        value: new Map()\r\n      },\r\n      _dataTrackReceivers: {\r\n        value: new Set()\r\n      },\r\n      _descriptionRevision: {\r\n        writable: true,\r\n        value: 0\r\n      },\r\n      _didGenerateLocalCandidates: {\r\n        writable: true,\r\n        value: false\r\n      },\r\n      _enableDscp: {\r\n        value: options.enableDscp\r\n      },\r\n      _encodingParameters: {\r\n        value: encodingParameters\r\n      },\r\n      _isChromeScreenShareTrack: {\r\n        value: options.isChromeScreenShareTrack\r\n      },\r\n      _iceGatheringFailed: {\r\n        value: false,\r\n        writable: true\r\n      },\r\n      _iceGatheringTimeout: {\r\n        value: new options.Timeout(function () {\r\n          return _this._handleIceGatheringTimeout();\r\n        }, DEFAULT_ICE_GATHERING_TIMEOUT_MS, false)\r\n      },\r\n      _iceRestartBackoff: {\r\n        value: options.Backoff.exponential(iceRestartBackoffConfig)\r\n      },\r\n      _instanceId: {\r\n        value: ++nInstances\r\n      },\r\n      _isIceConnectionInactive: {\r\n        writable: true,\r\n        value: false\r\n      },\r\n      _isIceLite: {\r\n        writable: true,\r\n        value: false\r\n      },\r\n      _isIceRestartBackoffInProgress: {\r\n        writable: true,\r\n        value: false\r\n      },\r\n      _isRestartingIce: {\r\n        writable: true,\r\n        value: false\r\n      },\r\n      _isUnifiedPlan: {\r\n        value: isUnifiedPlan\r\n      },\r\n      _isRTCRtpSenderParamsSupported: {\r\n        value: options.isRTCRtpSenderParamsSupported\r\n      },\r\n      _lastIceConnectionState: {\r\n        writable: true,\r\n        value: null\r\n      },\r\n      _lastStableDescriptionRevision: {\r\n        writable: true,\r\n        value: 0\r\n      },\r\n      _localCandidates: {\r\n        writable: true,\r\n        value: []\r\n      },\r\n      _localCodecs: {\r\n        value: new Set()\r\n      },\r\n      _localCandidatesRevision: {\r\n        writable: true,\r\n        value: 1\r\n      },\r\n      _localDescriptionWithoutSimulcast: {\r\n        writable: true,\r\n        value: null\r\n      },\r\n      _localDescription: {\r\n        writable: true,\r\n        value: null\r\n      },\r\n      _localMediaStream: {\r\n        value: localMediaStream\r\n      },\r\n      _localUfrag: {\r\n        writable: true,\r\n        value: null\r\n      },\r\n      _log: {\r\n        value: log\r\n      },\r\n      _eventObserver: {\r\n        value: options.eventObserver\r\n      },\r\n      _remoteCodecMaps: {\r\n        value: new Map()\r\n      },\r\n      _rtpSenders: {\r\n        value: new Map()\r\n      },\r\n      _iceConnectionMonitor: {\r\n        value: new options.IceConnectionMonitor(peerConnection)\r\n      },\r\n      _mediaTrackReceivers: {\r\n        value: new Set()\r\n      },\r\n      _needsAnswer: {\r\n        writable: true,\r\n        value: false\r\n      },\r\n      _negotiationRole: {\r\n        writable: true,\r\n        value: null\r\n      },\r\n      _offerOptions: {\r\n        writable: true,\r\n        value: options.offerOptions\r\n      },\r\n      _onEncodingParametersChanged: {\r\n        value: oncePerTick(function () {\r\n          if (_this._isRTCRtpSenderParamsSupported) {\r\n            if (!_this._needsAnswer) {\r\n              updateEncodingParameters(_this);\r\n            }\r\n            return;\r\n          }\r\n          _this.offer();\r\n        })\r\n      },\r\n      _peerConnection: {\r\n        value: peerConnection\r\n      },\r\n      _preferredAudioCodecs: {\r\n        value: preferredCodecs.audio\r\n      },\r\n      _preferredVideoCodecs: {\r\n        value: preferredCodecs.video\r\n      },\r\n      _shouldApplyDtx: {\r\n        value: preferredCodecs.audio.every(function (_ref) {\r\n          var codec = _ref.codec;\r\n          return codec !== 'opus';\r\n        }) || preferredCodecs.audio.some(function (_ref2) {\r\n          var codec = _ref2.codec,\r\n              dtx = _ref2.dtx;\r\n          return codec === 'opus' && dtx;\r\n        })\r\n      },\r\n      _shouldApplySimulcast: {\r\n        value: (isChrome || isSafari) && preferredCodecs.video.some(function (codecSettings) {\r\n          return codecSettings.codec.toLowerCase() === 'vp8' && codecSettings.simulcast;\r\n        })\r\n      },\r\n      _queuedDescription: {\r\n        writable: true,\r\n        value: null\r\n      },\r\n      _iceReconnectTimeout: {\r\n        value: new options.Timeout(function () {\r\n          log.debug('ICE reconnect timed out');\r\n          _this.close();\r\n        }, options.sessionTimeout, false)\r\n      },\r\n      _recycledTransceivers: {\r\n        value: {\r\n          audio: [],\r\n          video: []\r\n        }\r\n      },\r\n      _replaceTrackPromises: {\r\n        value: new Map()\r\n      },\r\n      _remoteCandidates: {\r\n        writable: true,\r\n        value: new IceBox()\r\n      },\r\n      _sdpFormat: {\r\n        value: sdpFormat\r\n      },\r\n      _setBitrateParameters: {\r\n        value: options.setBitrateParameters\r\n      },\r\n      _setCodecPreferences: {\r\n        // NOTE(mmalavalli): Re-ordering payload types in order to make sure a non-H264\r\n        // preferred codec is selected does not work on Android Firefox due to this behavior:\r\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1683258. So, we work around this by\r\n        // not applying any non-H264 preferred video codec.\r\n        value: isFirefox && isAndroid && preferredCodecs.video[0] && preferredCodecs.video[0].codec.toLowerCase() !== 'h264' ? function (sdp) {\r\n          return sdp;\r\n        } : options.setCodecPreferences\r\n      },\r\n      _setSimulcast: {\r\n        value: options.setSimulcast\r\n      },\r\n      _revertSimulcastForNonVP8MediaSections: {\r\n        value: options.revertSimulcastForNonVP8MediaSections\r\n      },\r\n      _RTCIceCandidate: {\r\n        value: options.RTCIceCandidate\r\n      },\r\n      _RTCPeerConnection: {\r\n        value: options.RTCPeerConnection\r\n      },\r\n      _RTCSessionDescription: {\r\n        value: options.RTCSessionDescription\r\n      },\r\n      _shouldOffer: {\r\n        writable: true,\r\n        value: false\r\n      },\r\n      _shouldRestartIce: {\r\n        writable: true,\r\n        value: false\r\n      },\r\n      _trackIdsToAttributes: {\r\n        value: new Map(),\r\n        writable: true\r\n      },\r\n      _trackMatcher: {\r\n        writable: true,\r\n        value: null\r\n      },\r\n      id: {\r\n        enumerable: true,\r\n        value: id\r\n      }\r\n    });\r\n\r\n    encodingParameters.on('changed', _this._onEncodingParametersChanged);\r\n\r\n    peerConnection.addEventListener('connectionstatechange', _this._handleConnectionStateChange.bind(_this));\r\n    peerConnection.addEventListener('datachannel', _this._handleDataChannelEvent.bind(_this));\r\n    peerConnection.addEventListener('icecandidate', _this._handleIceCandidateEvent.bind(_this));\r\n    peerConnection.addEventListener('iceconnectionstatechange', _this._handleIceConnectionStateChange.bind(_this));\r\n    peerConnection.addEventListener('icegatheringstatechange', _this._handleIceGatheringStateChange.bind(_this));\r\n    peerConnection.addEventListener('signalingstatechange', _this._handleSignalingStateChange.bind(_this));\r\n    peerConnection.addEventListener('track', _this._handleTrackEvent.bind(_this));\r\n    _this._iceRestartBackoff.on('ready', function () {\r\n      return _this._initiateIceRestart();\r\n    });\r\n\r\n    var self = _this;\r\n    _this.on('stateChanged', function stateChanged(state) {\r\n      if (state !== 'closed') {\r\n        return;\r\n      }\r\n      self.removeListener('stateChanged', stateChanged);\r\n      self._dataChannels.forEach(function (dataChannel, dataTrackSender) {\r\n        self.removeDataTrackSender(dataTrackSender);\r\n      });\r\n    });\r\n    return _this;\r\n  }\r\n\r\n  _createClass(PeerConnectionV2, [{\r\n    key: 'toString',\r\n    value: function toString() {\r\n      return '[PeerConnectionV2 #' + this._instanceId + ': ' + this.id + ']';\r\n    }\r\n\r\n    /**\r\n     * The {@link PeerConnectionV2}'s underlying RTCPeerConnection's RTCPeerConnectionState\r\n     * if supported by the browser, its RTCIceConnectionState otherwise.\r\n     * @property {RTCPeerConnectionState}\r\n     */\r\n\r\n  }, {\r\n    key: '_addIceCandidate',\r\n\r\n\r\n    /**\r\n     * Add an ICE candidate to the {@link PeerConnectionV2}.\r\n     * @private\r\n     * @param {object} candidate\r\n     * @returns {Promise<void>}\r\n     */\r\n    value: function _addIceCandidate(candidate) {\r\n      var _this2 = this;\r\n\r\n      return Promise.resolve().then(function () {\r\n        candidate = new _this2._RTCIceCandidate(candidate);\r\n        return _this2._peerConnection.addIceCandidate(candidate);\r\n      }).catch(function (error) {\r\n        // NOTE(mmalavalli): Firefox 68+ now generates an RTCIceCandidate with an\r\n        // empty candidate string to signal end-of-candidates, followed by a null\r\n        // candidate. As of now, Chrome and Safari reject this RTCIceCandidate. Since\r\n        // this does not affect the media connection between Firefox 68+ and Chrome/Safari\r\n        // in Peer-to-Peer Rooms, we suppress the Error and log a warning message.\r\n        //\r\n        // Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=978582\r\n        //\r\n        _this2._log.warn('Failed to add RTCIceCandidate ' + (candidate ? '\"' + candidate.candidate + '\"' : 'null') + ': ' + error.message);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Add ICE candidates to the {@link PeerConnectionV2}.\r\n     * @private\r\n     * @param {Array<object>} candidates\r\n     * @returns {Promise<void>}\r\n     */\r\n\r\n  }, {\r\n    key: '_addIceCandidates',\r\n    value: function _addIceCandidates(candidates) {\r\n      return Promise.all(candidates.map(this._addIceCandidate, this)).then(function () {});\r\n    }\r\n\r\n    /**\r\n     * Add a new RTCRtpTransceiver or update an existing RTCRtpTransceiver for the\r\n     * given MediaStreamTrack.\r\n     * @private\r\n     * @param {MediaStreamTrack} track\r\n     * @returns {RTCRtpTransceiver}\r\n     */\r\n\r\n  }, {\r\n    key: '_addOrUpdateTransceiver',\r\n    value: function _addOrUpdateTransceiver(track) {\r\n      var _this3 = this;\r\n\r\n      var transceiver = takeRecycledTransceiver(this, track.kind);\r\n      if (transceiver && transceiver.sender) {\r\n        var oldTrackId = transceiver.sender.track ? transceiver.sender.track.id : null;\r\n        if (oldTrackId) {\r\n          this._log.warn('Reusing transceiver: ' + transceiver.mid + '] ' + oldTrackId + ' => ' + track.id);\r\n        }\r\n        // NOTE(mpatwardhan):remember this transceiver while we replace track.\r\n        // we recycle transceivers that are not in use after 'negotiationCompleted', but we want to prevent\r\n        // this one from getting recycled while replaceTrack is pending.\r\n        this._replaceTrackPromises.set(transceiver, transceiver.sender.replaceTrack(track).then(function () {\r\n          transceiver.direction = 'sendrecv';\r\n        }, function () {\r\n          // Do nothing.\r\n        }).finally(function () {\r\n          _this3._replaceTrackPromises.delete(transceiver);\r\n        }));\r\n        return transceiver;\r\n      }\r\n      return this._peerConnection.addTransceiver(track);\r\n    }\r\n\r\n    /**\r\n     * Check the {@link IceBox}.\r\n     * @private\r\n     * @param {RTCSessionDescriptionInit} description\r\n     * @returns {Promise<void>}\r\n     */\r\n\r\n  }, {\r\n    key: '_checkIceBox',\r\n    value: function _checkIceBox(description) {\r\n      var ufrag = getUfrag(description);\r\n      if (!ufrag) {\r\n        return Promise.resolve();\r\n      }\r\n      var candidates = this._remoteCandidates.setUfrag(ufrag);\r\n      return this._addIceCandidates(candidates);\r\n    }\r\n\r\n    /**\r\n     * Create an answer and set it on the {@link PeerConnectionV2}.\r\n     * @private\r\n     * @param {RTCSessionDescriptionInit} offer\r\n     * @returns {Promise<boolean>}\r\n     */\r\n\r\n  }, {\r\n    key: '_answer',\r\n    value: function _answer(offer) {\r\n      var _this4 = this;\r\n\r\n      return Promise.resolve().then(function () {\r\n        if (!_this4._negotiationRole) {\r\n          _this4._negotiationRole = 'answerer';\r\n        }\r\n        return _this4._setRemoteDescription(offer);\r\n      }).catch(function () {\r\n        throw new MediaClientRemoteDescFailedError();\r\n      }).then(function () {\r\n        return _this4._peerConnection.createAnswer();\r\n      }).then(function (answer) {\r\n        if (isFirefox) {\r\n          // NOTE(mmalavalli): We work around Chromium bug 1106157 by disabling\r\n          // RTX in Firefox 79+. For more details about the bug, please go here:\r\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1106157\r\n          answer = new _this4._RTCSessionDescription({\r\n            sdp: disableRtx(answer.sdp),\r\n            type: answer.type\r\n          });\r\n        } else {\r\n          answer = workaroundIssue8329(answer);\r\n        }\r\n\r\n        // NOTE(mpatwardhan): Upcoming chrome versions are going to remove ssrc attributes\r\n        // mslabel and label. See this bug https://bugs.chromium.org/p/webrtc/issues/detail?id=7110\r\n        // and PSA: https://groups.google.com/forum/#!searchin/discuss-webrtc/PSA%7Csort:date/discuss-webrtc/jcZO-Wj0Wus/k2XvPCvoAwAJ\r\n        // We are not referencing those attributes, but this changes goes ahead and removes them to see if it works.\r\n        // this also helps reduce bytes on wires\r\n        var updatedSdp = removeSSRCAttributes(answer.sdp, ['mslabel', 'label']);\r\n\r\n        if (_this4._shouldApplySimulcast) {\r\n          var sdpWithoutSimulcast = updatedSdp;\r\n          updatedSdp = _this4._setSimulcast(sdpWithoutSimulcast, _this4._sdpFormat, _this4._trackIdsToAttributes);\r\n          // NOTE(syerrapragada): VMS does not support H264 simulcast. So,\r\n          // unset simulcast for sections in local offer where corresponding\r\n          // sections in answer doesn't have vp8 as preferred codec and reapply offer.\r\n          updatedSdp = _this4._revertSimulcastForNonVP8MediaSections(updatedSdp, sdpWithoutSimulcast, offer.sdp);\r\n        }\r\n\r\n        // NOTE(mmalavalli): Work around Chromium bug 1074421.\r\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1074421\r\n        updatedSdp = updatedSdp.replace(/42e015/g, '42e01f');\r\n\r\n        return _this4._setLocalDescription({\r\n          type: answer.type,\r\n          sdp: updatedSdp\r\n        });\r\n      }).then(function () {\r\n        return _this4._checkIceBox(offer);\r\n      }).then(function () {\r\n        return _this4._queuedDescription && _this4._updateDescription(_this4._queuedDescription);\r\n      }).then(function () {\r\n        _this4._queuedDescription = null;\r\n        return _this4._maybeReoffer(_this4._peerConnection.localDescription);\r\n      }).catch(function (error) {\r\n        var errorToThrow = error instanceof MediaClientRemoteDescFailedError ? error : new MediaClientLocalDescFailedError();\r\n        _this4._publishMediaWarning({\r\n          message: 'Failed to _answer',\r\n          code: errorToThrow.code,\r\n          error: error\r\n        });\r\n        throw errorToThrow;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Close the underlying RTCPeerConnection. Returns false if the\r\n     * RTCPeerConnection was already closed.\r\n     * @private\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: '_close',\r\n    value: function _close() {\r\n      this._iceConnectionMonitor.stop();\r\n      if (this._peerConnection.signalingState !== 'closed') {\r\n        this._peerConnection.close();\r\n        this.preempt('closed');\r\n        this._encodingParameters.removeListener('changed', this._onEncodingParametersChanged);\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * Handle a \"connectionstatechange\" event.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: '_handleConnectionStateChange',\r\n    value: function _handleConnectionStateChange() {\r\n      this.emit('connectionStateChanged');\r\n    }\r\n\r\n    /**\r\n     * Handle a \"datachannel\" event.\r\n     * @private\r\n     * @param {RTCDataChannelEvent} event\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: '_handleDataChannelEvent',\r\n    value: function _handleDataChannelEvent(event) {\r\n      var _this5 = this;\r\n\r\n      var dataChannel = event.channel;\r\n      var dataTrackReceiver = new DataTrackReceiver(dataChannel);\r\n      this._dataTrackReceivers.add(dataTrackReceiver);\r\n\r\n      dataChannel.addEventListener('close', function () {\r\n        _this5._dataTrackReceivers.delete(dataTrackReceiver);\r\n      });\r\n\r\n      this.emit('trackAdded', dataTrackReceiver);\r\n    }\r\n\r\n    /**\r\n     * Handle a glare scenario on the {@link PeerConnectionV2}.\r\n     * @private\r\n     * @param {RTCSessionDescriptionInit} offer\r\n     * @returns {Promise<void>}\r\n     */\r\n\r\n  }, {\r\n    key: '_handleGlare',\r\n    value: function _handleGlare(offer) {\r\n      var _this6 = this;\r\n\r\n      this._log.debug('Glare detected; rolling back');\r\n      if (this._isRestartingIce) {\r\n        this._log.debug('An ICE restart was in progress; we\\'ll need to restart ICE again after rolling back');\r\n        this._isRestartingIce = false;\r\n        this._shouldRestartIce = true;\r\n      }\r\n      return Promise.resolve().then(function () {\r\n        _this6._trackIdsToAttributes = new Map(_this6._appliedTrackIdsToAttributes);\r\n        return _this6._setLocalDescription({ type: 'rollback' });\r\n      }).then(function () {\r\n        _this6._needsAnswer = false;\r\n        return _this6._answer(offer);\r\n      }).then(function (didReoffer) {\r\n        return didReoffer ? Promise.resolve() : _this6._offer();\r\n      });\r\n    }\r\n  }, {\r\n    key: '_publishMediaWarning',\r\n    value: function _publishMediaWarning(_ref3) {\r\n      var message = _ref3.message,\r\n          code = _ref3.code,\r\n          error = _ref3.error,\r\n          sdp = _ref3.sdp;\r\n\r\n      this._eventObserver.emit('event', { level: 'warning', name: 'error', group: 'media', payload: {\r\n          message: message,\r\n          code: code,\r\n          context: JSON.stringify({ error: error.message, sdp: sdp })\r\n        } });\r\n    }\r\n\r\n    /**\r\n     * Handle an ICE candidate event.\r\n     * @private\r\n     * @param {Event} event\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: '_handleIceCandidateEvent',\r\n    value: function _handleIceCandidateEvent(event) {\r\n      if (event.candidate) {\r\n        this._log.debug('Clearing ICE gathering timeout');\r\n        this._didGenerateLocalCandidates = true;\r\n        this._iceGatheringTimeout.clear();\r\n        this._localCandidates.push(event.candidate);\r\n      }\r\n      var peerConnectionState = {\r\n        ice: {\r\n          candidates: this._isIceLite ? [] : this._localCandidates.slice(),\r\n          ufrag: this._localUfrag\r\n        },\r\n        id: this.id\r\n      };\r\n      if (!event.candidate) {\r\n        peerConnectionState.ice.complete = true;\r\n      }\r\n      if (!(this._isIceLite && event.candidate)) {\r\n        peerConnectionState.ice.revision = this._localCandidatesRevision++;\r\n        this.emit('candidates', peerConnectionState);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Handle an ICE connection state change event.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: '_handleIceConnectionStateChange',\r\n    value: function _handleIceConnectionStateChange() {\r\n      var _this7 = this;\r\n\r\n      var iceConnectionState = this._peerConnection.iceConnectionState;\r\n\r\n      var isIceConnectedOrComplete = ['connected', 'completed'].includes(iceConnectionState);\r\n      var log = this._log;\r\n\r\n      log.debug('ICE connection state is \"' + iceConnectionState + '\"');\r\n      if (isIceConnectedOrComplete) {\r\n        this._iceReconnectTimeout.clear();\r\n        this._iceRestartBackoff.reset();\r\n      }\r\n\r\n      if (this._lastIceConnectionState !== 'failed' && iceConnectionState === 'failed' && !this._shouldRestartIce && !this._isRestartingIce) {\r\n        // Case 1: Transition to \"failed\".\r\n        log.warn('ICE failed');\r\n        this._initiateIceRestartBackoff();\r\n      } else if (['disconnected', 'failed'].includes(this._lastIceConnectionState) && isIceConnectedOrComplete) {\r\n        // Case 2: Transition from \"disconnected\" or \"failed\".\r\n        log.debug('ICE reconnected');\r\n      }\r\n\r\n      // start monitor media when connected, and continue to monitor while state is complete-disconnected-connected.\r\n      if (iceConnectionState === 'connected') {\r\n        this._isIceConnectionInactive = false;\r\n        this._iceConnectionMonitor.start(function () {\r\n          // note: iceConnection monitor waits for iceConnectionState=disconnected for\r\n          // detecting inactivity. Its possible that it may know about disconnected before _handleIceConnectionStateChange\r\n          _this7._iceConnectionMonitor.stop();\r\n          if (!_this7._shouldRestartIce && !_this7._isRestartingIce) {\r\n            log.warn('ICE Connection Monitor detected inactivity');\r\n            _this7._isIceConnectionInactive = true;\r\n            _this7._initiateIceRestartBackoff();\r\n            _this7.emit('iceConnectionStateChanged');\r\n            _this7.emit('connectionStateChanged');\r\n          }\r\n        });\r\n      } else if (!['disconnected', 'completed'].includes(iceConnectionState)) {\r\n        // don't stop monitoring for disconnected or completed.\r\n        this._iceConnectionMonitor.stop();\r\n        this._isIceConnectionInactive = false;\r\n      }\r\n\r\n      this._lastIceConnectionState = iceConnectionState;\r\n      this.emit('iceConnectionStateChanged');\r\n    }\r\n\r\n    /**\r\n     * Handle ICE gathering timeout.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: '_handleIceGatheringTimeout',\r\n    value: function _handleIceGatheringTimeout() {\r\n      this._log.warn('ICE failed to gather any local candidates');\r\n      this._iceGatheringFailed = true;\r\n      this._initiateIceRestartBackoff();\r\n      this.emit('iceConnectionStateChanged');\r\n      this.emit('connectionStateChanged');\r\n    }\r\n\r\n    /**\r\n     * Handle an ICE gathering state change event.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: '_handleIceGatheringStateChange',\r\n    value: function _handleIceGatheringStateChange() {\r\n      var iceGatheringState = this._peerConnection.iceGatheringState;\r\n\r\n      var log = this._log;\r\n      log.debug('ICE gathering state is \"' + iceGatheringState + '\"');\r\n\r\n      // NOTE(mmalavalli): Start the ICE gathering timeout only if the RTCPeerConnection\r\n      // has started gathering candidates for the first time since the initial offer/answer\r\n      // or an offer/answer with ICE restart.\r\n      var _iceGatheringTimeout = this._iceGatheringTimeout,\r\n          delay = _iceGatheringTimeout.delay,\r\n          isSet = _iceGatheringTimeout.isSet;\r\n\r\n      if (iceGatheringState === 'gathering' && !this._didGenerateLocalCandidates && !isSet) {\r\n        log.debug('Starting ICE gathering timeout: ' + delay);\r\n        this._iceGatheringFailed = false;\r\n        this._iceGatheringTimeout.start();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Handle a signaling state change event.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: '_handleSignalingStateChange',\r\n    value: function _handleSignalingStateChange() {\r\n      if (this._peerConnection.signalingState === 'stable') {\r\n        this._appliedTrackIdsToAttributes = new Map(this._trackIdsToAttributes);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Handle a track event.\r\n     * @private\r\n     * @param {Event} event\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: '_handleTrackEvent',\r\n    value: function _handleTrackEvent(event) {\r\n      var _this8 = this;\r\n\r\n      var sdp = this._peerConnection.remoteDescription ? this._peerConnection.remoteDescription.sdp : null;\r\n\r\n      if (!this._trackMatcher) {\r\n        this._trackMatcher = event.transceiver && event.transceiver.mid ? new MIDTrackMatcher()\r\n        // NOTE(mroberts): Until Chrome ships RTCRtpTransceivers with MID\r\n        // support, we have to use the same hacky solution as Safari. Revisit\r\n        // this when RTCRtpTransceivers and MIDs land. We should be able to use\r\n        // the same technique as Firefox.\r\n        : isSafari || this._isUnifiedPlan ? new OrderedTrackMatcher() : new IdentityTrackMatcher();\r\n      }\r\n      this._trackMatcher.update(sdp);\r\n\r\n      var mediaStreamTrack = event.track;\r\n      var signaledTrackId = this._trackMatcher.match(event) || mediaStreamTrack.id;\r\n      var mediaTrackReceiver = new MediaTrackReceiver(signaledTrackId, mediaStreamTrack);\r\n\r\n      // NOTE(mmalavalli): In unified plan mode, \"ended\" is not fired on the remote\r\n      // MediaStreamTrack when the remote peer removes a track. So, when this\r\n      // MediaStreamTrack is re-used for a different track due to the remote peer\r\n      // calling RTCRtpSender.replaceTrack(), we delete the previous MediaTrackReceiver\r\n      // that owned this MediaStreamTrack before adding the new MediaTrackReceiver.\r\n      this._mediaTrackReceivers.forEach(function (trackReceiver) {\r\n        if (trackReceiver.track.id === mediaTrackReceiver.track.id) {\r\n          _this8._mediaTrackReceivers.delete(trackReceiver);\r\n        }\r\n      });\r\n\r\n      this._mediaTrackReceivers.add(mediaTrackReceiver);\r\n      mediaStreamTrack.addEventListener('ended', function () {\r\n        return _this8._mediaTrackReceivers.delete(mediaTrackReceiver);\r\n      });\r\n      this.emit('trackAdded', mediaTrackReceiver);\r\n    }\r\n\r\n    /**\r\n     * Initiate ICE Restart.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: '_initiateIceRestart',\r\n    value: function _initiateIceRestart() {\r\n      if (this._peerConnection.signalingState === 'closed') {\r\n        return;\r\n      }\r\n      var log = this._log;\r\n      log.warn('Attempting to restart ICE');\r\n      this._didGenerateLocalCandidates = false;\r\n      this._isIceRestartBackoffInProgress = false;\r\n      this._shouldRestartIce = true;\r\n\r\n      var _iceReconnectTimeout = this._iceReconnectTimeout,\r\n          delay = _iceReconnectTimeout.delay,\r\n          isSet = _iceReconnectTimeout.isSet;\r\n\r\n      if (!isSet) {\r\n        log.debug('Starting ICE reconnect timeout: ' + delay);\r\n        this._iceReconnectTimeout.start();\r\n      }\r\n      this.offer();\r\n    }\r\n\r\n    /**\r\n     * Schedule an ICE Restart.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: '_initiateIceRestartBackoff',\r\n    value: function _initiateIceRestartBackoff() {\r\n      if (this._peerConnection.signalingState === 'closed' || this._isIceRestartBackoffInProgress) {\r\n        return;\r\n      }\r\n      this._log.warn('An ICE restart has been scheduled');\r\n      this._isIceRestartBackoffInProgress = true;\r\n      this._iceRestartBackoff.backoff();\r\n    }\r\n\r\n    /**\r\n     * Conditionally re-offer.\r\n     * @private\r\n     * @param {?RTCSessionDescriptionInit} localDescription\r\n     * @returns {Promise<boolean>}\r\n     */\r\n\r\n  }, {\r\n    key: '_maybeReoffer',\r\n    value: function _maybeReoffer(localDescription) {\r\n      var shouldReoffer = this._shouldOffer;\r\n\r\n      if (localDescription && localDescription.sdp) {\r\n        // NOTE(mmalavalli): For \"unified-plan\" sdps, if the local RTCSessionDescription\r\n        // has fewer audio and/or video send* m= lines than the corresponding RTCRtpSenders\r\n        // with non-null MediaStreamTracks, it means that the newly added RTCRtpSenders\r\n        // require renegotiation.\r\n        if (this._isUnifiedPlan) {\r\n          var senders = this._peerConnection.getSenders().filter(function (sender) {\r\n            return sender.track;\r\n          });\r\n          shouldReoffer = ['audio', 'video'].reduce(function (shouldOffer, kind) {\r\n            var mediaSections = getMediaSections(localDescription.sdp, kind, '(sendrecv|sendonly)');\r\n            var sendersOfKind = senders.filter(isSenderOfKind.bind(null, kind));\r\n            return shouldOffer || mediaSections.length < sendersOfKind.length;\r\n          }, shouldReoffer);\r\n        }\r\n\r\n        // NOTE(mroberts): We also need to re-offer if we have a DataTrack to share\r\n        // but no m= application section.\r\n        var hasDataTrack = this._dataChannels.size > 0;\r\n        var hasApplicationMediaSection = getMediaSections(localDescription.sdp, 'application').length > 0;\r\n        var needsApplicationMediaSection = hasDataTrack && !hasApplicationMediaSection;\r\n        shouldReoffer = shouldReoffer || needsApplicationMediaSection;\r\n      }\r\n\r\n      var promise = shouldReoffer ? this._offer() : Promise.resolve();\r\n      return promise.then(function () {\r\n        return shouldReoffer;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Create an offer and set it on the {@link PeerConnectionV2}.\r\n     * @private\r\n     * @returns {Promise<void>}\r\n     */\r\n\r\n  }, {\r\n    key: '_offer',\r\n    value: function _offer() {\r\n      var _this9 = this;\r\n\r\n      var offerOptions = Object.assign({}, this._offerOptions);\r\n      this._needsAnswer = true;\r\n      if (this._shouldRestartIce) {\r\n        this._shouldRestartIce = false;\r\n        this._isRestartingIce = true;\r\n        offerOptions.iceRestart = true;\r\n      }\r\n\r\n      return Promise.all(this._replaceTrackPromises.values()).then(function () {\r\n        return _this9._peerConnection.createOffer(offerOptions);\r\n      }).catch(function (error) {\r\n        var errorToThrow = new MediaClientLocalDescFailedError();\r\n        _this9._publishMediaWarning({\r\n          message: 'Failed to create offer',\r\n          code: errorToThrow.code,\r\n          error: error\r\n        });\r\n        throw errorToThrow;\r\n      }).then(function (offer) {\r\n        if (isFirefox) {\r\n          // NOTE(mmalavalli): We work around Chromium bug 1106157 by disabling\r\n          // RTX in Firefox 79+. For more details about the bug, please go here:\r\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1106157\r\n          offer = new _this9._RTCSessionDescription({\r\n            sdp: disableRtx(offer.sdp),\r\n            type: offer.type\r\n          });\r\n        } else {\r\n          offer = workaroundIssue8329(offer);\r\n        }\r\n\r\n        // NOTE(mpatwardhan): upcoming chrome versions are going to remove ssrc attributes\r\n        // mslabel and label. See this bug https://bugs.chromium.org/p/webrtc/issues/detail?id=7110\r\n        // and PSA: https://groups.google.com/forum/#!searchin/discuss-webrtc/PSA%7Csort:date/discuss-webrtc/jcZO-Wj0Wus/k2XvPCvoAwAJ\r\n        // Looks like we are not referencing those attributes, but this changes goes ahead and removes them to see if it works.\r\n        // this also helps reduce bytes on wires\r\n        var sdp = removeSSRCAttributes(offer.sdp, ['mslabel', 'label']);\r\n        sdp = _this9._isUnifiedPlan && _this9._peerConnection.remoteDescription ? unifiedPlanFilterLocalCodecs(sdp, _this9._peerConnection.remoteDescription.sdp) : sdp;\r\n\r\n        var updatedSdp = _this9._setCodecPreferences(sdp, _this9._preferredAudioCodecs, _this9._preferredVideoCodecs);\r\n\r\n        _this9._shouldOffer = false;\r\n        if (!_this9._negotiationRole) {\r\n          _this9._negotiationRole = 'offerer';\r\n        }\r\n\r\n        if (_this9._shouldApplySimulcast) {\r\n          _this9._localDescriptionWithoutSimulcast = {\r\n            type: 'offer',\r\n            sdp: updatedSdp\r\n          };\r\n          updatedSdp = _this9._setSimulcast(updatedSdp, _this9._sdpFormat, _this9._trackIdsToAttributes);\r\n        }\r\n        return _this9._setLocalDescription({\r\n          type: 'offer',\r\n          sdp: updatedSdp\r\n        });\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Get the MediaTrackSender ID of the given MediaStreamTrack ID.\r\n     * Since a MediaTrackSender's underlying MediaStreamTrack can be\r\n     * replaced, the corresponding IDs can mismatch.\r\n     * @private\r\n     * @param {Track.ID} id\r\n     * @returns {Track.ID}\r\n     */\r\n\r\n  }, {\r\n    key: '_getMediaTrackSenderId',\r\n    value: function _getMediaTrackSenderId(trackId) {\r\n      var mediaTrackSender = Array.from(this._rtpSenders.keys()).find(function (_ref4) {\r\n        var id = _ref4.track.id;\r\n        return id === trackId;\r\n      });\r\n      return mediaTrackSender ? mediaTrackSender.id : trackId;\r\n    }\r\n\r\n    /**\r\n     * Add or rewrite local MediaStreamTrack IDs in the given Unified Plan RTCSessionDescription.\r\n     * @private\r\n     * @param {RTCSessionDescription} description\r\n     * @return {RTCSessionDescription}\r\n     */\r\n\r\n  }, {\r\n    key: '_addOrRewriteLocalTrackIds',\r\n    value: function _addOrRewriteLocalTrackIds(description) {\r\n      var _this10 = this;\r\n\r\n      var transceivers = this._peerConnection.getTransceivers();\r\n      var activeTransceivers = transceivers.filter(function (_ref5) {\r\n        var sender = _ref5.sender,\r\n            stopped = _ref5.stopped;\r\n        return !stopped && sender && sender.track;\r\n      });\r\n\r\n      // NOTE(mmalavalli): There is no guarantee that MediaStreamTrack IDs will be present in\r\n      // SDPs, and even if they are, there is no guarantee that they will be the same as the\r\n      // actual MediaStreamTrack IDs. So, we add or re-write the actual MediaStreamTrack IDs\r\n      // to the assigned m= sections here.\r\n      var assignedTransceivers = activeTransceivers.filter(function (_ref6) {\r\n        var mid = _ref6.mid;\r\n        return mid;\r\n      });\r\n      var midsToTrackIds = new Map(assignedTransceivers.map(function (_ref7) {\r\n        var mid = _ref7.mid,\r\n            sender = _ref7.sender;\r\n        return [mid, _this10._getMediaTrackSenderId(sender.track.id)];\r\n      }));\r\n      var sdp1 = unifiedPlanAddOrRewriteTrackIds(description.sdp, midsToTrackIds);\r\n\r\n      // NOTE(mmalavalli): Chrome and Safari do not apply the offer until they get an answer.\r\n      // So, we add or re-write the actual MediaStreamTrack IDs to the unassigned m= sections here.\r\n      var unassignedTransceivers = activeTransceivers.filter(function (_ref8) {\r\n        var mid = _ref8.mid;\r\n        return !mid;\r\n      });\r\n      var newTrackIdsByKind = new Map(['audio', 'video'].map(function (kind) {\r\n        return [kind, unassignedTransceivers.filter(function (_ref9) {\r\n          var sender = _ref9.sender;\r\n          return sender.track.kind === kind;\r\n        }).map(function (_ref10) {\r\n          var sender = _ref10.sender;\r\n          return _this10._getMediaTrackSenderId(sender.track.id);\r\n        })];\r\n      }));\r\n      var sdp2 = unifiedPlanAddOrRewriteNewTrackIds(sdp1, midsToTrackIds, newTrackIdsByKind);\r\n\r\n      return new this._RTCSessionDescription({\r\n        sdp: sdp2,\r\n        type: description.type\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Rollback and apply the given offer.\r\n     * @private\r\n     * @param {RTCSessionDescriptionInit} offer\r\n     * @returns {Promise<void>}\r\n     */\r\n\r\n  }, {\r\n    key: '_rollbackAndApplyOffer',\r\n    value: function _rollbackAndApplyOffer(offer) {\r\n      var _this11 = this;\r\n\r\n      return this._setLocalDescription({ type: 'rollback' }).then(function () {\r\n        return _this11._setLocalDescription(offer);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Set a local description on the {@link PeerConnectionV2}.\r\n     * @private\r\n     * @param {RTCSessionDescription|RTCSessionDescriptionInit} description\r\n     * @returns {Promise<void>}\r\n     */\r\n\r\n  }, {\r\n    key: '_setLocalDescription',\r\n    value: function _setLocalDescription(description) {\r\n      var _this12 = this;\r\n\r\n      if (description.type !== 'rollback' && this._shouldApplyDtx) {\r\n        description = new this._RTCSessionDescription({\r\n          sdp: enableDtxForOpus(description.sdp),\r\n          type: description.type\r\n        });\r\n      }\r\n      return this._peerConnection.setLocalDescription(description).catch(function (error) {\r\n        _this12._log.warn('Calling setLocalDescription with an RTCSessionDescription of type \"' + description.type + '\" failed with the error \"' + error.message + '\".');\r\n\r\n        var errorToThrow = new MediaClientLocalDescFailedError();\r\n        var publishWarning = {\r\n          message: 'Calling setLocalDescription with an RTCSessionDescription of type \"' + description.type + '\" failed',\r\n          code: errorToThrow.code,\r\n          error: error\r\n        };\r\n\r\n        if (description.sdp) {\r\n          _this12._log.warn('The SDP was ' + description.sdp);\r\n          publishWarning.sdp = description.sdp;\r\n        }\r\n        _this12._publishMediaWarning(publishWarning);\r\n        throw errorToThrow;\r\n      }).then(function () {\r\n        if (description.type !== 'rollback') {\r\n          _this12._localDescription = _this12._isUnifiedPlan ? _this12._addOrRewriteLocalTrackIds(description) : description;\r\n\r\n          // NOTE(mmalavalli): In order for this feature to be backward compatible with older\r\n          // SDK versions which to not support opus DTX, we append \"usedtx=1\" to the local SDP\r\n          // only while applying it. We will not send it over the wire to prevent inadvertent\r\n          // enabling of opus DTX in older SDKs. Newer SDKs will append \"usedtx=1\" by themselves\r\n          // if the developer has requested opus DTX to be enabled. (JSDK-3063)\r\n          if (_this12._shouldApplyDtx) {\r\n            _this12._localDescription = new _this12._RTCSessionDescription({\r\n              sdp: enableDtxForOpus(_this12._localDescription.sdp, []),\r\n              type: _this12._localDescription.type\r\n            });\r\n          }\r\n\r\n          _this12._localCandidates = [];\r\n          if (description.type === 'offer') {\r\n            _this12._descriptionRevision++;\r\n          } else if (description.type === 'answer') {\r\n            _this12._lastStableDescriptionRevision = _this12._descriptionRevision;\r\n            negotiationCompleted(_this12);\r\n          }\r\n          _this12._localUfrag = getUfrag(description);\r\n          _this12.emit('description', _this12.getState());\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Set a remote RTCSessionDescription on the {@link PeerConnectionV2}.\r\n     * @private\r\n     * @param {RTCSessionDescriptionInit} description\r\n     * @returns {Promise<void>}\r\n     */\r\n\r\n  }, {\r\n    key: '_setRemoteDescription',\r\n    value: function _setRemoteDescription(description) {\r\n      var _this13 = this;\r\n\r\n      if (description.sdp) {\r\n        if (!this._isRTCRtpSenderParamsSupported) {\r\n          description.sdp = this._setBitrateParameters(description.sdp, isFirefox ? 'TIAS' : 'AS', this._encodingParameters.maxAudioBitrate, this._encodingParameters.maxVideoBitrate);\r\n        }\r\n        description.sdp = this._setCodecPreferences(description.sdp, this._preferredAudioCodecs, this._preferredVideoCodecs);\r\n\r\n        if (this._shouldApplyDtx) {\r\n          description.sdp = enableDtxForOpus(description.sdp);\r\n        } else {\r\n          // NOTE(mmalavalli): Remove \"usedtx=1\" from opus's fmtp line if present\r\n          // since DTX is disabled.\r\n          description.sdp = enableDtxForOpus(description.sdp, []);\r\n        }\r\n\r\n        if (isFirefox) {\r\n          // NOTE(mroberts): Do this to reduce our MediaStream count in Firefox. By\r\n          // mapping MediaStream IDs in the SDP to \"-\", we ensure the \"track\" event\r\n          // doesn't include any new MediaStreams in Firefox. Its `streams` member\r\n          // will always be the empty Array.\r\n          description.sdp = filterOutMediaStreamIds(description.sdp);\r\n        }\r\n        if (!this._peerConnection.remoteDescription) {\r\n          this._isIceLite = /a=ice-lite/.test(description.sdp);\r\n        }\r\n      }\r\n      description = new this._RTCSessionDescription(description);\r\n      // eslint-disable-next-line consistent-return\r\n      return Promise.resolve().then(function () {\r\n        // NOTE(syerrapragada): VMS does not support H264 simulcast. So,\r\n        // unset simulcast for sections in local offer where corresponding\r\n        // sections in answer doesn't have vp8 as preferred codec and reapply offer.\r\n        if (description.type === 'answer' && _this13._shouldApplySimulcast) {\r\n          var sdpWithoutSimulcastForNonVP8MediaSections = _this13._revertSimulcastForNonVP8MediaSections(_this13._localDescription.sdp, _this13._localDescriptionWithoutSimulcast.sdp, description.sdp);\r\n          if (sdpWithoutSimulcastForNonVP8MediaSections !== _this13._localDescription.sdp) {\r\n            return _this13._rollbackAndApplyOffer({\r\n              type: _this13._localDescription.type,\r\n              sdp: sdpWithoutSimulcastForNonVP8MediaSections\r\n            });\r\n          }\r\n        }\r\n      }).then(function () {\r\n        return _this13._peerConnection.setRemoteDescription(description);\r\n      }).then(function () {\r\n        if (description.type === 'answer') {\r\n          if (_this13._isRestartingIce) {\r\n            _this13._log.debug('An ICE restart was in-progress and is now completed');\r\n            _this13._isRestartingIce = false;\r\n          }\r\n          negotiationCompleted(_this13);\r\n        }\r\n      }, function (error) {\r\n        _this13._log.warn('Calling setRemoteDescription with an RTCSessionDescription of type \"' + description.type + '\" failed with the error \"' + error.message + '\".');\r\n        if (description.sdp) {\r\n          _this13._log.warn('The SDP was ' + description.sdp);\r\n        }\r\n        throw error;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Update the {@link PeerConnectionV2}'s description.\r\n     * @private\r\n     * @param {RTCSessionDescriptionInit} description\r\n     * @returns {Promise<void>}\r\n     */\r\n\r\n  }, {\r\n    key: '_updateDescription',\r\n    value: function _updateDescription(description) {\r\n      var _this14 = this;\r\n\r\n      switch (description.type) {\r\n        case 'answer':\r\n        case 'pranswer':\r\n          if (description.revision !== this._descriptionRevision || this._peerConnection.signalingState !== 'have-local-offer') {\r\n            return Promise.resolve();\r\n          }\r\n          this._descriptionRevision = description.revision;\r\n          break;\r\n        case 'close':\r\n          return this._close();\r\n        case 'create-offer':\r\n          if (description.revision <= this._lastStableDescriptionRevision) {\r\n            return Promise.resolve();\r\n          } else if (this._needsAnswer) {\r\n            this._queuedDescription = description;\r\n            return Promise.resolve();\r\n          }\r\n          this._descriptionRevision = description.revision;\r\n          return this._offer();\r\n        case 'offer':\r\n          if (description.revision <= this._lastStableDescriptionRevision || this._peerConnection.signalingState === 'closed') {\r\n            return Promise.resolve();\r\n          }\r\n          if (this._peerConnection.signalingState === 'have-local-offer') {\r\n            // NOTE(mpatwardhan): For a peer connection\r\n            // 1) createOffer always generate SDP with `setup:actpass`\r\n            // 2) when remote description is set `setup:active`  - the answer generated selects the dtls role of setup:passive\r\n            // 3) when remote description is set `setup:passive` - the answer generated selects the dtls role of setup:active\r\n            // 4) when remote description is set `setup:actpass` - the answer generated uses the previously negotiated role (if not negotiated previously setup:active is used)\r\n            // This test shows the  behavior: https://github.com/twilio/twilio-webrtc.js/blob/master/test/integration/spec/rtcpeerconnection.js#L936\r\n            // with glare handling (if dtls role was not negotiated before ) the generated answer will set setup:active.\r\n            // we do not want that. lets wait for \"initial negotiation\" before attempting glare handling.\r\n            if (this._needsAnswer && this._lastStableDescriptionRevision === 0) {\r\n              this._queuedDescription = description;\r\n              return Promise.resolve();\r\n            }\r\n            this._descriptionRevision = description.revision;\r\n            return this._handleGlare(description);\r\n          }\r\n          this._descriptionRevision = description.revision;\r\n          return this._answer(description).then(function () {});\r\n        default:\r\n        // Do nothing.\r\n      }\r\n\r\n      // Handle answer or pranswer.\r\n      var revision = description.revision;\r\n      return Promise.resolve().then(function () {\r\n        return _this14._setRemoteDescription(description);\r\n      }).catch(function (error) {\r\n        var errorToThrow = new MediaClientRemoteDescFailedError();\r\n        _this14._publishMediaWarning({\r\n          message: 'Calling setRemoteDescription with an RTCSessionDescription of type \"' + description.type + '\" failed',\r\n          code: errorToThrow.code,\r\n          error: error,\r\n          sdp: description.sdp\r\n        });\r\n        throw errorToThrow;\r\n      }).then(function () {\r\n        _this14._lastStableDescriptionRevision = revision;\r\n        _this14._needsAnswer = false;\r\n        return _this14._checkIceBox(description);\r\n      }).then(function () {\r\n        return _this14._queuedDescription && _this14._updateDescription(_this14._queuedDescription);\r\n      }).then(function () {\r\n        _this14._queuedDescription = null;\r\n        return _this14._maybeReoffer(_this14._peerConnection.localDescription).then(function () {});\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Update the {@link PeerConnectionV2}'s ICE candidates.\r\n     * @private\r\n     * @param {object} iceState\r\n     * @returns {Promise<void>}\r\n     */\r\n\r\n  }, {\r\n    key: '_updateIce',\r\n    value: function _updateIce(iceState) {\r\n      var candidates = this._remoteCandidates.update(iceState);\r\n      return this._addIceCandidates(candidates);\r\n    }\r\n\r\n    /**\r\n     * Add a {@link DataTrackSender} to the {@link PeerConnectionV2}.\r\n     * @param {DataTrackSender} dataTrackSender\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: 'addDataTrackSender',\r\n    value: function addDataTrackSender(dataTrackSender) {\r\n      if (this._dataChannels.has(dataTrackSender)) {\r\n        return;\r\n      }\r\n      try {\r\n        var dataChannelDict = {\r\n          ordered: dataTrackSender.ordered\r\n        };\r\n        if (dataTrackSender.maxPacketLifeTime !== null) {\r\n          dataChannelDict.maxPacketLifeTime = dataTrackSender.maxPacketLifeTime;\r\n        }\r\n        if (dataTrackSender.maxRetransmits !== null) {\r\n          dataChannelDict.maxRetransmits = dataTrackSender.maxRetransmits;\r\n        }\r\n        var dataChannel = this._peerConnection.createDataChannel(dataTrackSender.id, dataChannelDict);\r\n        dataTrackSender.addDataChannel(dataChannel);\r\n        this._dataChannels.set(dataTrackSender, dataChannel);\r\n      } catch (error) {\r\n        this._log.warn('Error creating an RTCDataChannel for DataTrack \"' + dataTrackSender.id + '\": ' + error.message);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Add the {@link MediaTrackSender} to the {@link PeerConnectionV2}.\r\n     * @param {MediaTrackSender} mediaTrackSender\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: 'addMediaTrackSender',\r\n    value: function addMediaTrackSender(mediaTrackSender) {\r\n      if (this._peerConnection.signalingState === 'closed' || this._rtpSenders.has(mediaTrackSender)) {\r\n        return;\r\n      }\r\n      var sender = void 0;\r\n      if (this._localMediaStream) {\r\n        this._localMediaStream.addTrack(mediaTrackSender.track);\r\n        sender = this._peerConnection.addTrack(mediaTrackSender.track, this._localMediaStream);\r\n      } else {\r\n        var transceiver = this._addOrUpdateTransceiver(mediaTrackSender.track);\r\n        sender = transceiver.sender;\r\n      }\r\n      mediaTrackSender.addSender(sender);\r\n      this._rtpSenders.set(mediaTrackSender, sender);\r\n    }\r\n\r\n    /**\r\n     * Close the {@link PeerConnectionV2}.\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: 'close',\r\n    value: function close() {\r\n      if (this._close()) {\r\n        this._descriptionRevision++;\r\n        this._localDescription = { type: 'close' };\r\n        this.emit('description', this.getState());\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Get the {@link DataTrackReceiver}s and the {@link MediaTrackReceivers} on the\r\n     * {@link PeerConnectionV2}.\r\n     * @returns {Array<DataTrackReceiver|MediaTrackReceiver>} trackReceivers\r\n     */\r\n\r\n  }, {\r\n    key: 'getTrackReceivers',\r\n    value: function getTrackReceivers() {\r\n      return Array.from(this._dataTrackReceivers).concat(Array.from(this._mediaTrackReceivers));\r\n    }\r\n\r\n    /**\r\n     * Get the {@link PeerConnectionV2}'s state (specifically, its description).\r\n     * @returns {?object}\r\n     */\r\n\r\n  }, {\r\n    key: 'getState',\r\n    value: function getState() {\r\n      if (!this._localDescription) {\r\n        return null;\r\n      }\r\n\r\n      // NOTE(mpatwardhan): Return most recent localDescription. If the most recent local description is an\r\n      // answer, and this method is called for sending a \"sync\" message while the next remote offer is being processed,\r\n      // we need to send the most recent stable description revision instead of the current description revision,\r\n      // which is supposed to be for the next local answer.\r\n      var localDescriptionRevision = this._localDescription.type === 'answer' ? this._lastStableDescriptionRevision : this._descriptionRevision;\r\n      var localDescription = {\r\n        type: this._localDescription.type,\r\n        revision: localDescriptionRevision\r\n      };\r\n      if (this._localDescription.sdp) {\r\n        localDescription.sdp = this._localDescription.sdp;\r\n      }\r\n      return {\r\n        description: localDescription,\r\n        id: this.id\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Create an offer and set it on the {@link PeerConnectionV2}.\r\n     * @returns {Promise<void>}\r\n     */\r\n\r\n  }, {\r\n    key: 'offer',\r\n    value: function offer() {\r\n      var _this15 = this;\r\n\r\n      if (this._needsAnswer || this._isRestartingIce) {\r\n        this._shouldOffer = true;\r\n        return Promise.resolve();\r\n      }\r\n\r\n      return this.bracket('offering', function (key) {\r\n        _this15.transition('updating', key);\r\n        var promise = _this15._needsAnswer || _this15._isRestartingIce ? Promise.resolve() : _this15._offer();\r\n        return promise.then(function () {\r\n          _this15.tryTransition('open', key);\r\n        }, function (error) {\r\n          _this15.tryTransition('open', key);\r\n          throw error;\r\n        });\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Remove a {@link DataTrackSender} from the {@link PeerConnectionV2}.\r\n     * @param {DataTrackSender} dataTrackSender\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: 'removeDataTrackSender',\r\n    value: function removeDataTrackSender(dataTrackSender) {\r\n      var dataChannel = this._dataChannels.get(dataTrackSender);\r\n      if (dataChannel) {\r\n        dataTrackSender.removeDataChannel(dataChannel);\r\n        this._dataChannels.delete(dataTrackSender);\r\n        dataChannel.close();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Remove the {@link MediaTrackSender} from the {@link PeerConnectionV2}.\r\n     * @param {MediaTrackSender} mediaTrackSender\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: 'removeMediaTrackSender',\r\n    value: function removeMediaTrackSender(mediaTrackSender) {\r\n      var sender = this._rtpSenders.get(mediaTrackSender);\r\n      if (!sender) {\r\n        return;\r\n      }\r\n      if (this._peerConnection.signalingState !== 'closed') {\r\n        this._peerConnection.removeTrack(sender);\r\n      }\r\n      if (this._localMediaStream) {\r\n        this._localMediaStream.removeTrack(mediaTrackSender.track);\r\n      }\r\n      mediaTrackSender.removeSender(sender);\r\n      this._rtpSenders.delete(mediaTrackSender);\r\n    }\r\n\r\n    /**\r\n     * Set the RTCConfiguration on the underlying RTCPeerConnection.\r\n     * @param {RTCConfiguration} configuration\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: 'setConfiguration',\r\n    value: function setConfiguration(configuration) {\r\n      if (typeof this._peerConnection.setConfiguration === 'function') {\r\n        this._peerConnection.setConfiguration(getConfiguration(configuration));\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Set the ICE reconnect timeout period.\r\n     * @param {number} period - Period in milliseconds.\r\n     * @returns {this}\r\n     */\r\n\r\n  }, {\r\n    key: 'setIceReconnectTimeout',\r\n    value: function setIceReconnectTimeout(period) {\r\n      this._iceReconnectTimeout.setDelay(period);\r\n      this._log.debug('Updated ICE reconnection timeout period:', this._iceReconnectTimeout.delay);\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Update the {@link PeerConnectionV2}.\r\n     * @param {object} peerConnectionState\r\n     * @returns {Promise<void>}\r\n     */\r\n\r\n  }, {\r\n    key: 'update',\r\n    value: function update(peerConnectionState) {\r\n      var _this16 = this;\r\n\r\n      return this.bracket('updating', function (key) {\r\n        if (_this16.state === 'closed') {\r\n          return Promise.resolve();\r\n        }\r\n\r\n        _this16.transition('updating', key);\r\n\r\n        var updates = [];\r\n\r\n        if (peerConnectionState.ice) {\r\n          updates.push(_this16._updateIce(peerConnectionState.ice));\r\n        }\r\n\r\n        if (peerConnectionState.description) {\r\n          updates.push(_this16._updateDescription(peerConnectionState.description));\r\n        }\r\n\r\n        return Promise.all(updates).then(function () {\r\n          _this16.tryTransition('open', key);\r\n        }, function (error) {\r\n          _this16.tryTransition('open', key);\r\n          throw error;\r\n        });\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Get the {@link PeerConnectionV2}'s media statistics.\r\n     * @returns {Promise<StandardizedStatsResponse>}\r\n     */\r\n\r\n  }, {\r\n    key: 'getStats',\r\n    value: function getStats() {\r\n      var _this17 = this;\r\n\r\n      return getStatistics(this._peerConnection).then(function (response) {\r\n        return rewriteTrackIds(_this17, response);\r\n      });\r\n    }\r\n  }, {\r\n    key: 'connectionState',\r\n    get: function get() {\r\n      return this.iceConnectionState === 'failed' ? 'failed' : this._peerConnection.connectionState || this.iceConnectionState;\r\n    }\r\n\r\n    /**\r\n     * The {@link PeerConnectionV2}'s underlying RTCPeerConnection's\r\n     * RTCIceConnectionState.\r\n     * @property {RTCIceConnectionState}\r\n     */\r\n\r\n  }, {\r\n    key: 'iceConnectionState',\r\n    get: function get() {\r\n      return this._isIceConnectionInactive && this._peerConnection.iceConnectionState === 'disconnected' || this._iceGatheringFailed ? 'failed' : this._peerConnection.iceConnectionState;\r\n    }\r\n\r\n    /**\r\n     * Whether the {@link PeerConnectionV2} has negotiated or is in the process\r\n     * of negotiating the application m= section.\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: 'isApplicationSectionNegotiated',\r\n    get: function get() {\r\n      if (this._peerConnection.signalingState !== 'closed') {\r\n        // accessing .localDescription in 'closed' state causes it throw exceptions.\r\n        return this._peerConnection.localDescription ? getMediaSections(this._peerConnection.localDescription.sdp, 'application').length > 0 : false;\r\n      }\r\n      return true;\r\n    }\r\n  }]);\r\n\r\n  return PeerConnectionV2;\r\n}(StateMachine);\r\n\r\nfunction rewriteLocalTrackId(pcv2, stats) {\r\n  var trackId = pcv2._getMediaTrackSenderId(stats.trackId);\r\n  return Object.assign(stats, { trackId: trackId });\r\n}\r\n\r\nfunction rewriteTrackId(pcv2, stats) {\r\n  var receiver = [].concat(_toConsumableArray(pcv2._mediaTrackReceivers)).find(function (receiver) {\r\n    return receiver.track.id === stats.trackId;\r\n  });\r\n  var trackId = receiver ? receiver.id : null;\r\n  return Object.assign(stats, { trackId: trackId });\r\n}\r\n\r\nfunction rewriteTrackIds(pcv2, response) {\r\n  return Object.assign(response, {\r\n    remoteAudioTrackStats: response.remoteAudioTrackStats.map(function (stats) {\r\n      return rewriteTrackId(pcv2, stats);\r\n    }),\r\n    remoteVideoTrackStats: response.remoteVideoTrackStats.map(function (stats) {\r\n      return rewriteTrackId(pcv2, stats);\r\n    }),\r\n    localAudioTrackStats: response.localAudioTrackStats.map(function (stats) {\r\n      return rewriteLocalTrackId(pcv2, stats);\r\n    }),\r\n    localVideoTrackStats: response.localVideoTrackStats.map(function (stats) {\r\n      return rewriteLocalTrackId(pcv2, stats);\r\n    })\r\n  });\r\n}\r\n\r\n/**\r\n * @event PeerConnectionV2#candidates\r\n * @param {object} candidates\r\n */\r\n\r\n/**\r\n * @event PeerConnectionV2#connectionStateChanged\r\n */\r\n\r\n/**\r\n * @event PeerConnectionV2#description\r\n * @param {object} description\r\n */\r\n\r\n/**\r\n * @event PeerConnectionV2#iceConnectionStateChanged\r\n */\r\n\r\n/**\r\n * @event PeerConnectionV2#trackAdded\r\n * @param {DataTrackReceiver|MediaTrackReceiver} trackReceiver\r\n */\r\n\r\nfunction getUfrag(description) {\r\n  if (description.sdp) {\r\n    var match = description.sdp.match(/^a=ice-ufrag:([a-zA-Z0-9+/]+)/m);\r\n    if (match) {\r\n      return match[1];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction getConfiguration(configuration) {\r\n  return Object.assign({\r\n    bundlePolicy: 'max-bundle',\r\n    rtcpMuxPolicy: 'require'\r\n  }, configuration);\r\n}\r\n\r\n/**\r\n * Whether the MediaStreamTrack of the given RTCRTPSender is a non-ended\r\n * MediaStreamTrack of a given kind.\r\n * @private\r\n * @param {string} kind\r\n * @param {RTCRtpSender} sender\r\n * @return {boolean}\r\n */\r\nfunction isSenderOfKind(kind, sender) {\r\n  var track = sender.track;\r\n  return track && track.kind === kind && track.readyState !== 'ended';\r\n}\r\n\r\n/**\r\n * Preferred codecs.\r\n * @typedef {object} PreferredCodecs\r\n * @property {Array<AudioCodec>} audio\r\n * @property {Array<VideoCodec>} video\r\n */\r\n\r\nfunction filterOutMediaStreamIds(sdp) {\r\n  return sdp.replace(/a=msid:[^ ]+ /g, 'a=msid:- ');\r\n}\r\n\r\n/**\r\n * Whether an RTCRtpTransceiver can be recycled.\r\n * @param {RTCRtpTransceiver} transceiver\r\n * @returns {boolean}\r\n */\r\nfunction shouldRecycleTransceiver(transceiver, pcv2) {\r\n  return !transceiver.stopped && !pcv2._replaceTrackPromises.has(transceiver) && ['inactive', 'recvonly'].includes(transceiver.direction);\r\n}\r\n\r\n/**\r\n * Take a recycled RTCRtpTransceiver if available.\r\n * @param {PeerConnectionV2} pcv2\r\n * @param {Track.Kind} kind\r\n * @returns {?RTCRtpTransceiver}\r\n */\r\nfunction takeRecycledTransceiver(pcv2, kind) {\r\n  var preferredCodecs = {\r\n    audio: pcv2._preferredAudioCodecs.map(function (_ref11) {\r\n      var codec = _ref11.codec;\r\n      return codec.toLowerCase();\r\n    }),\r\n    video: pcv2._preferredVideoCodecs.map(function (_ref12) {\r\n      var codec = _ref12.codec;\r\n      return codec.toLowerCase();\r\n    })\r\n  }[kind];\r\n\r\n  var recycledTransceivers = pcv2._recycledTransceivers[kind];\r\n  var localCodec = preferredCodecs.find(function (codec) {\r\n    return pcv2._localCodecs.has(codec);\r\n  });\r\n  if (!localCodec) {\r\n    return recycledTransceivers.shift();\r\n  }\r\n\r\n  var transceiver = recycledTransceivers.find(function (transceiver) {\r\n    var remoteCodecMap = pcv2._remoteCodecMaps.get(transceiver.mid);\r\n    return remoteCodecMap && remoteCodecMap.has(localCodec);\r\n  });\r\n\r\n  if (transceiver) {\r\n    recycledTransceivers.splice(recycledTransceivers.indexOf(transceiver), 1);\r\n  }\r\n  return transceiver;\r\n}\r\n\r\n/**\r\n * Update the set of locally supported {@link Codec}s.\r\n * @param pcv2\r\n * @returns {void}\r\n */\r\nfunction updateLocalCodecs(pcv2) {\r\n  var description = pcv2._peerConnection.localDescription;\r\n  if (!description) {\r\n    return;\r\n  }\r\n  getMediaSections(description.sdp).forEach(function (section) {\r\n    var codecMap = createCodecMapForMediaSection(section);\r\n    codecMap.forEach(function (pts, codec) {\r\n      return pcv2._localCodecs.add(codec);\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Update the {@link Codec} maps for all m= sections in the remote {@link RTCSessionDescription}s.\r\n * @param {PeerConnectionV2} pcv2\r\n * @returns {void}\r\n */\r\nfunction updateRemoteCodecMaps(pcv2) {\r\n  var description = pcv2._peerConnection.remoteDescription;\r\n  if (!description) {\r\n    return;\r\n  }\r\n  getMediaSections(description.sdp).forEach(function (section) {\r\n    var mid = section.match(/^a=mid:(.+)$/m)[1];\r\n    var codecMap = createCodecMapForMediaSection(section);\r\n    pcv2._remoteCodecMaps.set(mid, codecMap);\r\n  });\r\n}\r\n\r\n/**\r\n * Update the list of recycled RTCRtpTransceivers.\r\n * @param {PeerConnectionV2} pcv2\r\n */\r\nfunction updateRecycledTransceivers(pcv2) {\r\n  pcv2._recycledTransceivers.audio = [];\r\n  pcv2._recycledTransceivers.video = [];\r\n  pcv2._peerConnection.getTransceivers().forEach(function (transceiver) {\r\n    if (shouldRecycleTransceiver(transceiver, pcv2)) {\r\n      var track = transceiver.receiver.track;\r\n      pcv2._recycledTransceivers[track.kind].push(transceiver);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Perform certain updates after an SDP negotiation is completed.\r\n * @param {PeerConnectionV2} pcv2\r\n * @returns {void}\r\n */\r\nfunction negotiationCompleted(pcv2) {\r\n  if (pcv2._isUnifiedPlan) {\r\n    updateRecycledTransceivers(pcv2);\r\n    updateLocalCodecs(pcv2);\r\n    updateRemoteCodecMaps(pcv2);\r\n  }\r\n  if (pcv2._isRTCRtpSenderParamsSupported) {\r\n    updateEncodingParameters(pcv2);\r\n  }\r\n}\r\n\r\n/**\r\n * Update the RTCRtpEncodingParameters of all active RTCRtpSenders.\r\n * @param {PeerConnectionV2} pcv2\r\n * @returns {void}\r\n */\r\nfunction updateEncodingParameters(pcv2) {\r\n  var _pcv2$_encodingParame = pcv2._encodingParameters,\r\n      maxAudioBitrate = _pcv2$_encodingParame.maxAudioBitrate,\r\n      maxVideoBitrate = _pcv2$_encodingParame.maxVideoBitrate;\r\n\r\n\r\n  var maxBitrates = new Map([['audio', maxAudioBitrate], ['video', maxVideoBitrate]]);\r\n\r\n  pcv2._peerConnection.getSenders().filter(function (sender) {\r\n    return sender.track;\r\n  }).forEach(function (sender) {\r\n    var maxBitrate = maxBitrates.get(sender.track.kind);\r\n    var params = sender.getParameters();\r\n\r\n    if (maxBitrate === null || maxBitrate === 0) {\r\n      removeMaxBitrate(params);\r\n    } else if (pcv2._isChromeScreenShareTrack(sender.track)) {\r\n      // NOTE(mpatwardhan): Sometimes (JSDK-2557) chrome does not send any bytes on screen track if MaxBitRate is set on it via setParameters,\r\n      // To workaround this issue we will not apply maxBitrate if the track appears to be a screen share track created by chrome\r\n      pcv2._log.warn('Not setting maxBitrate for ' + sender.track.kind + ' Track ' + sender.track.id + ' because it appears to be screen share track: ' + sender.track.label);\r\n    } else {\r\n      setMaxBitrate(params, maxBitrate);\r\n    }\r\n\r\n    if (!isFirefox && pcv2._enableDscp && params.encodings.length > 0) {\r\n      // NOTE(mmalavalli): \"networkPriority\" is a per-sender property and not\r\n      // a per-encoding-layer property. So, we set the value only on the first\r\n      // encoding layer. Any attempt to set the value on subsequent encoding\r\n      // layers (in the case of simulcast) will result in the Promise returned\r\n      // by RTCRtpSender.setParameters() being rejected.\r\n      params.encodings[0].networkPriority = 'high';\r\n    }\r\n\r\n    sender.setParameters(params).catch(function (error) {\r\n      pcv2._log.warn('Error while setting encodings parameters for ' + sender.track.kind + ' Track ' + sender.track.id + ': ' + (error.message || error.name));\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Remove maxBitrate from the RTCRtpSendParameters' encodings.\r\n * @param {RTCRtpSendParameters} params\r\n * @returns {void}\r\n */\r\nfunction removeMaxBitrate(params) {\r\n  if (Array.isArray(params.encodings)) {\r\n    params.encodings.forEach(function (encoding) {\r\n      return delete encoding.maxBitrate;\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Set the given maxBitrate in the RTCRtpSendParameters' encodings.\r\n * @param {RTCRtpSendParameters} params\r\n * @param {number} maxBitrate\r\n * @returns {void}\r\n */\r\nfunction setMaxBitrate(params, maxBitrate) {\r\n  if (isFirefox) {\r\n    params.encodings = [{ maxBitrate: maxBitrate }];\r\n  } else {\r\n    params.encodings.forEach(function (encoding) {\r\n      encoding.maxBitrate = maxBitrate;\r\n    });\r\n  }\r\n}\r\nmodule.exports = PeerConnectionV2;"]},"metadata":{},"sourceType":"script"}