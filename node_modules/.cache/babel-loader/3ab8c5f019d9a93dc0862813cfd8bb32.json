{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * @classdesc A Media represents a metadata information for the media upload\r\n * @property {String} sid - The server-assigned unique identifier for Media\r\n * @property {String} serviceSid - Service instance id which Media belongs/uploaded to\r\n * @property {Date} dateCreated - When the Media was created\r\n * @property {Date} dateUpdated - When the Media was updated\r\n * @property {Number} size - Size of media, bytes\r\n * @property {String} contentType - content type of media\r\n * @property {String} fileName - file name, if present, null otherwise\r\n */\n\nclass Media {\n  constructor(config, network, data) {\n    this.config = config;\n    this.network = network;\n\n    this._update(data);\n  }\n\n  get sid() {\n    return this.state.sid;\n  }\n\n  get serviceSid() {\n    return this.state.serviceSid;\n  }\n\n  get dateCreated() {\n    return this.state.dateCreated;\n  }\n\n  get dateUpdated() {\n    return this.state.dateUpdated;\n  }\n\n  get contentType() {\n    return this.state.contentType;\n  }\n\n  get size() {\n    return this.state.size;\n  }\n\n  get fileName() {\n    return this.state.filename;\n  }\n  /**\r\n   * Returns direct content URL to uploaded binary\r\n   * @public\r\n   * @returns {Promise<string>}\r\n   */\n\n\n  async getContentUrl() {\n    let response = await this.network.get(`${this.config.baseUrl}/${this.sid}`);\n\n    this._update(response.body);\n\n    return Promise.resolve(this.state.contentDirectUrl);\n  }\n\n  _update(data) {\n    this.state = {\n      sid: data.sid,\n      serviceSid: data.service_sid,\n      channelSid: data.channel_sid,\n      messageSid: data.message_sid,\n      dateCreated: data.date_created ? new Date(data.date_created) : null,\n      dateUpdated: data.date_updated ? new Date(data.date_updated) : null,\n      size: data.size,\n      contentType: data.content_type,\n      url: data.url,\n      contentUrl: data.links.content,\n      contentDirectUrl: data.links.content_direct_temporary,\n      filename: data.filename ? data.filename : null\n    };\n  }\n\n}\n\nexports.Media = Media;","map":{"version":3,"sources":["C:/Users/USER/Desktop/ARSW III/Twilio/node_modules/twilio-mcs-client/lib/media.js"],"names":["Object","defineProperty","exports","value","Media","constructor","config","network","data","_update","sid","state","serviceSid","dateCreated","dateUpdated","contentType","size","fileName","filename","getContentUrl","response","get","baseUrl","body","Promise","resolve","contentDirectUrl","service_sid","channelSid","channel_sid","messageSid","message_sid","date_created","Date","date_updated","content_type","url","contentUrl","links","content","content_direct_temporary"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,KAAN,CAAY;AACRC,EAAAA,WAAW,CAACC,MAAD,EAASC,OAAT,EAAkBC,IAAlB,EAAwB;AAC/B,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;;AACA,SAAKE,OAAL,CAAaD,IAAb;AACH;;AACM,MAAHE,GAAG,GAAG;AAAE,WAAO,KAAKC,KAAL,CAAWD,GAAlB;AAAwB;;AACtB,MAAVE,UAAU,GAAG;AAAE,WAAO,KAAKD,KAAL,CAAWC,UAAlB;AAA+B;;AACnC,MAAXC,WAAW,GAAG;AAAE,WAAO,KAAKF,KAAL,CAAWE,WAAlB;AAAgC;;AACrC,MAAXC,WAAW,GAAG;AAAE,WAAO,KAAKH,KAAL,CAAWG,WAAlB;AAAgC;;AACrC,MAAXC,WAAW,GAAG;AAAE,WAAO,KAAKJ,KAAL,CAAWI,WAAlB;AAAgC;;AAC5C,MAAJC,IAAI,GAAG;AAAE,WAAO,KAAKL,KAAL,CAAWK,IAAlB;AAAyB;;AAC1B,MAARC,QAAQ,GAAG;AAAE,WAAO,KAAKN,KAAL,CAAWO,QAAlB;AAA6B;AAC9C;AACJ;AACA;AACA;AACA;;;AACuB,QAAbC,aAAa,GAAG;AAClB,QAAIC,QAAQ,GAAG,MAAM,KAAKb,OAAL,CAAac,GAAb,CAAkB,GAAE,KAAKf,MAAL,CAAYgB,OAAQ,IAAG,KAAKZ,GAAI,EAApD,CAArB;;AACA,SAAKD,OAAL,CAAaW,QAAQ,CAACG,IAAtB;;AACA,WAAOC,OAAO,CAACC,OAAR,CAAgB,KAAKd,KAAL,CAAWe,gBAA3B,CAAP;AACH;;AACDjB,EAAAA,OAAO,CAACD,IAAD,EAAO;AACV,SAAKG,KAAL,GAAa;AACTD,MAAAA,GAAG,EAAEF,IAAI,CAACE,GADD;AAETE,MAAAA,UAAU,EAAEJ,IAAI,CAACmB,WAFR;AAGTC,MAAAA,UAAU,EAAEpB,IAAI,CAACqB,WAHR;AAITC,MAAAA,UAAU,EAAEtB,IAAI,CAACuB,WAJR;AAKTlB,MAAAA,WAAW,EAAEL,IAAI,CAACwB,YAAL,GAAoB,IAAIC,IAAJ,CAASzB,IAAI,CAACwB,YAAd,CAApB,GAAkD,IALtD;AAMTlB,MAAAA,WAAW,EAAEN,IAAI,CAAC0B,YAAL,GAAoB,IAAID,IAAJ,CAASzB,IAAI,CAAC0B,YAAd,CAApB,GAAkD,IANtD;AAOTlB,MAAAA,IAAI,EAAER,IAAI,CAACQ,IAPF;AAQTD,MAAAA,WAAW,EAAEP,IAAI,CAAC2B,YART;AASTC,MAAAA,GAAG,EAAE5B,IAAI,CAAC4B,GATD;AAUTC,MAAAA,UAAU,EAAE7B,IAAI,CAAC8B,KAAL,CAAWC,OAVd;AAWTb,MAAAA,gBAAgB,EAAElB,IAAI,CAAC8B,KAAL,CAAWE,wBAXpB;AAYTtB,MAAAA,QAAQ,EAAEV,IAAI,CAACU,QAAL,GAAgBV,IAAI,CAACU,QAArB,GAAgC;AAZjC,KAAb;AAcH;;AAtCO;;AAwCZhB,OAAO,CAACE,KAAR,GAAgBA,KAAhB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * @classdesc A Media represents a metadata information for the media upload\r\n * @property {String} sid - The server-assigned unique identifier for Media\r\n * @property {String} serviceSid - Service instance id which Media belongs/uploaded to\r\n * @property {Date} dateCreated - When the Media was created\r\n * @property {Date} dateUpdated - When the Media was updated\r\n * @property {Number} size - Size of media, bytes\r\n * @property {String} contentType - content type of media\r\n * @property {String} fileName - file name, if present, null otherwise\r\n */\r\nclass Media {\r\n    constructor(config, network, data) {\r\n        this.config = config;\r\n        this.network = network;\r\n        this._update(data);\r\n    }\r\n    get sid() { return this.state.sid; }\r\n    get serviceSid() { return this.state.serviceSid; }\r\n    get dateCreated() { return this.state.dateCreated; }\r\n    get dateUpdated() { return this.state.dateUpdated; }\r\n    get contentType() { return this.state.contentType; }\r\n    get size() { return this.state.size; }\r\n    get fileName() { return this.state.filename; }\r\n    /**\r\n     * Returns direct content URL to uploaded binary\r\n     * @public\r\n     * @returns {Promise<string>}\r\n     */\r\n    async getContentUrl() {\r\n        let response = await this.network.get(`${this.config.baseUrl}/${this.sid}`);\r\n        this._update(response.body);\r\n        return Promise.resolve(this.state.contentDirectUrl);\r\n    }\r\n    _update(data) {\r\n        this.state = {\r\n            sid: data.sid,\r\n            serviceSid: data.service_sid,\r\n            channelSid: data.channel_sid,\r\n            messageSid: data.message_sid,\r\n            dateCreated: data.date_created ? new Date(data.date_created) : null,\r\n            dateUpdated: data.date_updated ? new Date(data.date_updated) : null,\r\n            size: data.size,\r\n            contentType: data.content_type,\r\n            url: data.url,\r\n            contentUrl: data.links.content,\r\n            contentDirectUrl: data.links.content_direct_temporary,\r\n            filename: data.filename ? data.filename : null\r\n        };\r\n    }\r\n}\r\nexports.Media = Media;\r\n"]},"metadata":{},"sourceType":"script"}