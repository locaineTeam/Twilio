{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChannelDescriptor = void 0;\n\nvar logger_1 = require(\"./logger\");\n\nvar util_1 = require(\"./util\");\n\nvar log = logger_1.Logger.scope('ChannelDescriptor');\n/**\n * Contains channel information.\n * Unlike {@link Channel}, this information won't be updated in realtime.\n * To have a fresh data, user should query channel descriptors again.\n *\n * @property {any} attributes - The Channel's custom attributes\n * @property {String} createdBy - The identity of the User that created Channel\n * @property {Date} dateCreated - The Date Channel was created\n * @property {Date} dateUpdated - The Date Channel was last updated\n * @property {String} friendlyName - The Channel's name\n * @property {Boolean} isPrivate - Whether the channel is private (as opposed to public)\n * @property {Number} lastConsumedMessageIndex - Index of the last Message the User has consumed in Channel\n * @property {Number} membersCount Number of members in a channel\n * @property {Number} messagesCount Number of messages in a channel\n * @property {String} sid - The Channel's unique system identifier\n * @property {Channel#Status} status - The Channel's status\n * @property {Channel#Type} type - The Channel's type\n * @property {String} uniqueName - The Channel's unique name\n */\n\nvar ChannelDescriptor = function () {\n  /**\n   * @param {Client} client Chat client instance\n   * @param {Object} descriptor Channel descriptor data object\n   * @private\n   */\n  function ChannelDescriptor(client, descriptor) {\n    (0, _classCallCheck3.default)(this, ChannelDescriptor);\n    this.client = client;\n    this.descriptor = descriptor;\n\n    if (descriptor.sid) {\n      this.sid = descriptor.sid;\n      this.channel = descriptor.sid + '.channel';\n    } else {\n      this.sid = descriptor.channel_sid;\n      this.channel = descriptor.channel_sid + '.channel';\n    }\n\n    this.uniqueName = descriptor.unique_name;\n    this.friendlyName = descriptor.friendly_name;\n    this.attributes = util_1.parseAttributes(descriptor.attributes, 'Failed to parse channel attributes', log);\n    this.createdBy = descriptor.created_by;\n    this.dateCreated = util_1.parseTime(descriptor.date_created);\n    this.dateUpdated = util_1.parseTime(descriptor.date_updated);\n    this.messagesCount = descriptor.messages_count;\n    this.membersCount = descriptor.members_count;\n    this.type = descriptor.type;\n    this.isPrivate = descriptor.type == 'private' ? true : false;\n    this.lastConsumedMessageIndex = descriptor.last_consumed_message_index;\n\n    if (descriptor.notification_level) {\n      this.notificationLevel = descriptor.notification_level;\n    }\n\n    if (descriptor.status) {\n      this.status = descriptor.status;\n    } else {\n      this.status = 'unknown';\n    }\n  }\n  /**\n   * Get channel object from descriptor.\n   * @returns {Promise<Channel>}\n   */\n\n\n  (0, _createClass3.default)(ChannelDescriptor, [{\n    key: \"getChannel\",\n    value: function getChannel() {\n      return this.client.getChannelBySid(this.sid);\n    }\n  }]);\n  return ChannelDescriptor;\n}();\n\nexports.ChannelDescriptor = ChannelDescriptor;","map":{"version":3,"sources":["C:/Users/USER/Desktop/ARSW III/Twilio/node_modules/twilio-chat/browser/channeldescriptor.js"],"names":["_classCallCheck2","require","_classCallCheck3","_interopRequireDefault","_createClass2","_createClass3","obj","__esModule","default","Object","defineProperty","exports","value","ChannelDescriptor","logger_1","util_1","log","Logger","scope","client","descriptor","sid","channel","channel_sid","uniqueName","unique_name","friendlyName","friendly_name","attributes","parseAttributes","createdBy","created_by","dateCreated","parseTime","date_created","dateUpdated","date_updated","messagesCount","messages_count","membersCount","members_count","type","isPrivate","lastConsumedMessageIndex","last_consumed_message_index","notification_level","notificationLevel","status","key","getChannel","getChannelBySid"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChannelDescriptor = void 0;\nvar logger_1 = require(\"./logger\");\nvar util_1 = require(\"./util\");\nvar log = logger_1.Logger.scope('ChannelDescriptor');\n/**\n * Contains channel information.\n * Unlike {@link Channel}, this information won't be updated in realtime.\n * To have a fresh data, user should query channel descriptors again.\n *\n * @property {any} attributes - The Channel's custom attributes\n * @property {String} createdBy - The identity of the User that created Channel\n * @property {Date} dateCreated - The Date Channel was created\n * @property {Date} dateUpdated - The Date Channel was last updated\n * @property {String} friendlyName - The Channel's name\n * @property {Boolean} isPrivate - Whether the channel is private (as opposed to public)\n * @property {Number} lastConsumedMessageIndex - Index of the last Message the User has consumed in Channel\n * @property {Number} membersCount Number of members in a channel\n * @property {Number} messagesCount Number of messages in a channel\n * @property {String} sid - The Channel's unique system identifier\n * @property {Channel#Status} status - The Channel's status\n * @property {Channel#Type} type - The Channel's type\n * @property {String} uniqueName - The Channel's unique name\n */\n\nvar ChannelDescriptor = function () {\n    /**\n     * @param {Client} client Chat client instance\n     * @param {Object} descriptor Channel descriptor data object\n     * @private\n     */\n    function ChannelDescriptor(client, descriptor) {\n        (0, _classCallCheck3.default)(this, ChannelDescriptor);\n\n        this.client = client;\n        this.descriptor = descriptor;\n        if (descriptor.sid) {\n            this.sid = descriptor.sid;\n            this.channel = descriptor.sid + '.channel';\n        } else {\n            this.sid = descriptor.channel_sid;\n            this.channel = descriptor.channel_sid + '.channel';\n        }\n        this.uniqueName = descriptor.unique_name;\n        this.friendlyName = descriptor.friendly_name;\n        this.attributes = util_1.parseAttributes(descriptor.attributes, 'Failed to parse channel attributes', log);\n        this.createdBy = descriptor.created_by;\n        this.dateCreated = util_1.parseTime(descriptor.date_created);\n        this.dateUpdated = util_1.parseTime(descriptor.date_updated);\n        this.messagesCount = descriptor.messages_count;\n        this.membersCount = descriptor.members_count;\n        this.type = descriptor.type;\n        this.isPrivate = descriptor.type == 'private' ? true : false;\n        this.lastConsumedMessageIndex = descriptor.last_consumed_message_index;\n        if (descriptor.notification_level) {\n            this.notificationLevel = descriptor.notification_level;\n        }\n        if (descriptor.status) {\n            this.status = descriptor.status;\n        } else {\n            this.status = 'unknown';\n        }\n    }\n    /**\n     * Get channel object from descriptor.\n     * @returns {Promise<Channel>}\n     */\n\n\n    (0, _createClass3.default)(ChannelDescriptor, [{\n        key: \"getChannel\",\n        value: function getChannel() {\n            return this.client.getChannelBySid(this.sid);\n        }\n    }]);\n    return ChannelDescriptor;\n}();\n\nexports.ChannelDescriptor = ChannelDescriptor;"]},"metadata":{},"sourceType":"script"}