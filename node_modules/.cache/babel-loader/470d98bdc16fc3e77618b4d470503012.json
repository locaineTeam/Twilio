{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EntitiesCache = void 0;\n/**\r\n * Container for entities which are known by the client\r\n * It's needed for deduplication when client obtain the same object several times\r\n */\n\nclass EntitiesCache {\n  constructor() {\n    this.names = new Map();\n    this.entities = new Map();\n  }\n\n  store(entity) {\n    let stored = this.entities.get(entity.sid);\n\n    if (stored) {\n      return stored;\n    }\n\n    this.entities.set(entity.sid, entity);\n\n    if (entity.uniqueName) {\n      this.names.set(entity.type + '::' + entity.uniqueName, entity.sid);\n    }\n\n    return entity;\n  }\n\n  getResolved(id, type) {\n    let resolvedSid = this.names.get(type + '::' + id);\n    return resolvedSid ? this.entities.get(resolvedSid) : null;\n  }\n\n  get(id, type) {\n    return this.entities.get(id) || this.getResolved(id, type) || null;\n  }\n\n  remove(sid) {\n    let cached = this.entities.get(sid);\n\n    if (cached) {\n      this.entities.delete(sid);\n\n      if (cached.uniqueName) {\n        this.names.delete(cached.type + '::' + cached.uniqueName);\n      }\n    }\n  }\n\n}\n\nexports.EntitiesCache = EntitiesCache;","map":{"version":3,"sources":["C:/Users/IJuanchoG/Desktop/Twilio/node_modules/twilio-sync/lib/entitiesCache.js"],"names":["Object","defineProperty","exports","value","EntitiesCache","constructor","names","Map","entities","store","entity","stored","get","sid","set","uniqueName","type","getResolved","id","resolvedSid","remove","cached","delete"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;AACA;AACA;AACA;AACA;;AACA,MAAMA,aAAN,CAAoB;AAChBC,EAAAA,WAAW,GAAG;AACV,SAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACA,SAAKC,QAAL,GAAgB,IAAID,GAAJ,EAAhB;AACH;;AACDE,EAAAA,KAAK,CAACC,MAAD,EAAS;AACV,QAAIC,MAAM,GAAG,KAAKH,QAAL,CAAcI,GAAd,CAAkBF,MAAM,CAACG,GAAzB,CAAb;;AACA,QAAIF,MAAJ,EAAY;AACR,aAAOA,MAAP;AACH;;AACD,SAAKH,QAAL,CAAcM,GAAd,CAAkBJ,MAAM,CAACG,GAAzB,EAA8BH,MAA9B;;AACA,QAAIA,MAAM,CAACK,UAAX,EAAuB;AACnB,WAAKT,KAAL,CAAWQ,GAAX,CAAeJ,MAAM,CAACM,IAAP,GAAc,IAAd,GAAqBN,MAAM,CAACK,UAA3C,EAAuDL,MAAM,CAACG,GAA9D;AACH;;AACD,WAAOH,MAAP;AACH;;AACDO,EAAAA,WAAW,CAACC,EAAD,EAAKF,IAAL,EAAW;AAClB,QAAIG,WAAW,GAAG,KAAKb,KAAL,CAAWM,GAAX,CAAeI,IAAI,GAAG,IAAP,GAAcE,EAA7B,CAAlB;AACA,WAAOC,WAAW,GAAG,KAAKX,QAAL,CAAcI,GAAd,CAAkBO,WAAlB,CAAH,GAAoC,IAAtD;AACH;;AACDP,EAAAA,GAAG,CAACM,EAAD,EAAKF,IAAL,EAAW;AACV,WAAO,KAAKR,QAAL,CAAcI,GAAd,CAAkBM,EAAlB,KAAyB,KAAKD,WAAL,CAAiBC,EAAjB,EAAqBF,IAArB,CAAzB,IAAuD,IAA9D;AACH;;AACDI,EAAAA,MAAM,CAACP,GAAD,EAAM;AACR,QAAIQ,MAAM,GAAG,KAAKb,QAAL,CAAcI,GAAd,CAAkBC,GAAlB,CAAb;;AACA,QAAIQ,MAAJ,EAAY;AACR,WAAKb,QAAL,CAAcc,MAAd,CAAqBT,GAArB;;AACA,UAAIQ,MAAM,CAACN,UAAX,EAAuB;AACnB,aAAKT,KAAL,CAAWgB,MAAX,CAAkBD,MAAM,CAACL,IAAP,GAAc,IAAd,GAAqBK,MAAM,CAACN,UAA9C;AACH;AACJ;AACJ;;AA/Be;;AAiCpBb,OAAO,CAACE,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EntitiesCache = void 0;\r\n/**\r\n * Container for entities which are known by the client\r\n * It's needed for deduplication when client obtain the same object several times\r\n */\r\nclass EntitiesCache {\r\n    constructor() {\r\n        this.names = new Map();\r\n        this.entities = new Map();\r\n    }\r\n    store(entity) {\r\n        let stored = this.entities.get(entity.sid);\r\n        if (stored) {\r\n            return stored;\r\n        }\r\n        this.entities.set(entity.sid, entity);\r\n        if (entity.uniqueName) {\r\n            this.names.set(entity.type + '::' + entity.uniqueName, entity.sid);\r\n        }\r\n        return entity;\r\n    }\r\n    getResolved(id, type) {\r\n        let resolvedSid = this.names.get(type + '::' + id);\r\n        return resolvedSid ? this.entities.get(resolvedSid) : null;\r\n    }\r\n    get(id, type) {\r\n        return this.entities.get(id) || this.getResolved(id, type) || null;\r\n    }\r\n    remove(sid) {\r\n        let cached = this.entities.get(sid);\r\n        if (cached) {\r\n            this.entities.delete(sid);\r\n            if (cached.uniqueName) {\r\n                this.names.delete(cached.type + '::' + cached.uniqueName);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.EntitiesCache = EntitiesCache;\r\n"]},"metadata":{},"sourceType":"script"}