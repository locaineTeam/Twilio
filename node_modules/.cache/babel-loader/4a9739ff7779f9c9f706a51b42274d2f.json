{"ast":null,"code":"'use strict'; // Cached copy of the <canvas> used to check silent video frames.\n\nvar canvas = null;\nvar N_SAMPLES = 3;\nvar SAMPLE_HEIGHT = 50;\nvar SAMPLE_INTERVAL_MS = 250;\nvar SAMPLE_WIDTH = 50;\n/**\r\n * Check whether the current video frame is silent by selecting a 50x50\r\n * sample and calculating the max value of the pixel data. If it is 0, then\r\n * the frame is considered to be silent.\r\n * @private\r\n * @param {HTMLVideoElement} el\r\n * @returns {boolean} true if silent, false if not\r\n */\n\nfunction checkSilence(el) {\n  var context = canvas.getContext('2d');\n  context.drawImage(el, 0, 0, SAMPLE_WIDTH, SAMPLE_HEIGHT);\n  var frame = context.getImageData(0, 0, SAMPLE_WIDTH, SAMPLE_HEIGHT);\n  var frameDataWithoutAlpha = frame.data.filter(function (item, i) {\n    return (i + 1) % 4;\n  });\n  var max = Math.max.apply(Math, frameDataWithoutAlpha);\n  return max === 0;\n}\n/**\r\n * Detect whether the video stream rendered by the given HTMLVideoElement is silent.\r\n * @param {HTMLVideoElement} el\r\n * @returns {Promise<boolean>} true if silent, false if not.\r\n */\n\n\nfunction detectSilentVideo(el) {\n  // Create the canvas when detectSilentVideo() is called for the\n  // first time.\n  canvas = canvas || document.createElement('canvas'); // Resolve the returned Promise with true if 3 consecutive sample\n  // frames from the video being played by the HTMLVideoElement are\n  // silent.\n\n  return new Promise(function (resolve) {\n    var samplesLeft = N_SAMPLES;\n    setTimeout(function doCheckSilence() {\n      samplesLeft--;\n\n      if (!checkSilence(el)) {\n        return resolve(false);\n      }\n\n      if (samplesLeft > 0) {\n        return setTimeout(doCheckSilence, SAMPLE_INTERVAL_MS);\n      }\n\n      return resolve(true);\n    }, SAMPLE_INTERVAL_MS);\n  });\n}\n\nmodule.exports = detectSilentVideo;","map":{"version":3,"sources":["C:/Users/USER/Desktop/ARSW III/Twilio/node_modules/twilio-video/es5/util/detectsilentvideo.js"],"names":["canvas","N_SAMPLES","SAMPLE_HEIGHT","SAMPLE_INTERVAL_MS","SAMPLE_WIDTH","checkSilence","el","context","getContext","drawImage","frame","getImageData","frameDataWithoutAlpha","data","filter","item","i","max","Math","apply","detectSilentVideo","document","createElement","Promise","resolve","samplesLeft","setTimeout","doCheckSilence","module","exports"],"mappings":"AAAA,a,CAEA;;AAEA,IAAIA,MAAM,GAAG,IAAb;AAEA,IAAIC,SAAS,GAAG,CAAhB;AACA,IAAIC,aAAa,GAAG,EAApB;AACA,IAAIC,kBAAkB,GAAG,GAAzB;AACA,IAAIC,YAAY,GAAG,EAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,EAAtB,EAA0B;AACxB,MAAIC,OAAO,GAAGP,MAAM,CAACQ,UAAP,CAAkB,IAAlB,CAAd;AACAD,EAAAA,OAAO,CAACE,SAAR,CAAkBH,EAAlB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4BF,YAA5B,EAA0CF,aAA1C;AACA,MAAIQ,KAAK,GAAGH,OAAO,CAACI,YAAR,CAAqB,CAArB,EAAwB,CAAxB,EAA2BP,YAA3B,EAAyCF,aAAzC,CAAZ;AACA,MAAIU,qBAAqB,GAAGF,KAAK,CAACG,IAAN,CAAWC,MAAX,CAAkB,UAAUC,IAAV,EAAgBC,CAAhB,EAAmB;AAC/D,WAAO,CAACA,CAAC,GAAG,CAAL,IAAU,CAAjB;AACD,GAF2B,CAA5B;AAGA,MAAIC,GAAG,GAAGC,IAAI,CAACD,GAAL,CAASE,KAAT,CAAeD,IAAf,EAAqBN,qBAArB,CAAV;AACA,SAAOK,GAAG,KAAK,CAAf;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASG,iBAAT,CAA2Bd,EAA3B,EAA+B;AAC7B;AACA;AACAN,EAAAA,MAAM,GAAGA,MAAM,IAAIqB,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAnB,CAH6B,CAK7B;AACA;AACA;;AACA,SAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmB;AACpC,QAAIC,WAAW,GAAGxB,SAAlB;AACAyB,IAAAA,UAAU,CAAC,SAASC,cAAT,GAA0B;AACnCF,MAAAA,WAAW;;AACX,UAAI,CAACpB,YAAY,CAACC,EAAD,CAAjB,EAAuB;AACrB,eAAOkB,OAAO,CAAC,KAAD,CAAd;AACD;;AACD,UAAIC,WAAW,GAAG,CAAlB,EAAqB;AACnB,eAAOC,UAAU,CAACC,cAAD,EAAiBxB,kBAAjB,CAAjB;AACD;;AACD,aAAOqB,OAAO,CAAC,IAAD,CAAd;AACD,KATS,EASPrB,kBATO,CAAV;AAUD,GAZM,CAAP;AAaD;;AAEDyB,MAAM,CAACC,OAAP,GAAiBT,iBAAjB","sourcesContent":["'use strict';\r\n\r\n// Cached copy of the <canvas> used to check silent video frames.\r\n\r\nvar canvas = null;\r\n\r\nvar N_SAMPLES = 3;\r\nvar SAMPLE_HEIGHT = 50;\r\nvar SAMPLE_INTERVAL_MS = 250;\r\nvar SAMPLE_WIDTH = 50;\r\n\r\n/**\r\n * Check whether the current video frame is silent by selecting a 50x50\r\n * sample and calculating the max value of the pixel data. If it is 0, then\r\n * the frame is considered to be silent.\r\n * @private\r\n * @param {HTMLVideoElement} el\r\n * @returns {boolean} true if silent, false if not\r\n */\r\nfunction checkSilence(el) {\r\n  var context = canvas.getContext('2d');\r\n  context.drawImage(el, 0, 0, SAMPLE_WIDTH, SAMPLE_HEIGHT);\r\n  var frame = context.getImageData(0, 0, SAMPLE_WIDTH, SAMPLE_HEIGHT);\r\n  var frameDataWithoutAlpha = frame.data.filter(function (item, i) {\r\n    return (i + 1) % 4;\r\n  });\r\n  var max = Math.max.apply(Math, frameDataWithoutAlpha);\r\n  return max === 0;\r\n}\r\n\r\n/**\r\n * Detect whether the video stream rendered by the given HTMLVideoElement is silent.\r\n * @param {HTMLVideoElement} el\r\n * @returns {Promise<boolean>} true if silent, false if not.\r\n */\r\nfunction detectSilentVideo(el) {\r\n  // Create the canvas when detectSilentVideo() is called for the\r\n  // first time.\r\n  canvas = canvas || document.createElement('canvas');\r\n\r\n  // Resolve the returned Promise with true if 3 consecutive sample\r\n  // frames from the video being played by the HTMLVideoElement are\r\n  // silent.\r\n  return new Promise(function (resolve) {\r\n    var samplesLeft = N_SAMPLES;\r\n    setTimeout(function doCheckSilence() {\r\n      samplesLeft--;\r\n      if (!checkSilence(el)) {\r\n        return resolve(false);\r\n      }\r\n      if (samplesLeft > 0) {\r\n        return setTimeout(doCheckSilence, SAMPLE_INTERVAL_MS);\r\n      }\r\n      return resolve(true);\r\n    }, SAMPLE_INTERVAL_MS);\r\n  });\r\n}\r\n\r\nmodule.exports = detectSilentVideo;"]},"metadata":{},"sourceType":"script"}