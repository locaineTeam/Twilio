{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst logger_1 = require(\"./logger\");\n\nconst configuration_1 = require(\"./configuration\");\n\nconst media_1 = require(\"./media\");\n\nexports.Media = media_1.Media;\nexports.McsMedia = media_1.Media;\n\nconst transport_1 = require(\"./services/transport\");\n\nconst network_1 = require(\"./services/network\");\n\nconst log = logger_1.Logger.scope(''); //log.setLevel('trace');\n\nconst SDK_VERSION = require('./../package.json').version;\n\nconst MSG_NO_TOKEN = 'A valid Twilio token should be provided';\n/**\r\n * @classdesc A Client provides an interface for Media Content Service\r\n */\n\nclass Client {\n  /**\r\n   * @param {String} token - Access token\r\n   * @param {String} baseUrl - Base URL for Media Content Service, i.e. /v1/Services/{serviceSid}/Media\r\n   * @param {Client#ClientOptions} [options] - Options to customize the Client\r\n   */\n  constructor(token, baseUrl, options = {}) {\n    this.options = options;\n    this.options.logLevel = this.options.logLevel || 'silent';\n    this.config = new configuration_1.Configuration(token, baseUrl, this.options);\n\n    if (!token) {\n      throw new Error(MSG_NO_TOKEN);\n    }\n\n    log.setLevel(this.options.logLevel);\n    this.options.transport = this.options.transport || new transport_1.Transport();\n    this.transport = this.options.transport;\n    this.network = new network_1.Network(this.config, this.transport);\n  }\n  /**\r\n   * These options can be passed to Client constructor\r\n   * @typedef {Object} Client#ClientOptions\r\n   * @property {String} [logLevel='error'] - The level of logging to enable. Valid options\r\n   *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']\r\n   */\n\n  /**\r\n   * Update the token used for Client operations\r\n   * @param {String} token - The JWT string of the new token\r\n   * @public\r\n   * @returns {void}\r\n   */\n\n\n  updateToken(token) {\n    log.info('updateToken');\n\n    if (!token) {\n      throw new Error(MSG_NO_TOKEN);\n    }\n\n    this.config.updateToken(token);\n  }\n  /**\r\n   * Gets media from media service\r\n   * @param {String} sid - Media's SID\r\n   * @public\r\n   * @returns {Promise<Media>}\r\n   */\n\n\n  async get(sid) {\n    let response = await this.network.get(`${this.config.baseUrl}/${sid}`);\n    return new media_1.Media(this.config, this.network, response.body);\n  }\n  /**\r\n   * Posts raw content to media service\r\n   * @param {String} contentType - content type of media\r\n   * @param {String|Buffer} media - content to post\r\n   * @public\r\n   * @returns {Promise<Media>}\r\n   */\n\n\n  async post(contentType, media) {\n    let response = await this.network.post(this.config.baseUrl, media, contentType);\n    return new media_1.Media(this.config, this.network, response.body);\n  }\n  /**\r\n   * Posts FormData to media service. Can be used only with browser engine's FormData.\r\n   * In non-browser FormData case the method will do promise reject with\r\n   * new TypeError(\"Posting FormData supported only with browser engine's FormData\")\r\n   * @param {FormData} formData - form data to post\r\n   * @public\r\n   * @returns {Promise<Media>}\r\n   */\n\n\n  async postFormData(formData) {\n    let response = await this.network.post(this.config.baseUrl, formData);\n    return new media_1.Media(this.config, this.network, response.body);\n  }\n\n}\n\nexports.Client = Client;\nexports.McsClient = Client;\nClient.version = SDK_VERSION;\nexports.default = Client;","map":{"version":3,"sources":["C:/Users/USER/Desktop/ARSW III/Twilio/node_modules/twilio-mcs-client/lib/client.js"],"names":["Object","defineProperty","exports","value","logger_1","require","configuration_1","media_1","Media","McsMedia","transport_1","network_1","log","Logger","scope","SDK_VERSION","version","MSG_NO_TOKEN","Client","constructor","token","baseUrl","options","logLevel","config","Configuration","Error","setLevel","transport","Transport","network","Network","updateToken","info","get","sid","response","body","post","contentType","media","postFormData","formData","McsClient","default"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst logger_1 = require(\"./logger\");\r\nconst configuration_1 = require(\"./configuration\");\r\nconst media_1 = require(\"./media\");\r\nexports.Media = media_1.Media;\r\nexports.McsMedia = media_1.Media;\r\nconst transport_1 = require(\"./services/transport\");\r\nconst network_1 = require(\"./services/network\");\r\nconst log = logger_1.Logger.scope('');\r\n//log.setLevel('trace');\r\nconst SDK_VERSION = require('./../package.json').version;\r\nconst MSG_NO_TOKEN = 'A valid Twilio token should be provided';\r\n/**\r\n * @classdesc A Client provides an interface for Media Content Service\r\n */\r\nclass Client {\r\n    /**\r\n     * @param {String} token - Access token\r\n     * @param {String} baseUrl - Base URL for Media Content Service, i.e. /v1/Services/{serviceSid}/Media\r\n     * @param {Client#ClientOptions} [options] - Options to customize the Client\r\n     */\r\n    constructor(token, baseUrl, options = {}) {\r\n        this.options = options;\r\n        this.options.logLevel = this.options.logLevel || 'silent';\r\n        this.config = new configuration_1.Configuration(token, baseUrl, this.options);\r\n        if (!token) {\r\n            throw new Error(MSG_NO_TOKEN);\r\n        }\r\n        log.setLevel(this.options.logLevel);\r\n        this.options.transport = this.options.transport || new transport_1.Transport();\r\n        this.transport = this.options.transport;\r\n        this.network = new network_1.Network(this.config, this.transport);\r\n    }\r\n    /**\r\n     * These options can be passed to Client constructor\r\n     * @typedef {Object} Client#ClientOptions\r\n     * @property {String} [logLevel='error'] - The level of logging to enable. Valid options\r\n     *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']\r\n     */\r\n    /**\r\n     * Update the token used for Client operations\r\n     * @param {String} token - The JWT string of the new token\r\n     * @public\r\n     * @returns {void}\r\n     */\r\n    updateToken(token) {\r\n        log.info('updateToken');\r\n        if (!token) {\r\n            throw new Error(MSG_NO_TOKEN);\r\n        }\r\n        this.config.updateToken(token);\r\n    }\r\n    /**\r\n     * Gets media from media service\r\n     * @param {String} sid - Media's SID\r\n     * @public\r\n     * @returns {Promise<Media>}\r\n     */\r\n    async get(sid) {\r\n        let response = await this.network.get(`${this.config.baseUrl}/${sid}`);\r\n        return new media_1.Media(this.config, this.network, response.body);\r\n    }\r\n    /**\r\n     * Posts raw content to media service\r\n     * @param {String} contentType - content type of media\r\n     * @param {String|Buffer} media - content to post\r\n     * @public\r\n     * @returns {Promise<Media>}\r\n     */\r\n    async post(contentType, media) {\r\n        let response = await this.network.post(this.config.baseUrl, media, contentType);\r\n        return new media_1.Media(this.config, this.network, response.body);\r\n    }\r\n    /**\r\n     * Posts FormData to media service. Can be used only with browser engine's FormData.\r\n     * In non-browser FormData case the method will do promise reject with\r\n     * new TypeError(\"Posting FormData supported only with browser engine's FormData\")\r\n     * @param {FormData} formData - form data to post\r\n     * @public\r\n     * @returns {Promise<Media>}\r\n     */\r\n    async postFormData(formData) {\r\n        let response = await this.network.post(this.config.baseUrl, formData);\r\n        return new media_1.Media(this.config, this.network, response.body);\r\n    }\r\n}\r\nexports.Client = Client;\r\nexports.McsClient = Client;\r\nClient.version = SDK_VERSION;\r\nexports.default = Client;\r\n"]},"metadata":{},"sourceType":"script"}