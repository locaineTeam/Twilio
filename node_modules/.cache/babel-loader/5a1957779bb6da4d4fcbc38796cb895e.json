{"ast":null,"code":"/* globals chrome, navigator */\n'use strict';\n\nfunction _toArray(arr) {\n  return Array.isArray(arr) ? arr : Array.from(arr);\n}\n\nvar _require = require('@twilio/webrtc/lib/util'),\n    guessBrowser = _require.guessBrowser,\n    isWebRTCSupported = _require.support;\n\nvar SUPPORTED_CHROME_BASED_BROWSERS = ['edg', 'edge', 'electron', 'headlesschrome'];\n/**\r\n * Get the top level parenthesized substrings within a given string. Unmatched\r\n * parentheses are ignored.\r\n * Ex: \"abc) (def) gh(ij) (kl (mn)o) (pqr\" => [\"(def)\", \"(ij)\", \"(kl (mn)o)\"]\r\n * @param {string} string\r\n * @returns {string[]}\r\n */\n\nfunction getParenthesizedSubstrings(string) {\n  var openParenthesisPositions = [];\n  var substrings = [];\n\n  for (var i = 0; i < string.length; i++) {\n    if (string[i] === '(') {\n      openParenthesisPositions.push(i);\n    } else if (string[i] === ')' && openParenthesisPositions.length > 0) {\n      var openParenthesisPosition = openParenthesisPositions.pop();\n\n      if (openParenthesisPositions.length === 0) {\n        substrings.push(string.substring(openParenthesisPosition, i + 1));\n      }\n    }\n  }\n\n  return substrings;\n}\n/**\r\n * Check whether the current browser is non-Chromium Edge.\r\n * @param {string} browser\r\n * @returns {boolean}\r\n */\n\n\nfunction isNonChromiumEdge(browser) {\n  return browser === 'chrome' && /Edge/.test(navigator.userAgent) && (typeof chrome === 'undefined' || typeof chrome.runtime === 'undefined');\n}\n/**\r\n * Get the name of the rebranded Chromium browser, if any. Re-branded Chrome's user\r\n * agent has the following format:\r\n * <source>/<version> (<os>) <engine>/<version> (<engine_name>) Chrome/<version> [Mobile] Safari/<version>\r\n * @param browser\r\n * @returns {?string} Name of the rebranded Chrome browser, or null if the browser\r\n *   is either not Chrome or vanilla Chrome.\r\n */\n\n\nfunction rebrandedChromeBrowser(browser) {\n  // If the browser is not Chrome based, then it is not a rebranded Chrome browser.\n  if (browser !== 'chrome') {\n    return null;\n  } // Latest desktop Brave browser has a \"brave\" property in navigator.\n\n\n  if ('brave' in navigator) {\n    return 'brave';\n  } // Remove the \"(.+)\" entries from the user agent thereby retaining only the\n  // <name>[/<version>] entries.\n\n\n  var parenthesizedSubstrings = getParenthesizedSubstrings(navigator.userAgent);\n  var nameAndVersions = parenthesizedSubstrings.reduce(function (userAgent, substring) {\n    return userAgent.replace(substring, '');\n  }, navigator.userAgent); // Extract the potential browser <name>s by ignoring the first two names, which\n  // point to <source> and <engine>.\n\n  var matches = nameAndVersions.match(/[^\\s]+/g) || [];\n\n  var _matches$map = matches.map(function (nameAndVersion) {\n    return nameAndVersion.split('/')[0].toLowerCase();\n  }),\n      _matches$map2 = _toArray(_matches$map),\n      browserNames = _matches$map2.slice(2); // Extract the <name> that is not expected to be present in the vanilla Chrome\n  // browser, which indicates the rebranded name (ex: \"edg[e]\", \"electron\"). If null,\n  // then this is a vanilla Chrome browser.\n\n\n  return browserNames.find(function (name) {\n    return !['chrome', 'mobile', 'safari'].includes(name);\n  }) || null;\n}\n/**\r\n * Check if the current browser is officially supported by twilio-video.js.\r\n * @returns {boolean}\r\n */\n\n\nfunction isSupported() {\n  var browser = guessBrowser();\n  var rebrandedChrome = rebrandedChromeBrowser(browser);\n  return !!browser && isWebRTCSupported() && (!rebrandedChrome || SUPPORTED_CHROME_BASED_BROWSERS.includes(rebrandedChrome)) && !isNonChromiumEdge(browser);\n}\n\nmodule.exports = isSupported;","map":{"version":3,"sources":["C:/Users/Usuario/Downloads/Twilio/node_modules/twilio-video/es5/util/support.js"],"names":["_toArray","arr","Array","isArray","from","_require","require","guessBrowser","isWebRTCSupported","support","SUPPORTED_CHROME_BASED_BROWSERS","getParenthesizedSubstrings","string","openParenthesisPositions","substrings","i","length","push","openParenthesisPosition","pop","substring","isNonChromiumEdge","browser","test","navigator","userAgent","chrome","runtime","rebrandedChromeBrowser","parenthesizedSubstrings","nameAndVersions","reduce","replace","matches","match","_matches$map","map","nameAndVersion","split","toLowerCase","_matches$map2","browserNames","slice","find","name","includes","isSupported","rebrandedChrome","module","exports"],"mappings":"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","sourcesContent":["/* globals chrome, navigator */\r\n'use strict';\r\n\r\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\r\n\r\nvar _require = require('@twilio/webrtc/lib/util'),\r\n    guessBrowser = _require.guessBrowser,\r\n    isWebRTCSupported = _require.support;\r\n\r\nvar SUPPORTED_CHROME_BASED_BROWSERS = ['edg', 'edge', 'electron', 'headlesschrome'];\r\n\r\n/**\r\n * Get the top level parenthesized substrings within a given string. Unmatched\r\n * parentheses are ignored.\r\n * Ex: \"abc) (def) gh(ij) (kl (mn)o) (pqr\" => [\"(def)\", \"(ij)\", \"(kl (mn)o)\"]\r\n * @param {string} string\r\n * @returns {string[]}\r\n */\r\nfunction getParenthesizedSubstrings(string) {\r\n  var openParenthesisPositions = [];\r\n  var substrings = [];\r\n  for (var i = 0; i < string.length; i++) {\r\n    if (string[i] === '(') {\r\n      openParenthesisPositions.push(i);\r\n    } else if (string[i] === ')' && openParenthesisPositions.length > 0) {\r\n      var openParenthesisPosition = openParenthesisPositions.pop();\r\n      if (openParenthesisPositions.length === 0) {\r\n        substrings.push(string.substring(openParenthesisPosition, i + 1));\r\n      }\r\n    }\r\n  }\r\n  return substrings;\r\n}\r\n\r\n/**\r\n * Check whether the current browser is non-Chromium Edge.\r\n * @param {string} browser\r\n * @returns {boolean}\r\n */\r\nfunction isNonChromiumEdge(browser) {\r\n  return browser === 'chrome' && /Edge/.test(navigator.userAgent) && (typeof chrome === 'undefined' || typeof chrome.runtime === 'undefined');\r\n}\r\n\r\n/**\r\n * Get the name of the rebranded Chromium browser, if any. Re-branded Chrome's user\r\n * agent has the following format:\r\n * <source>/<version> (<os>) <engine>/<version> (<engine_name>) Chrome/<version> [Mobile] Safari/<version>\r\n * @param browser\r\n * @returns {?string} Name of the rebranded Chrome browser, or null if the browser\r\n *   is either not Chrome or vanilla Chrome.\r\n */\r\nfunction rebrandedChromeBrowser(browser) {\r\n  // If the browser is not Chrome based, then it is not a rebranded Chrome browser.\r\n  if (browser !== 'chrome') {\r\n    return null;\r\n  }\r\n\r\n  // Latest desktop Brave browser has a \"brave\" property in navigator.\r\n  if ('brave' in navigator) {\r\n    return 'brave';\r\n  }\r\n\r\n  // Remove the \"(.+)\" entries from the user agent thereby retaining only the\r\n  // <name>[/<version>] entries.\r\n  var parenthesizedSubstrings = getParenthesizedSubstrings(navigator.userAgent);\r\n  var nameAndVersions = parenthesizedSubstrings.reduce(function (userAgent, substring) {\r\n    return userAgent.replace(substring, '');\r\n  }, navigator.userAgent);\r\n\r\n  // Extract the potential browser <name>s by ignoring the first two names, which\r\n  // point to <source> and <engine>.\r\n  var matches = nameAndVersions.match(/[^\\s]+/g) || [];\r\n\r\n  var _matches$map = matches.map(function (nameAndVersion) {\r\n    return nameAndVersion.split('/')[0].toLowerCase();\r\n  }),\r\n      _matches$map2 = _toArray(_matches$map),\r\n      browserNames = _matches$map2.slice(2);\r\n\r\n  // Extract the <name> that is not expected to be present in the vanilla Chrome\r\n  // browser, which indicates the rebranded name (ex: \"edg[e]\", \"electron\"). If null,\r\n  // then this is a vanilla Chrome browser.\r\n\r\n\r\n  return browserNames.find(function (name) {\r\n    return !['chrome', 'mobile', 'safari'].includes(name);\r\n  }) || null;\r\n}\r\n\r\n/**\r\n * Check if the current browser is officially supported by twilio-video.js.\r\n * @returns {boolean}\r\n */\r\nfunction isSupported() {\r\n  var browser = guessBrowser();\r\n  var rebrandedChrome = rebrandedChromeBrowser(browser);\r\n  return !!browser && isWebRTCSupported() && (!rebrandedChrome || SUPPORTED_CHROME_BASED_BROWSERS.includes(rebrandedChrome)) && !isNonChromiumEdge(browser);\r\n}\r\n\r\nmodule.exports = isSupported;"]},"metadata":{},"sourceType":"script"}