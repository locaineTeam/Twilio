{"ast":null,"code":"var ctx = require('./_ctx');\n\nvar call = require('./_iter-call');\n\nvar isArrayIter = require('./_is-array-iter');\n\nvar anObject = require('./_an-object');\n\nvar toLength = require('./_to-length');\n\nvar getIterFn = require('./core.get-iterator-method');\n\nvar BREAK = {};\nvar RETURN = {};\n\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () {\n    return iterable;\n  } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!'); // fast case for arrays with default iterator\n\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\n\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;","map":{"version":3,"sources":["C:/Users/IJuanchoG/Desktop/Twilio/node_modules/babel-runtime/node_modules/core-js/library/modules/_for-of.js"],"names":["ctx","require","call","isArrayIter","anObject","toLength","getIterFn","BREAK","RETURN","exports","module","iterable","entries","fn","that","ITERATOR","iterFn","f","index","length","step","iterator","result","TypeError","next","done","value"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,cAAD,CAAlB;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,cAAD,CAAtB;;AACA,IAAII,QAAQ,GAAGJ,OAAO,CAAC,cAAD,CAAtB;;AACA,IAAIK,SAAS,GAAGL,OAAO,CAAC,4BAAD,CAAvB;;AACA,IAAIM,KAAK,GAAG,EAAZ;AACA,IAAIC,MAAM,GAAG,EAAb;;AACA,IAAIC,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiB,UAAUE,QAAV,EAAoBC,OAApB,EAA6BC,EAA7B,EAAiCC,IAAjC,EAAuCC,QAAvC,EAAiD;AAC9E,MAAIC,MAAM,GAAGD,QAAQ,GAAG,YAAY;AAAE,WAAOJ,QAAP;AAAkB,GAAnC,GAAsCL,SAAS,CAACK,QAAD,CAApE;AACA,MAAIM,CAAC,GAAGjB,GAAG,CAACa,EAAD,EAAKC,IAAL,EAAWF,OAAO,GAAG,CAAH,GAAO,CAAzB,CAAX;AACA,MAAIM,KAAK,GAAG,CAAZ;AACA,MAAIC,MAAJ,EAAYC,IAAZ,EAAkBC,QAAlB,EAA4BC,MAA5B;AACA,MAAI,OAAON,MAAP,IAAiB,UAArB,EAAiC,MAAMO,SAAS,CAACZ,QAAQ,GAAG,mBAAZ,CAAf,CAL6C,CAM9E;;AACA,MAAIR,WAAW,CAACa,MAAD,CAAf,EAAyB,KAAKG,MAAM,GAAGd,QAAQ,CAACM,QAAQ,CAACQ,MAAV,CAAtB,EAAyCA,MAAM,GAAGD,KAAlD,EAAyDA,KAAK,EAA9D,EAAkE;AACzFI,IAAAA,MAAM,GAAGV,OAAO,GAAGK,CAAC,CAACb,QAAQ,CAACgB,IAAI,GAAGT,QAAQ,CAACO,KAAD,CAAhB,CAAR,CAAiC,CAAjC,CAAD,EAAsCE,IAAI,CAAC,CAAD,CAA1C,CAAJ,GAAqDH,CAAC,CAACN,QAAQ,CAACO,KAAD,CAAT,CAAtE;AACA,QAAII,MAAM,KAAKf,KAAX,IAAoBe,MAAM,KAAKd,MAAnC,EAA2C,OAAOc,MAAP;AAC5C,GAHD,MAGO,KAAKD,QAAQ,GAAGL,MAAM,CAACd,IAAP,CAAYS,QAAZ,CAAhB,EAAuC,CAAC,CAACS,IAAI,GAAGC,QAAQ,CAACG,IAAT,EAAR,EAAyBC,IAAjE,GAAwE;AAC7EH,IAAAA,MAAM,GAAGpB,IAAI,CAACmB,QAAD,EAAWJ,CAAX,EAAcG,IAAI,CAACM,KAAnB,EAA0Bd,OAA1B,CAAb;AACA,QAAIU,MAAM,KAAKf,KAAX,IAAoBe,MAAM,KAAKd,MAAnC,EAA2C,OAAOc,MAAP;AAC5C;AACF,CAdD;;AAeAb,OAAO,CAACF,KAAR,GAAgBA,KAAhB;AACAE,OAAO,CAACD,MAAR,GAAiBA,MAAjB","sourcesContent":["var ctx = require('./_ctx');\r\nvar call = require('./_iter-call');\r\nvar isArrayIter = require('./_is-array-iter');\r\nvar anObject = require('./_an-object');\r\nvar toLength = require('./_to-length');\r\nvar getIterFn = require('./core.get-iterator-method');\r\nvar BREAK = {};\r\nvar RETURN = {};\r\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\r\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\r\n  var f = ctx(fn, that, entries ? 2 : 1);\r\n  var index = 0;\r\n  var length, step, iterator, result;\r\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\r\n  // fast case for arrays with default iterator\r\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\r\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\r\n    if (result === BREAK || result === RETURN) return result;\r\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\r\n    result = call(iterator, f, step.value, entries);\r\n    if (result === BREAK || result === RETURN) return result;\r\n  }\r\n};\r\nexports.BREAK = BREAK;\r\nexports.RETURN = RETURN;\r\n"]},"metadata":{},"sourceType":"script"}