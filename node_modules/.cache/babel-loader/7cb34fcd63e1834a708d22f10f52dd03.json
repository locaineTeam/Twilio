{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Router = void 0;\n\nconst logger_1 = require(\"./utils/logger\");\n\nconst SYNC_DOCUMENT_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.document';\nconst SYNC_LIST_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.list';\nconst SYNC_MAP_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.map';\nconst SYNC_NOTIFICATION_TYPE = 'twilio.sync.event';\n/**\r\n * @class Router\r\n * @classdesc Routes all incoming messages to the consumers\r\n */\n\nclass Router {\n  constructor(params) {\n    this.config = params.config;\n    this.subscriptions = params.subscriptions;\n    this.notifications = params.notifications;\n    this.notifications.subscribe(SYNC_NOTIFICATION_TYPE);\n    this.notifications.subscribe(SYNC_DOCUMENT_NOTIFICATION_TYPE);\n    this.notifications.subscribe(SYNC_LIST_NOTIFICATION_TYPE);\n    this.notifications.subscribe(SYNC_MAP_NOTIFICATION_TYPE);\n    this.notifications.on('message', (messageType, payload) => this.onMessage(messageType, payload));\n    this.notifications.on('transportReady', isConnected => this.onConnectionStateChanged(isConnected));\n  }\n  /**\r\n   * Entry point for all incoming messages\r\n   * @param {String} type - Type of incoming message\r\n   * @param {Object} message - Message to route\r\n   */\n\n\n  onMessage(type, message) {\n    logger_1.default.trace('Notification type:', type, 'content:', message);\n\n    switch (type) {\n      case SYNC_DOCUMENT_NOTIFICATION_TYPE:\n      case SYNC_LIST_NOTIFICATION_TYPE:\n      case SYNC_MAP_NOTIFICATION_TYPE:\n        this.subscriptions.acceptMessage(message, false);\n        break;\n\n      case SYNC_NOTIFICATION_TYPE:\n        this.subscriptions.acceptMessage(message, true);\n        break;\n    }\n  }\n  /**\r\n   * Subscribe for events\r\n   */\n\n\n  subscribe(sid, entity) {\n    this.subscriptions.add(sid, entity);\n  }\n  /**\r\n   * Unsubscribe from events\r\n   */\n\n\n  unsubscribe(sid) {\n    this.subscriptions.remove(sid);\n  }\n  /**\r\n   * Handle transport establishing event\r\n   * If we have any subscriptions - we should check object for modifications\r\n   */\n\n\n  onConnectionStateChanged(isConnected) {\n    this.subscriptions.onConnectionStateChanged(isConnected);\n  }\n\n}\n\nexports.Router = Router;\nexports.default = Router;","map":{"version":3,"sources":["C:/Users/USER/Desktop/ARSW III/Twilio/node_modules/twilio-sync/lib/router.js"],"names":["Object","defineProperty","exports","value","Router","logger_1","require","SYNC_DOCUMENT_NOTIFICATION_TYPE","SYNC_LIST_NOTIFICATION_TYPE","SYNC_MAP_NOTIFICATION_TYPE","SYNC_NOTIFICATION_TYPE","constructor","params","config","subscriptions","notifications","subscribe","on","messageType","payload","onMessage","isConnected","onConnectionStateChanged","type","message","default","trace","acceptMessage","sid","entity","add","unsubscribe","remove"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiB,KAAK,CAAtB;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,gBAAD,CAAxB;;AACA,MAAMC,+BAA+B,GAAG,6BAAxC;AACA,MAAMC,2BAA2B,GAAG,yBAApC;AACA,MAAMC,0BAA0B,GAAG,wBAAnC;AACA,MAAMC,sBAAsB,GAAG,mBAA/B;AACA;AACA;AACA;AACA;;AACA,MAAMN,MAAN,CAAa;AACTO,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,SAAKC,MAAL,GAAcD,MAAM,CAACC,MAArB;AACA,SAAKC,aAAL,GAAqBF,MAAM,CAACE,aAA5B;AACA,SAAKC,aAAL,GAAqBH,MAAM,CAACG,aAA5B;AACA,SAAKA,aAAL,CAAmBC,SAAnB,CAA6BN,sBAA7B;AACA,SAAKK,aAAL,CAAmBC,SAAnB,CAA6BT,+BAA7B;AACA,SAAKQ,aAAL,CAAmBC,SAAnB,CAA6BR,2BAA7B;AACA,SAAKO,aAAL,CAAmBC,SAAnB,CAA6BP,0BAA7B;AACA,SAAKM,aAAL,CAAmBE,EAAnB,CAAsB,SAAtB,EAAiC,CAACC,WAAD,EAAcC,OAAd,KAA0B,KAAKC,SAAL,CAAeF,WAAf,EAA4BC,OAA5B,CAA3D;AACA,SAAKJ,aAAL,CAAmBE,EAAnB,CAAsB,gBAAtB,EAAwCI,WAAW,IAAI,KAAKC,wBAAL,CAA8BD,WAA9B,CAAvD;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACID,EAAAA,SAAS,CAACG,IAAD,EAAOC,OAAP,EAAgB;AACrBnB,IAAAA,QAAQ,CAACoB,OAAT,CAAiBC,KAAjB,CAAuB,oBAAvB,EAA6CH,IAA7C,EAAmD,UAAnD,EAA+DC,OAA/D;;AACA,YAAQD,IAAR;AACI,WAAKhB,+BAAL;AACA,WAAKC,2BAAL;AACA,WAAKC,0BAAL;AACI,aAAKK,aAAL,CAAmBa,aAAnB,CAAiCH,OAAjC,EAA0C,KAA1C;AACA;;AACJ,WAAKd,sBAAL;AACI,aAAKI,aAAL,CAAmBa,aAAnB,CAAiCH,OAAjC,EAA0C,IAA1C;AACA;AARR;AAUH;AACD;AACJ;AACA;;;AACIR,EAAAA,SAAS,CAACY,GAAD,EAAMC,MAAN,EAAc;AACnB,SAAKf,aAAL,CAAmBgB,GAAnB,CAAuBF,GAAvB,EAA4BC,MAA5B;AACH;AACD;AACJ;AACA;;;AACIE,EAAAA,WAAW,CAACH,GAAD,EAAM;AACb,SAAKd,aAAL,CAAmBkB,MAAnB,CAA0BJ,GAA1B;AACH;AACD;AACJ;AACA;AACA;;;AACIN,EAAAA,wBAAwB,CAACD,WAAD,EAAc;AAClC,SAAKP,aAAL,CAAmBQ,wBAAnB,CAA4CD,WAA5C;AACH;;AAhDQ;;AAkDbnB,OAAO,CAACE,MAAR,GAAiBA,MAAjB;AACAF,OAAO,CAACuB,OAAR,GAAkBrB,MAAlB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Router = void 0;\r\nconst logger_1 = require(\"./utils/logger\");\r\nconst SYNC_DOCUMENT_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.document';\r\nconst SYNC_LIST_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.list';\r\nconst SYNC_MAP_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.map';\r\nconst SYNC_NOTIFICATION_TYPE = 'twilio.sync.event';\r\n/**\r\n * @class Router\r\n * @classdesc Routes all incoming messages to the consumers\r\n */\r\nclass Router {\r\n    constructor(params) {\r\n        this.config = params.config;\r\n        this.subscriptions = params.subscriptions;\r\n        this.notifications = params.notifications;\r\n        this.notifications.subscribe(SYNC_NOTIFICATION_TYPE);\r\n        this.notifications.subscribe(SYNC_DOCUMENT_NOTIFICATION_TYPE);\r\n        this.notifications.subscribe(SYNC_LIST_NOTIFICATION_TYPE);\r\n        this.notifications.subscribe(SYNC_MAP_NOTIFICATION_TYPE);\r\n        this.notifications.on('message', (messageType, payload) => this.onMessage(messageType, payload));\r\n        this.notifications.on('transportReady', isConnected => this.onConnectionStateChanged(isConnected));\r\n    }\r\n    /**\r\n     * Entry point for all incoming messages\r\n     * @param {String} type - Type of incoming message\r\n     * @param {Object} message - Message to route\r\n     */\r\n    onMessage(type, message) {\r\n        logger_1.default.trace('Notification type:', type, 'content:', message);\r\n        switch (type) {\r\n            case SYNC_DOCUMENT_NOTIFICATION_TYPE:\r\n            case SYNC_LIST_NOTIFICATION_TYPE:\r\n            case SYNC_MAP_NOTIFICATION_TYPE:\r\n                this.subscriptions.acceptMessage(message, false);\r\n                break;\r\n            case SYNC_NOTIFICATION_TYPE:\r\n                this.subscriptions.acceptMessage(message, true);\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * Subscribe for events\r\n     */\r\n    subscribe(sid, entity) {\r\n        this.subscriptions.add(sid, entity);\r\n    }\r\n    /**\r\n     * Unsubscribe from events\r\n     */\r\n    unsubscribe(sid) {\r\n        this.subscriptions.remove(sid);\r\n    }\r\n    /**\r\n     * Handle transport establishing event\r\n     * If we have any subscriptions - we should check object for modifications\r\n     */\r\n    onConnectionStateChanged(isConnected) {\r\n        this.subscriptions.onConnectionStateChanged(isConnected);\r\n    }\r\n}\r\nexports.Router = Router;\r\nexports.default = Router;\r\n"]},"metadata":{},"sourceType":"script"}