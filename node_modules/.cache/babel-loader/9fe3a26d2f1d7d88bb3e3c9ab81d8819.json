{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkService = void 0;\n\nconst uuid = require(\"uuid\");\n\nconst syncerror_1 = require(\"../utils/syncerror\");\n\nconst logger_1 = require(\"../utils/logger\");\n\nconst operation_retrier_1 = require(\"operation-retrier\");\n\nconst twilsock_1 = require(\"twilsock\");\n\nconst MINIMUM_RETRY_DELAY = 4000;\nconst MAXIMUM_RETRY_DELAY = 60000;\nconst MAXIMUM_ATTEMPTS_TIME = 90000;\nconst RETRY_DELAY_RANDOMNESS = 0.2;\n\nfunction messageFromErrorBody(transportError) {\n  if (transportError.body) {\n    if (transportError.body.message) {\n      return transportError.body.message;\n    }\n  }\n\n  switch (transportError.status) {\n    case 429:\n      return 'Throttled by server';\n\n    case 404:\n      return 'Not found from server';\n\n    default:\n      return 'Error from server';\n  }\n}\n\nfunction codeFromErrorBody(trasportError) {\n  if (trasportError.body) {\n    return trasportError.body.code;\n  }\n\n  return 0;\n}\n\nfunction mapTransportError(transportError) {\n  if (transportError.status === 409) {\n    return new syncerror_1.SyncNetworkError(messageFromErrorBody(transportError), transportError.status, codeFromErrorBody(transportError), transportError.body);\n  } else if (transportError.status) {\n    return new syncerror_1.SyncError(messageFromErrorBody(transportError), transportError.status, codeFromErrorBody(transportError));\n  } else if (transportError instanceof twilsock_1.TransportUnavailableError) {\n    return transportError;\n  } else {\n    return new syncerror_1.SyncError(transportError.message, 0, 0);\n  }\n}\n/**\r\n * @classdesc Incapsulates network operations to make it possible to add some optimization/caching strategies\r\n */\n\n\nclass NetworkService {\n  constructor(clientInfo, config, transport) {\n    this.clientInfo = clientInfo;\n    this.config = config;\n    this.transport = transport;\n  }\n\n  createHeaders() {\n    return {\n      'Content-Type': 'application/json',\n      'Twilio-Sync-Client-Info': JSON.stringify(this.clientInfo),\n      'Twilio-Request-Id': 'RQ' + uuid.v4().replace(/-/g, '')\n    };\n  }\n\n  backoffConfig() {\n    return Object.assign({\n      min: MINIMUM_RETRY_DELAY,\n      max: MAXIMUM_RETRY_DELAY,\n      maxAttemptsTime: MAXIMUM_ATTEMPTS_TIME,\n      randomness: RETRY_DELAY_RANDOMNESS\n    }, this.config.backoffConfig);\n  }\n\n  executeWithRetry(request, retryWhenThrottled = true) {\n    return new Promise((resolve, reject) => {\n      let codesToRetryOn = [502, 503, 504];\n\n      if (retryWhenThrottled) {\n        codesToRetryOn.push(429);\n      }\n\n      let retrier = new operation_retrier_1.Retrier(this.backoffConfig());\n      retrier.on('attempt', () => {\n        request().then(result => retrier.succeeded(result)).catch(err => {\n          if (codesToRetryOn.includes(err.status)) {\n            let delayOverride = parseInt(err.headers ? err.headers['Retry-After'] : null);\n            retrier.failed(mapTransportError(err), isNaN(delayOverride) ? null : delayOverride * 1000);\n          } else if (err.message === 'Twilsock disconnected') {\n            // Ugly hack. We must make a proper exceptions for twilsock\n            retrier.failed(mapTransportError(err));\n          } else {\n            // Fatal error\n            retrier.removeAllListeners();\n            retrier.cancel();\n            reject(mapTransportError(err));\n          }\n        });\n      });\n      retrier.on('succeeded', result => {\n        resolve(result);\n      });\n      retrier.on('cancelled', err => reject(mapTransportError(err)));\n      retrier.on('failed', err => reject(mapTransportError(err)));\n      retrier.start();\n    });\n  }\n  /**\r\n   * Make a GET request by given URI\r\n   * @Returns Promise<Response> Result of successful get request\r\n   */\n\n\n  get(uri) {\n    let headers = this.createHeaders();\n    logger_1.default.debug('GET', uri, 'ID:', headers['Twilio-Request-Id']);\n    return this.executeWithRetry(() => this.transport.get(uri, headers, this.config.productId), true);\n  }\n\n  post(uri, body, revision, retryWhenThrottled = false) {\n    let headers = this.createHeaders();\n\n    if (typeof revision !== 'undefined' && revision !== null) {\n      headers['If-Match'] = revision;\n    }\n\n    logger_1.default.debug('POST', uri, 'ID:', headers['Twilio-Request-Id']);\n    return this.executeWithRetry(() => this.transport.post(uri, headers, body, this.config.productId), retryWhenThrottled);\n  }\n\n  put(uri, body, revision) {\n    let headers = this.createHeaders();\n\n    if (typeof revision !== 'undefined' && revision !== null) {\n      headers['If-Match'] = revision;\n    }\n\n    logger_1.default.debug('PUT', uri, 'ID:', headers['Twilio-Request-Id']);\n    return this.executeWithRetry(() => this.transport.put(uri, headers, body, this.config.productId), false);\n  }\n\n  delete(uri) {\n    let headers = this.createHeaders();\n    logger_1.default.debug('DELETE', uri, 'ID:', headers['Twilio-Request-Id']);\n    return this.executeWithRetry(() => this.transport.delete(uri, headers, this.config.productId), false);\n  }\n\n}\n\nexports.NetworkService = NetworkService;","map":{"version":3,"sources":["C:/Users/IJuanchoG/Desktop/Twilio/node_modules/twilio-sync/lib/services/network.js"],"names":["Object","defineProperty","exports","value","NetworkService","uuid","require","syncerror_1","logger_1","operation_retrier_1","twilsock_1","MINIMUM_RETRY_DELAY","MAXIMUM_RETRY_DELAY","MAXIMUM_ATTEMPTS_TIME","RETRY_DELAY_RANDOMNESS","messageFromErrorBody","transportError","body","message","status","codeFromErrorBody","trasportError","code","mapTransportError","SyncNetworkError","SyncError","TransportUnavailableError","constructor","clientInfo","config","transport","createHeaders","JSON","stringify","v4","replace","backoffConfig","assign","min","max","maxAttemptsTime","randomness","executeWithRetry","request","retryWhenThrottled","Promise","resolve","reject","codesToRetryOn","push","retrier","Retrier","on","then","result","succeeded","catch","err","includes","delayOverride","parseInt","headers","failed","isNaN","removeAllListeners","cancel","start","get","uri","default","debug","productId","post","revision","put","delete"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NetworkService = void 0;\r\nconst uuid = require(\"uuid\");\r\nconst syncerror_1 = require(\"../utils/syncerror\");\r\nconst logger_1 = require(\"../utils/logger\");\r\nconst operation_retrier_1 = require(\"operation-retrier\");\r\nconst twilsock_1 = require(\"twilsock\");\r\nconst MINIMUM_RETRY_DELAY = 4000;\r\nconst MAXIMUM_RETRY_DELAY = 60000;\r\nconst MAXIMUM_ATTEMPTS_TIME = 90000;\r\nconst RETRY_DELAY_RANDOMNESS = 0.2;\r\nfunction messageFromErrorBody(transportError) {\r\n    if (transportError.body) {\r\n        if (transportError.body.message) {\r\n            return transportError.body.message;\r\n        }\r\n    }\r\n    switch (transportError.status) {\r\n        case 429:\r\n            return 'Throttled by server';\r\n        case 404:\r\n            return 'Not found from server';\r\n        default:\r\n            return 'Error from server';\r\n    }\r\n}\r\nfunction codeFromErrorBody(trasportError) {\r\n    if (trasportError.body) {\r\n        return trasportError.body.code;\r\n    }\r\n    return 0;\r\n}\r\nfunction mapTransportError(transportError) {\r\n    if (transportError.status === 409) {\r\n        return new syncerror_1.SyncNetworkError(messageFromErrorBody(transportError), transportError.status, codeFromErrorBody(transportError), transportError.body);\r\n    }\r\n    else if (transportError.status) {\r\n        return new syncerror_1.SyncError(messageFromErrorBody(transportError), transportError.status, codeFromErrorBody(transportError));\r\n    }\r\n    else if (transportError instanceof twilsock_1.TransportUnavailableError) {\r\n        return transportError;\r\n    }\r\n    else {\r\n        return new syncerror_1.SyncError(transportError.message, 0, 0);\r\n    }\r\n}\r\n/**\r\n * @classdesc Incapsulates network operations to make it possible to add some optimization/caching strategies\r\n */\r\nclass NetworkService {\r\n    constructor(clientInfo, config, transport) {\r\n        this.clientInfo = clientInfo;\r\n        this.config = config;\r\n        this.transport = transport;\r\n    }\r\n    createHeaders() {\r\n        return {\r\n            'Content-Type': 'application/json',\r\n            'Twilio-Sync-Client-Info': JSON.stringify(this.clientInfo),\r\n            'Twilio-Request-Id': 'RQ' + uuid.v4().replace(/-/g, '')\r\n        };\r\n    }\r\n    backoffConfig() {\r\n        return Object.assign({\r\n            min: MINIMUM_RETRY_DELAY,\r\n            max: MAXIMUM_RETRY_DELAY,\r\n            maxAttemptsTime: MAXIMUM_ATTEMPTS_TIME,\r\n            randomness: RETRY_DELAY_RANDOMNESS\r\n        }, this.config.backoffConfig);\r\n    }\r\n    executeWithRetry(request, retryWhenThrottled = true) {\r\n        return new Promise((resolve, reject) => {\r\n            let codesToRetryOn = [502, 503, 504];\r\n            if (retryWhenThrottled) {\r\n                codesToRetryOn.push(429);\r\n            }\r\n            let retrier = new operation_retrier_1.Retrier(this.backoffConfig());\r\n            retrier.on('attempt', () => {\r\n                request()\r\n                    .then(result => retrier.succeeded(result))\r\n                    .catch(err => {\r\n                    if (codesToRetryOn.includes(err.status)) {\r\n                        let delayOverride = parseInt(err.headers ? err.headers['Retry-After'] : null);\r\n                        retrier.failed(mapTransportError(err), isNaN(delayOverride) ? null : delayOverride * 1000);\r\n                    }\r\n                    else if (err.message === 'Twilsock disconnected') {\r\n                        // Ugly hack. We must make a proper exceptions for twilsock\r\n                        retrier.failed(mapTransportError(err));\r\n                    }\r\n                    else {\r\n                        // Fatal error\r\n                        retrier.removeAllListeners();\r\n                        retrier.cancel();\r\n                        reject(mapTransportError(err));\r\n                    }\r\n                });\r\n            });\r\n            retrier.on('succeeded', result => {\r\n                resolve(result);\r\n            });\r\n            retrier.on('cancelled', err => reject(mapTransportError(err)));\r\n            retrier.on('failed', err => reject(mapTransportError(err)));\r\n            retrier.start();\r\n        });\r\n    }\r\n    /**\r\n     * Make a GET request by given URI\r\n     * @Returns Promise<Response> Result of successful get request\r\n     */\r\n    get(uri) {\r\n        let headers = this.createHeaders();\r\n        logger_1.default.debug('GET', uri, 'ID:', headers['Twilio-Request-Id']);\r\n        return this.executeWithRetry(() => this.transport.get(uri, headers, this.config.productId), true);\r\n    }\r\n    post(uri, body, revision, retryWhenThrottled = false) {\r\n        let headers = this.createHeaders();\r\n        if (typeof revision !== 'undefined' && revision !== null) {\r\n            headers['If-Match'] = revision;\r\n        }\r\n        logger_1.default.debug('POST', uri, 'ID:', headers['Twilio-Request-Id']);\r\n        return this.executeWithRetry(() => this.transport.post(uri, headers, body, this.config.productId), retryWhenThrottled);\r\n    }\r\n    put(uri, body, revision) {\r\n        let headers = this.createHeaders();\r\n        if (typeof revision !== 'undefined' && revision !== null) {\r\n            headers['If-Match'] = revision;\r\n        }\r\n        logger_1.default.debug('PUT', uri, 'ID:', headers['Twilio-Request-Id']);\r\n        return this.executeWithRetry(() => this.transport.put(uri, headers, body, this.config.productId), false);\r\n    }\r\n    delete(uri) {\r\n        let headers = this.createHeaders();\r\n        logger_1.default.debug('DELETE', uri, 'ID:', headers['Twilio-Request-Id']);\r\n        return this.executeWithRetry(() => this.transport.delete(uri, headers, this.config.productId), false);\r\n    }\r\n}\r\nexports.NetworkService = NetworkService;\r\n"]},"metadata":{},"sourceType":"script"}