{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar StateMachine = require('./statemachine');\n\nvar _require = require('./util'),\n    buildLogLevels = _require.buildLogLevels,\n    makeUUID = _require.makeUUID;\n\nvar Log = require('./util/log');\n\nvar NetworkMonitor = require('./util/networkmonitor');\n\nvar Timeout = require('./util/timeout');\n\nvar nInstances = 0;\n/*\r\n  TwilioConnection states\r\n  -----------------------\r\n\r\n       ------------------------------------------\r\n       |                                        |\r\n       |                                        v\r\n  +---------+       +--------------+       +----------+\r\n  |  early  | ----> |  connecting  | ----> |  closed  |\r\n  +---------+       +--------------+       +----------+\r\n    ^                     | ^ |                 ^ ^\r\n    | --------------------- | |                 | |\r\n    | | --------------------- |                 | |\r\n    | | | --------------------|------------------ |\r\n    | v | |                   v                   |\r\n  +----------+           +--------+               |\r\n  | waiting  | --------> |  open  | ---------------\r\n  +----------+           +--------+\r\n */\n\nvar states = {\n  closed: [],\n  connecting: ['closed', 'open', 'waiting'],\n  early: ['closed', 'connecting'],\n  open: ['closed'],\n  waiting: ['closed', 'connecting', 'early', 'open']\n};\nvar events = {\n  closed: 'close',\n  open: 'open',\n  waiting: 'waiting'\n};\nvar TCMP_VERSION = 2;\nvar DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS = 3;\nvar DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS = 3;\nvar DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT = 5000;\nvar DEFAULT_OPEN_TIMEOUT = 15000;\nvar DEFAULT_WELCOME_TIMEOUT = 5000;\nvar OUTGOING_HEARTBEAT_OFFSET = 200;\nvar WS_CLOSE_NORMAL = 1000;\nvar WS_CLOSE_WELCOME_TIMEOUT = 3000;\nvar WS_CLOSE_HEARTBEATS_MISSED = 3001;\nvar WS_CLOSE_HELLO_FAILED = 3002;\nvar WS_CLOSE_SEND_FAILED = 3003;\nvar WS_CLOSE_NETWORK_CHANGED = 3004;\nvar WS_CLOSE_BUSY_WAIT = 3005;\nvar WS_CLOSE_SERVER_BUSY = 3006;\nvar WS_CLOSE_OPEN_TIMEOUT = 3007;\nvar toplevel = global.window || global;\nvar WebSocket = toplevel.WebSocket ? toplevel.WebSocket : require('ws');\nvar CloseReason = {\n  BUSY: 'busy',\n  FAILED: 'failed',\n  LOCAL: 'local',\n  REMOTE: 'remote',\n  TIMEOUT: 'timeout'\n};\nvar wsCloseCodesToCloseReasons = new Map([[WS_CLOSE_WELCOME_TIMEOUT, CloseReason.TIMEOUT], [WS_CLOSE_HEARTBEATS_MISSED, CloseReason.TIMEOUT], [WS_CLOSE_HELLO_FAILED, CloseReason.FAILED], [WS_CLOSE_SEND_FAILED, CloseReason.FAILED], [WS_CLOSE_NETWORK_CHANGED, CloseReason.TIMEOUT], [WS_CLOSE_SERVER_BUSY, CloseReason.BUSY], [WS_CLOSE_OPEN_TIMEOUT, CloseReason.TIMEOUT]]);\n/**\r\n * A {@link TwilioConnection} represents a WebSocket connection\r\n * to a Twilio Connections Messaging Protocol (TCMP) server.\r\n * @fires TwilioConnection#close\r\n * @fires TwilioConnection#error\r\n * @fires TwilioConnection#message\r\n * @fires TwilioConnection#open\r\n * @fires TwilioConnection#waiting\r\n */\n\nvar TwilioConnection = function (_StateMachine) {\n  _inherits(TwilioConnection, _StateMachine);\n  /**\r\n   * Construct a {@link TwilioConnection}.\r\n   * @param {string} serverUrl - TCMP server url\r\n   * @param {TwilioConnectionOptions} options - {@link TwilioConnection} options\r\n   */\n\n\n  function TwilioConnection(serverUrl, options) {\n    _classCallCheck(this, TwilioConnection);\n\n    var _this = _possibleConstructorReturn(this, (TwilioConnection.__proto__ || Object.getPrototypeOf(TwilioConnection)).call(this, 'early', states));\n\n    options = Object.assign({\n      helloBody: null,\n      maxConsecutiveFailedHellos: DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS,\n      maxConsecutiveMissedHeartbeats: DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS,\n      requestedHeartbeatTimeout: DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT,\n      openTimeout: DEFAULT_OPEN_TIMEOUT,\n      welcomeTimeout: DEFAULT_WELCOME_TIMEOUT,\n      Log: Log,\n      WebSocket: WebSocket\n    }, options);\n    var logLevels = buildLogLevels(options.logLevel);\n    var log = new options.Log('default', _this, logLevels, options.loggerName);\n    var networkMonitor = options.networkMonitor ? new NetworkMonitor(function () {\n      var type = networkMonitor.type;\n      var reason = 'Network changed' + (type ? ' to ' + type : '');\n      log.debug(reason);\n\n      _this._close({\n        code: WS_CLOSE_NETWORK_CHANGED,\n        reason: reason\n      });\n    }) : null;\n    Object.defineProperties(_this, {\n      _busyWaitTimeout: {\n        value: null,\n        writable: true\n      },\n      _consecutiveHeartbeatsMissed: {\n        value: 0,\n        writable: true\n      },\n      _cookie: {\n        value: null,\n        writable: true\n      },\n      _eventObserver: {\n        value: options.eventObserver\n      },\n      _heartbeatTimeout: {\n        value: null,\n        writable: true\n      },\n      _hellosLeft: {\n        value: options.maxConsecutiveFailedHellos,\n        writable: true\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _log: {\n        value: log\n      },\n      _messageQueue: {\n        value: []\n      },\n      _networkMonitor: {\n        value: networkMonitor\n      },\n      _options: {\n        value: options\n      },\n      _openTimeout: {\n        value: null,\n        writable: true\n      },\n      _sendHeartbeatTimeout: {\n        value: null,\n        writable: true\n      },\n      _serverUrl: {\n        value: serverUrl\n      },\n      _welcomeTimeout: {\n        value: null,\n        writable: true\n      },\n      _ws: {\n        value: null,\n        writable: true\n      }\n    });\n    var eventsToLevels = {\n      connecting: 'info',\n      early: 'info',\n      open: 'info',\n      waiting: 'warning',\n      closed: 'info'\n    };\n\n    _this.on('stateChanged', function (state) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (state in events) {\n        _this.emit.apply(_this, [events[state]].concat(args));\n      }\n\n      var event = {\n        name: state,\n        group: 'signaling',\n        level: eventsToLevels[_this.state]\n      };\n\n      if (state === 'closed') {\n        var reason = args[0];\n        event.payload = {\n          reason: reason\n        };\n        event.level = reason === CloseReason.LOCAL ? 'info' : 'error';\n      }\n\n      _this._eventObserver.emit('event', event);\n    });\n\n    _this._eventObserver.emit('event', {\n      name: _this.state,\n      group: 'signaling',\n      level: eventsToLevels[_this.state]\n    });\n\n    _this._connect();\n\n    return _this;\n  }\n\n  _createClass(TwilioConnection, [{\n    key: 'toString',\n    value: function toString() {\n      return '[TwilioConnection #' + this._instanceId + ': ' + this._ws.url + ']';\n    }\n    /**\r\n     * Close the {@link TwilioConnection}.\r\n     * @param {{code: number, reason: string}} event\r\n     * @private\r\n     */\n\n  }, {\n    key: '_close',\n    value: function _close(_ref) {\n      var code = _ref.code,\n          reason = _ref.reason;\n\n      if (this.state === 'closed') {\n        return;\n      }\n\n      if (this._openTimeout) {\n        this._openTimeout.clear();\n      }\n\n      if (this._welcomeTimeout) {\n        this._welcomeTimeout.clear();\n      }\n\n      if (this._heartbeatTimeout) {\n        this._heartbeatTimeout.clear();\n      }\n\n      if (this._sendHeartbeatTimeout) {\n        this._sendHeartbeatTimeout.clear();\n      }\n\n      if (this._networkMonitor) {\n        this._networkMonitor.stop();\n      }\n\n      if (this._busyWaitTimeout && code !== WS_CLOSE_BUSY_WAIT) {\n        this._busyWaitTimeout.clear();\n      }\n\n      this._messageQueue.splice(0);\n\n      var log = this._log;\n\n      if (code === WS_CLOSE_NORMAL) {\n        log.debug('Closed');\n        this.transition('closed', null, [CloseReason.LOCAL]);\n      } else {\n        log.warn('Closed: ' + code + ' - ' + reason);\n\n        if (code !== WS_CLOSE_BUSY_WAIT) {\n          this.transition('closed', null, [wsCloseCodesToCloseReasons.get(code) || CloseReason.REMOTE]);\n        }\n      }\n\n      var readyState = this._ws.readyState;\n      var WebSocket = this._options.WebSocket;\n\n      if (readyState !== WebSocket.CLOSING && readyState !== WebSocket.CLOSED) {\n        this._ws.close(code, reason);\n      }\n    }\n    /**\r\n     * Connect to the TCMP server.\r\n     * @private\r\n     */\n\n  }, {\n    key: '_connect',\n    value: function _connect() {\n      var _this2 = this;\n\n      var log = this._log;\n\n      if (this.state === 'waiting') {\n        this.transition('early');\n      } else if (this.state !== 'early') {\n        log.warn('Unexpected state \"' + this.state + '\" for connecting to the' + ' TCMP server.');\n        return;\n      }\n\n      this._ws = new this._options.WebSocket(this._serverUrl);\n      var ws = this._ws;\n      log.debug('Created a new WebSocket:', ws);\n      ws.addEventListener('close', function (event) {\n        return _this2._close(event);\n      });\n      var openTimeout = this._options.openTimeout; // Add a timeout for getting the onopen event on the WebSocket (15 sec). After that, attempt to reconnect only if this is not the first attempt.\n\n      this._openTimeout = new Timeout(function () {\n        var reason = 'Failed to open in ' + openTimeout + ' ms';\n\n        _this2._close({\n          code: WS_CLOSE_OPEN_TIMEOUT,\n          reason: reason\n        });\n      }, openTimeout);\n      ws.addEventListener('open', function () {\n        log.debug('WebSocket opened:', ws);\n\n        _this2._openTimeout.clear();\n\n        _this2._startHandshake();\n\n        if (_this2._networkMonitor) {\n          _this2._networkMonitor.start();\n        }\n      });\n      ws.addEventListener('message', function (message) {\n        log.debug('Incoming: ' + message.data);\n\n        try {\n          message = JSON.parse(message.data);\n        } catch (error) {\n          _this2.emit('error', error);\n\n          return;\n        }\n\n        switch (message.type) {\n          case 'bad':\n            _this2._handleBad(message);\n\n            break;\n\n          case 'busy':\n            _this2._handleBusy(message);\n\n            break;\n\n          case 'bye':\n            // Do nothing.\n            break;\n\n          case 'msg':\n            _this2._handleMessage(message);\n\n          // NOTE(mpatwardhan): Each incoming message should be treated as an incoming\n          // heartbeat intentionally falling through to 'heartbeat' case.\n          // eslint-disable-next-line no-fallthrough\n\n          case 'heartbeat':\n            _this2._handleHeartbeat();\n\n            break;\n\n          case 'welcome':\n            _this2._handleWelcome(message);\n\n            break;\n\n          default:\n            _this2._log.debug('Unknown message type: ' + message.type);\n\n            _this2.emit('error', new Error('Unknown message type: ' + message.type));\n\n            break;\n        }\n      });\n    }\n    /**\r\n     * Handle an incoming \"bad\" message.\r\n     * @param {{reason: string}} message\r\n     * @private\r\n     */\n\n  }, {\n    key: '_handleBad',\n    value: function _handleBad(_ref2) {\n      var reason = _ref2.reason;\n      var log = this._log;\n\n      if (!['connecting', 'open'].includes(this.state)) {\n        log.warn('Unexpected state \"' + this.state + '\" for handling a \"bad\" message' + ' from the TCMP server.');\n        return;\n      }\n\n      if (this.state === 'connecting') {\n        log.warn('Closing: ' + WS_CLOSE_HELLO_FAILED + ' - ' + reason);\n\n        this._close({\n          code: WS_CLOSE_HELLO_FAILED,\n          reason: reason\n        });\n\n        return;\n      }\n\n      log.debug('Error: ' + reason);\n      this.emit('error', new Error(reason));\n    }\n    /**\r\n     * Handle an incoming \"busy\" message.\r\n     * @param {{cookie: ?string, keepAlive: boolean, retryAfter: number}} message\r\n     * @private\r\n     */\n\n  }, {\n    key: '_handleBusy',\n    value: function _handleBusy(_ref3) {\n      var _this3 = this;\n\n      var cookie = _ref3.cookie,\n          keepAlive = _ref3.keepAlive,\n          retryAfter = _ref3.retryAfter;\n      var log = this._log;\n\n      if (!['connecting', 'waiting'].includes(this.state)) {\n        log.warn('Unexpected state \"' + this.state + '\" for handling a \"busy\" message' + ' from the TCMP server.');\n        return;\n      }\n\n      if (this._busyWaitTimeout) {\n        this._busyWaitTimeout.clear();\n      }\n\n      if (this._welcomeTimeout) {\n        this._welcomeTimeout.clear();\n      }\n\n      var reason = retryAfter < 0 ? 'Received terminal \"busy\" message' : 'Received \"busy\" message, retrying after ' + retryAfter + ' ms';\n\n      if (retryAfter < 0) {\n        log.warn('Closing: ' + WS_CLOSE_SERVER_BUSY + ' - ' + reason);\n\n        this._close({\n          code: WS_CLOSE_SERVER_BUSY,\n          reason: reason\n        });\n\n        return;\n      }\n\n      var maxConsecutiveFailedHellos = this._options.maxConsecutiveFailedHellos;\n      this._hellosLeft = maxConsecutiveFailedHellos;\n      this._cookie = cookie || null;\n\n      if (keepAlive) {\n        log.warn(reason);\n        this._busyWaitTimeout = new Timeout(function () {\n          return _this3._startHandshake();\n        }, retryAfter);\n      } else {\n        log.warn('Closing: ' + WS_CLOSE_BUSY_WAIT + ' - ' + reason);\n\n        this._close({\n          code: WS_CLOSE_BUSY_WAIT,\n          reason: reason\n        });\n\n        this._busyWaitTimeout = new Timeout(function () {\n          return _this3._connect();\n        }, retryAfter);\n      }\n\n      this.transition('waiting', null, [keepAlive, retryAfter]);\n    }\n    /**\r\n     * Handle an incoming \"heartbeat\" message.\r\n     * @private\r\n     */\n\n  }, {\n    key: '_handleHeartbeat',\n    value: function _handleHeartbeat() {\n      if (this.state !== 'open') {\n        this._log.warn('Unexpected state \"' + this.state + '\" for handling a \"heartbeat\"' + ' message from the TCMP server.');\n\n        return;\n      }\n\n      this._heartbeatTimeout.reset();\n    }\n    /**\r\n     * Handle a missed \"heartbeat\" message.\r\n     * @private\r\n     */\n\n  }, {\n    key: '_handleHeartbeatTimeout',\n    value: function _handleHeartbeatTimeout() {\n      if (this.state !== 'open') {\n        return;\n      }\n\n      var log = this._log;\n      var maxConsecutiveMissedHeartbeats = this._options.maxConsecutiveMissedHeartbeats;\n      log.debug('Consecutive heartbeats missed: ' + maxConsecutiveMissedHeartbeats);\n      var reason = 'Missed ' + maxConsecutiveMissedHeartbeats + ' \"heartbeat\" messages';\n      log.warn('Closing: ' + WS_CLOSE_HEARTBEATS_MISSED + ' - ' + reason);\n\n      this._close({\n        code: WS_CLOSE_HEARTBEATS_MISSED,\n        reason: reason\n      });\n    }\n    /**\r\n     * Handle an incoming \"msg\" message.\r\n     * @param {{body: object}} message\r\n     * @private\r\n     */\n\n  }, {\n    key: '_handleMessage',\n    value: function _handleMessage(_ref4) {\n      var body = _ref4.body;\n\n      if (this.state !== 'open') {\n        this._log.warn('Unexpected state \"' + this.state + '\" for handling a \"msg\" message' + ' from the TCMP server.');\n\n        return;\n      }\n\n      this.emit('message', body);\n    }\n    /**\r\n     * Handle an incoming \"welcome\" message.\r\n     * @param {{ negotiatedTimeout: number }} message\r\n     * @private\r\n     */\n\n  }, {\n    key: '_handleWelcome',\n    value: function _handleWelcome(_ref5) {\n      var _this4 = this;\n\n      var negotiatedTimeout = _ref5.negotiatedTimeout;\n      var log = this._log;\n\n      if (!['connecting', 'waiting'].includes(this.state)) {\n        log.warn('Unexpected state \"' + this.state + '\" for handling a \"welcome\"' + ' message from the TCMP server.');\n        return;\n      }\n\n      if (this.state === 'waiting') {\n        log.debug('Received \"welcome\" message, no need to retry connection.');\n\n        this._busyWaitTimeout.clear();\n      }\n\n      var maxConsecutiveMissedHeartbeats = this._options.maxConsecutiveMissedHeartbeats;\n      var heartbeatTimeout = negotiatedTimeout * maxConsecutiveMissedHeartbeats;\n      var outgoingHeartbeatTimeout = negotiatedTimeout - OUTGOING_HEARTBEAT_OFFSET;\n\n      this._welcomeTimeout.clear();\n\n      this._heartbeatTimeout = new Timeout(function () {\n        return _this4._handleHeartbeatTimeout();\n      }, heartbeatTimeout);\n\n      this._messageQueue.splice(0).forEach(function (message) {\n        return _this4._send(message);\n      });\n\n      this._sendHeartbeatTimeout = new Timeout(function () {\n        return _this4._sendHeartbeat();\n      }, outgoingHeartbeatTimeout);\n      this.transition('open');\n    }\n    /**\r\n     * Handle a missed \"welcome\" message.\r\n     * @private\r\n     */\n\n  }, {\n    key: '_handleWelcomeTimeout',\n    value: function _handleWelcomeTimeout() {\n      if (this.state !== 'connecting') {\n        return;\n      }\n\n      var log = this._log;\n\n      if (this._hellosLeft <= 0) {\n        var reason = 'All handshake attempts failed';\n        log.warn('Closing: ' + WS_CLOSE_WELCOME_TIMEOUT + ' - ' + reason);\n\n        this._close({\n          code: WS_CLOSE_WELCOME_TIMEOUT,\n          reason: reason\n        });\n\n        return;\n      }\n\n      var maxConsecutiveFailedHellos = this._options.maxConsecutiveFailedHellos;\n      log.warn('Handshake attempt ' + (maxConsecutiveFailedHellos - this._hellosLeft) + ' failed');\n\n      this._startHandshake();\n    }\n    /**\r\n     * Send a message to the TCMP server.\r\n     * @param {*} message\r\n     * @private\r\n     */\n\n  }, {\n    key: '_send',\n    value: function _send(message) {\n      var readyState = this._ws.readyState;\n      var WebSocket = this._options.WebSocket;\n\n      if (readyState === WebSocket.OPEN) {\n        var data = JSON.stringify(message);\n\n        this._log.debug('Outgoing: ' + data);\n\n        try {\n          this._ws.send(data);\n\n          if (this._sendHeartbeatTimeout) {\n            // Each outgoing message is to be treated as an outgoing heartbeat.\n            this._sendHeartbeatTimeout.reset();\n          }\n        } catch (error) {\n          var reason = 'Failed to send message';\n\n          this._log.warn('Closing: ' + WS_CLOSE_SEND_FAILED + ' - ' + reason);\n\n          this._close({\n            code: WS_CLOSE_SEND_FAILED,\n            reason: reason\n          });\n        }\n      }\n    }\n    /**\r\n     * Send a \"heartbeat\" message.\r\n     * @private\r\n     */\n\n  }, {\n    key: '_sendHeartbeat',\n    value: function _sendHeartbeat() {\n      if (this.state === 'closed') {\n        return;\n      }\n\n      this._send({\n        type: 'heartbeat'\n      });\n    }\n    /**\r\n     * Send a \"hello\" message.\r\n     * @private\r\n     */\n\n  }, {\n    key: '_sendHello',\n    value: function _sendHello() {\n      var _options = this._options,\n          helloBody = _options.helloBody,\n          timeout = _options.requestedHeartbeatTimeout;\n      var hello = {\n        id: makeUUID(),\n        timeout: timeout,\n        type: 'hello',\n        version: TCMP_VERSION\n      };\n\n      if (this._cookie) {\n        hello.cookie = this._cookie;\n      }\n\n      if (helloBody) {\n        hello.body = helloBody;\n      }\n\n      this._send(hello);\n    }\n    /**\r\n     * Send or enqueue a message.\r\n     * @param {*} message\r\n     * @private\r\n     */\n\n  }, {\n    key: '_sendOrEnqueue',\n    value: function _sendOrEnqueue(message) {\n      var _this5 = this;\n\n      if (this.state === 'closed') {\n        return;\n      }\n\n      var sendOrEnqueue = this.state === 'open' ? function (message) {\n        return _this5._send(message);\n      } : function (message) {\n        return _this5._messageQueue.push(message);\n      };\n      sendOrEnqueue(message);\n    }\n    /**\r\n     * Start the TCMP handshake.\r\n     * @private\r\n     */\n\n  }, {\n    key: '_startHandshake',\n    value: function _startHandshake() {\n      var _this6 = this;\n\n      if (['early', 'waiting'].includes(this.state)) {\n        this.transition('connecting');\n      }\n\n      if (this.state !== 'connecting') {\n        return;\n      }\n\n      this._hellosLeft--;\n\n      this._sendHello();\n\n      var welcomeTimeout = this._options.welcomeTimeout;\n      this._welcomeTimeout = new Timeout(function () {\n        return _this6._handleWelcomeTimeout();\n      }, welcomeTimeout);\n    }\n    /**\r\n     * Close the {@link TwilioConnection}.\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      if (this.state === 'closed') {\n        return;\n      }\n\n      this._sendOrEnqueue({\n        type: 'bye'\n      });\n\n      this._close({\n        code: WS_CLOSE_NORMAL,\n        reason: 'Normal'\n      });\n    }\n    /**\r\n     * Send a \"msg\" message.\r\n     * @param {*} body\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: 'sendMessage',\n    value: function sendMessage(body) {\n      this._sendOrEnqueue({\n        body: body,\n        type: 'msg'\n      });\n    }\n  }]);\n\n  return TwilioConnection;\n}(StateMachine);\n/**\r\n * A unique string depicting the reason for the {@link TwilioConnection} being closed.\r\n * @enum {string}\r\n */\n\n\nTwilioConnection.CloseReason = CloseReason;\n/**\r\n * A {@link TwilioConnection} was closed.\r\n * @event TwilioConnection#close\r\n * @param {CloseReason} reason - The reason for the {@link TwilioConnection} being closed\r\n */\n\n/**\r\n * A {@link TwilioConnection} received an error from the TCMP server.\r\n * @event TwilioConnection#error\r\n * @param {Error} error - The TCMP server error\r\n */\n\n/**\r\n * A {@link TwilioConnection} received a message from the TCMP server.\r\n * @event TwilioConnection#message\r\n * @param {*} body - Message body\r\n */\n\n/**\r\n * A {@link TwilioConnection} completed a hello/welcome handshake with the TCMP server.\r\n * @event TwilioConnection#open\r\n */\n\n/**\r\n * A {@link TwilioConnection} received a \"busy\" message from the TCMP server.\r\n * @event TwilioConnection#waiting\r\n * @param {boolean} keepAlive - true if the WebSocket connection is retained\r\n * @param {number} retryAfter - delay in milliseconds after which a retry is attempted\r\n */\n\n/**\r\n * {@link TwilioConnection} options\r\n * @typedef {object} TwilioConnectionOptions\r\n * @property {EventObserver} [eventObserver] - Optional event observer\r\n * @property {*} [helloBody=null] - Optional body for \"hello\" message\r\n * @property {LogLevel} [logLevel=warn] - Log level of the {@link TwilioConnection}\r\n * @property {number} [maxConsecutiveFailedHellos=3] - Max. number of consecutive failed \"hello\"s\r\n * @property {number} [maxConsecutiveMissedHeartbeats=3] - Max. number of (effective) consecutive \"heartbeat\" messages that can be missed\r\n * @property {number} [requestedHeartbeatTimeout=5000] - \"heartbeat\" timeout (ms) requested by the {@link TwilioConnection}\r\n * @property {number} [welcomeTimeout=5000] - Time (ms) to wait for the \"welcome\" message after sending the \"hello\" message\r\n */\n\nmodule.exports = TwilioConnection;","map":{"version":3,"sources":["C:/Users/USER/Desktop/ARSW III/Twilio/node_modules/twilio-video/es5/twilioconnection.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","StateMachine","require","_require","buildLogLevels","makeUUID","Log","NetworkMonitor","Timeout","nInstances","states","closed","connecting","early","open","waiting","events","TCMP_VERSION","DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS","DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS","DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT","DEFAULT_OPEN_TIMEOUT","DEFAULT_WELCOME_TIMEOUT","OUTGOING_HEARTBEAT_OFFSET","WS_CLOSE_NORMAL","WS_CLOSE_WELCOME_TIMEOUT","WS_CLOSE_HEARTBEATS_MISSED","WS_CLOSE_HELLO_FAILED","WS_CLOSE_SEND_FAILED","WS_CLOSE_NETWORK_CHANGED","WS_CLOSE_BUSY_WAIT","WS_CLOSE_SERVER_BUSY","WS_CLOSE_OPEN_TIMEOUT","toplevel","global","window","WebSocket","CloseReason","BUSY","FAILED","LOCAL","REMOTE","TIMEOUT","wsCloseCodesToCloseReasons","Map","TwilioConnection","_StateMachine","serverUrl","options","_this","getPrototypeOf","assign","helloBody","maxConsecutiveFailedHellos","maxConsecutiveMissedHeartbeats","requestedHeartbeatTimeout","openTimeout","welcomeTimeout","logLevels","logLevel","log","loggerName","networkMonitor","type","reason","debug","_close","code","_busyWaitTimeout","_consecutiveHeartbeatsMissed","_cookie","_eventObserver","eventObserver","_heartbeatTimeout","_hellosLeft","_instanceId","_log","_messageQueue","_networkMonitor","_options","_openTimeout","_sendHeartbeatTimeout","_serverUrl","_welcomeTimeout","_ws","eventsToLevels","on","state","_len","arguments","args","Array","_key","emit","apply","concat","event","name","group","level","payload","_connect","toString","url","_ref","clear","stop","splice","transition","warn","get","readyState","CLOSING","CLOSED","close","_this2","ws","addEventListener","_startHandshake","start","message","data","JSON","parse","error","_handleBad","_handleBusy","_handleMessage","_handleHeartbeat","_handleWelcome","Error","_ref2","includes","_ref3","_this3","cookie","keepAlive","retryAfter","reset","_handleHeartbeatTimeout","_ref4","body","_ref5","_this4","negotiatedTimeout","heartbeatTimeout","outgoingHeartbeatTimeout","forEach","_send","_sendHeartbeat","_handleWelcomeTimeout","OPEN","stringify","send","_sendHello","timeout","hello","id","version","_sendOrEnqueue","_this5","sendOrEnqueue","push","_this6","sendMessage","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\r\n\r\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\r\n\r\nvar StateMachine = require('./statemachine');\r\n\r\nvar _require = require('./util'),\r\n    buildLogLevels = _require.buildLogLevels,\r\n    makeUUID = _require.makeUUID;\r\n\r\nvar Log = require('./util/log');\r\nvar NetworkMonitor = require('./util/networkmonitor');\r\nvar Timeout = require('./util/timeout');\r\n\r\nvar nInstances = 0;\r\n\r\n/*\r\n  TwilioConnection states\r\n  -----------------------\r\n\r\n       ------------------------------------------\r\n       |                                        |\r\n       |                                        v\r\n  +---------+       +--------------+       +----------+\r\n  |  early  | ----> |  connecting  | ----> |  closed  |\r\n  +---------+       +--------------+       +----------+\r\n    ^                     | ^ |                 ^ ^\r\n    | --------------------- | |                 | |\r\n    | | --------------------- |                 | |\r\n    | | | --------------------|------------------ |\r\n    | v | |                   v                   |\r\n  +----------+           +--------+               |\r\n  | waiting  | --------> |  open  | ---------------\r\n  +----------+           +--------+\r\n */\r\n\r\nvar states = {\r\n  closed: [],\r\n  connecting: ['closed', 'open', 'waiting'],\r\n  early: ['closed', 'connecting'],\r\n  open: ['closed'],\r\n  waiting: ['closed', 'connecting', 'early', 'open']\r\n};\r\n\r\nvar events = {\r\n  closed: 'close',\r\n  open: 'open',\r\n  waiting: 'waiting'\r\n};\r\n\r\nvar TCMP_VERSION = 2;\r\n\r\nvar DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS = 3;\r\nvar DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS = 3;\r\nvar DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT = 5000;\r\nvar DEFAULT_OPEN_TIMEOUT = 15000;\r\nvar DEFAULT_WELCOME_TIMEOUT = 5000;\r\nvar OUTGOING_HEARTBEAT_OFFSET = 200;\r\n\r\nvar WS_CLOSE_NORMAL = 1000;\r\nvar WS_CLOSE_WELCOME_TIMEOUT = 3000;\r\nvar WS_CLOSE_HEARTBEATS_MISSED = 3001;\r\nvar WS_CLOSE_HELLO_FAILED = 3002;\r\nvar WS_CLOSE_SEND_FAILED = 3003;\r\nvar WS_CLOSE_NETWORK_CHANGED = 3004;\r\nvar WS_CLOSE_BUSY_WAIT = 3005;\r\nvar WS_CLOSE_SERVER_BUSY = 3006;\r\nvar WS_CLOSE_OPEN_TIMEOUT = 3007;\r\n\r\nvar toplevel = global.window || global;\r\nvar WebSocket = toplevel.WebSocket ? toplevel.WebSocket : require('ws');\r\n\r\nvar CloseReason = {\r\n  BUSY: 'busy',\r\n  FAILED: 'failed',\r\n  LOCAL: 'local',\r\n  REMOTE: 'remote',\r\n  TIMEOUT: 'timeout'\r\n};\r\n\r\nvar wsCloseCodesToCloseReasons = new Map([[WS_CLOSE_WELCOME_TIMEOUT, CloseReason.TIMEOUT], [WS_CLOSE_HEARTBEATS_MISSED, CloseReason.TIMEOUT], [WS_CLOSE_HELLO_FAILED, CloseReason.FAILED], [WS_CLOSE_SEND_FAILED, CloseReason.FAILED], [WS_CLOSE_NETWORK_CHANGED, CloseReason.TIMEOUT], [WS_CLOSE_SERVER_BUSY, CloseReason.BUSY], [WS_CLOSE_OPEN_TIMEOUT, CloseReason.TIMEOUT]]);\r\n\r\n/**\r\n * A {@link TwilioConnection} represents a WebSocket connection\r\n * to a Twilio Connections Messaging Protocol (TCMP) server.\r\n * @fires TwilioConnection#close\r\n * @fires TwilioConnection#error\r\n * @fires TwilioConnection#message\r\n * @fires TwilioConnection#open\r\n * @fires TwilioConnection#waiting\r\n */\r\n\r\nvar TwilioConnection = function (_StateMachine) {\r\n  _inherits(TwilioConnection, _StateMachine);\r\n\r\n  /**\r\n   * Construct a {@link TwilioConnection}.\r\n   * @param {string} serverUrl - TCMP server url\r\n   * @param {TwilioConnectionOptions} options - {@link TwilioConnection} options\r\n   */\r\n  function TwilioConnection(serverUrl, options) {\r\n    _classCallCheck(this, TwilioConnection);\r\n\r\n    var _this = _possibleConstructorReturn(this, (TwilioConnection.__proto__ || Object.getPrototypeOf(TwilioConnection)).call(this, 'early', states));\r\n\r\n    options = Object.assign({\r\n      helloBody: null,\r\n      maxConsecutiveFailedHellos: DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS,\r\n      maxConsecutiveMissedHeartbeats: DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS,\r\n      requestedHeartbeatTimeout: DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT,\r\n      openTimeout: DEFAULT_OPEN_TIMEOUT,\r\n      welcomeTimeout: DEFAULT_WELCOME_TIMEOUT,\r\n      Log: Log,\r\n      WebSocket: WebSocket\r\n    }, options);\r\n\r\n    var logLevels = buildLogLevels(options.logLevel);\r\n    var log = new options.Log('default', _this, logLevels, options.loggerName);\r\n\r\n    var networkMonitor = options.networkMonitor ? new NetworkMonitor(function () {\r\n      var type = networkMonitor.type;\r\n\r\n      var reason = 'Network changed' + (type ? ' to ' + type : '');\r\n      log.debug(reason);\r\n      _this._close({ code: WS_CLOSE_NETWORK_CHANGED, reason: reason });\r\n    }) : null;\r\n\r\n    Object.defineProperties(_this, {\r\n      _busyWaitTimeout: {\r\n        value: null,\r\n        writable: true\r\n      },\r\n      _consecutiveHeartbeatsMissed: {\r\n        value: 0,\r\n        writable: true\r\n      },\r\n      _cookie: {\r\n        value: null,\r\n        writable: true\r\n      },\r\n      _eventObserver: {\r\n        value: options.eventObserver\r\n      },\r\n      _heartbeatTimeout: {\r\n        value: null,\r\n        writable: true\r\n      },\r\n      _hellosLeft: {\r\n        value: options.maxConsecutiveFailedHellos,\r\n        writable: true\r\n      },\r\n      _instanceId: {\r\n        value: ++nInstances\r\n      },\r\n      _log: {\r\n        value: log\r\n      },\r\n      _messageQueue: {\r\n        value: []\r\n      },\r\n      _networkMonitor: {\r\n        value: networkMonitor\r\n      },\r\n      _options: {\r\n        value: options\r\n      },\r\n      _openTimeout: {\r\n        value: null,\r\n        writable: true\r\n      },\r\n      _sendHeartbeatTimeout: {\r\n        value: null,\r\n        writable: true\r\n      },\r\n      _serverUrl: {\r\n        value: serverUrl\r\n      },\r\n      _welcomeTimeout: {\r\n        value: null,\r\n        writable: true\r\n      },\r\n      _ws: {\r\n        value: null,\r\n        writable: true\r\n      }\r\n    });\r\n\r\n    var eventsToLevels = {\r\n      connecting: 'info',\r\n      early: 'info',\r\n      open: 'info',\r\n      waiting: 'warning',\r\n      closed: 'info'\r\n    };\r\n\r\n    _this.on('stateChanged', function (state) {\r\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n        args[_key - 1] = arguments[_key];\r\n      }\r\n\r\n      if (state in events) {\r\n        _this.emit.apply(_this, [events[state]].concat(args));\r\n      }\r\n      var event = { name: state, group: 'signaling', level: eventsToLevels[_this.state] };\r\n      if (state === 'closed') {\r\n        var reason = args[0];\r\n\r\n        event.payload = { reason: reason };\r\n        event.level = reason === CloseReason.LOCAL ? 'info' : 'error';\r\n      }\r\n      _this._eventObserver.emit('event', event);\r\n    });\r\n\r\n    _this._eventObserver.emit('event', { name: _this.state, group: 'signaling', level: eventsToLevels[_this.state] });\r\n    _this._connect();\r\n    return _this;\r\n  }\r\n\r\n  _createClass(TwilioConnection, [{\r\n    key: 'toString',\r\n    value: function toString() {\r\n      return '[TwilioConnection #' + this._instanceId + ': ' + this._ws.url + ']';\r\n    }\r\n\r\n    /**\r\n     * Close the {@link TwilioConnection}.\r\n     * @param {{code: number, reason: string}} event\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: '_close',\r\n    value: function _close(_ref) {\r\n      var code = _ref.code,\r\n          reason = _ref.reason;\r\n\r\n      if (this.state === 'closed') {\r\n        return;\r\n      }\r\n      if (this._openTimeout) {\r\n        this._openTimeout.clear();\r\n      }\r\n      if (this._welcomeTimeout) {\r\n        this._welcomeTimeout.clear();\r\n      }\r\n      if (this._heartbeatTimeout) {\r\n        this._heartbeatTimeout.clear();\r\n      }\r\n      if (this._sendHeartbeatTimeout) {\r\n        this._sendHeartbeatTimeout.clear();\r\n      }\r\n      if (this._networkMonitor) {\r\n        this._networkMonitor.stop();\r\n      }\r\n      if (this._busyWaitTimeout && code !== WS_CLOSE_BUSY_WAIT) {\r\n        this._busyWaitTimeout.clear();\r\n      }\r\n      this._messageQueue.splice(0);\r\n      var log = this._log;\r\n\r\n      if (code === WS_CLOSE_NORMAL) {\r\n        log.debug('Closed');\r\n        this.transition('closed', null, [CloseReason.LOCAL]);\r\n      } else {\r\n        log.warn('Closed: ' + code + ' - ' + reason);\r\n        if (code !== WS_CLOSE_BUSY_WAIT) {\r\n          this.transition('closed', null, [wsCloseCodesToCloseReasons.get(code) || CloseReason.REMOTE]);\r\n        }\r\n      }\r\n      var readyState = this._ws.readyState;\r\n      var WebSocket = this._options.WebSocket;\r\n\r\n\r\n      if (readyState !== WebSocket.CLOSING && readyState !== WebSocket.CLOSED) {\r\n        this._ws.close(code, reason);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Connect to the TCMP server.\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: '_connect',\r\n    value: function _connect() {\r\n      var _this2 = this;\r\n\r\n      var log = this._log;\r\n      if (this.state === 'waiting') {\r\n        this.transition('early');\r\n      } else if (this.state !== 'early') {\r\n        log.warn('Unexpected state \"' + this.state + '\" for connecting to the' + ' TCMP server.');\r\n        return;\r\n      }\r\n      this._ws = new this._options.WebSocket(this._serverUrl);\r\n      var ws = this._ws;\r\n      log.debug('Created a new WebSocket:', ws);\r\n      ws.addEventListener('close', function (event) {\r\n        return _this2._close(event);\r\n      });\r\n\r\n      var openTimeout = this._options.openTimeout;\r\n      // Add a timeout for getting the onopen event on the WebSocket (15 sec). After that, attempt to reconnect only if this is not the first attempt.\r\n\r\n      this._openTimeout = new Timeout(function () {\r\n        var reason = 'Failed to open in ' + openTimeout + ' ms';\r\n        _this2._close({ code: WS_CLOSE_OPEN_TIMEOUT, reason: reason });\r\n      }, openTimeout);\r\n\r\n      ws.addEventListener('open', function () {\r\n        log.debug('WebSocket opened:', ws);\r\n        _this2._openTimeout.clear();\r\n        _this2._startHandshake();\r\n        if (_this2._networkMonitor) {\r\n          _this2._networkMonitor.start();\r\n        }\r\n      });\r\n\r\n      ws.addEventListener('message', function (message) {\r\n        log.debug('Incoming: ' + message.data);\r\n        try {\r\n          message = JSON.parse(message.data);\r\n        } catch (error) {\r\n          _this2.emit('error', error);\r\n          return;\r\n        }\r\n\r\n        switch (message.type) {\r\n          case 'bad':\r\n            _this2._handleBad(message);\r\n            break;\r\n          case 'busy':\r\n            _this2._handleBusy(message);\r\n            break;\r\n          case 'bye':\r\n            // Do nothing.\r\n            break;\r\n          case 'msg':\r\n            _this2._handleMessage(message);\r\n          // NOTE(mpatwardhan): Each incoming message should be treated as an incoming\r\n          // heartbeat intentionally falling through to 'heartbeat' case.\r\n          // eslint-disable-next-line no-fallthrough\r\n          case 'heartbeat':\r\n            _this2._handleHeartbeat();\r\n            break;\r\n          case 'welcome':\r\n            _this2._handleWelcome(message);\r\n            break;\r\n          default:\r\n            _this2._log.debug('Unknown message type: ' + message.type);\r\n            _this2.emit('error', new Error('Unknown message type: ' + message.type));\r\n            break;\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Handle an incoming \"bad\" message.\r\n     * @param {{reason: string}} message\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: '_handleBad',\r\n    value: function _handleBad(_ref2) {\r\n      var reason = _ref2.reason;\r\n\r\n      var log = this._log;\r\n      if (!['connecting', 'open'].includes(this.state)) {\r\n        log.warn('Unexpected state \"' + this.state + '\" for handling a \"bad\" message' + ' from the TCMP server.');\r\n        return;\r\n      }\r\n      if (this.state === 'connecting') {\r\n        log.warn('Closing: ' + WS_CLOSE_HELLO_FAILED + ' - ' + reason);\r\n        this._close({ code: WS_CLOSE_HELLO_FAILED, reason: reason });\r\n        return;\r\n      }\r\n      log.debug('Error: ' + reason);\r\n      this.emit('error', new Error(reason));\r\n    }\r\n\r\n    /**\r\n     * Handle an incoming \"busy\" message.\r\n     * @param {{cookie: ?string, keepAlive: boolean, retryAfter: number}} message\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: '_handleBusy',\r\n    value: function _handleBusy(_ref3) {\r\n      var _this3 = this;\r\n\r\n      var cookie = _ref3.cookie,\r\n          keepAlive = _ref3.keepAlive,\r\n          retryAfter = _ref3.retryAfter;\r\n\r\n      var log = this._log;\r\n      if (!['connecting', 'waiting'].includes(this.state)) {\r\n        log.warn('Unexpected state \"' + this.state + '\" for handling a \"busy\" message' + ' from the TCMP server.');\r\n        return;\r\n      }\r\n      if (this._busyWaitTimeout) {\r\n        this._busyWaitTimeout.clear();\r\n      }\r\n      if (this._welcomeTimeout) {\r\n        this._welcomeTimeout.clear();\r\n      }\r\n      var reason = retryAfter < 0 ? 'Received terminal \"busy\" message' : 'Received \"busy\" message, retrying after ' + retryAfter + ' ms';\r\n\r\n      if (retryAfter < 0) {\r\n        log.warn('Closing: ' + WS_CLOSE_SERVER_BUSY + ' - ' + reason);\r\n        this._close({ code: WS_CLOSE_SERVER_BUSY, reason: reason });\r\n        return;\r\n      }\r\n      var maxConsecutiveFailedHellos = this._options.maxConsecutiveFailedHellos;\r\n\r\n      this._hellosLeft = maxConsecutiveFailedHellos;\r\n      this._cookie = cookie || null;\r\n\r\n      if (keepAlive) {\r\n        log.warn(reason);\r\n        this._busyWaitTimeout = new Timeout(function () {\r\n          return _this3._startHandshake();\r\n        }, retryAfter);\r\n      } else {\r\n        log.warn('Closing: ' + WS_CLOSE_BUSY_WAIT + ' - ' + reason);\r\n        this._close({ code: WS_CLOSE_BUSY_WAIT, reason: reason });\r\n        this._busyWaitTimeout = new Timeout(function () {\r\n          return _this3._connect();\r\n        }, retryAfter);\r\n      }\r\n\r\n      this.transition('waiting', null, [keepAlive, retryAfter]);\r\n    }\r\n\r\n    /**\r\n     * Handle an incoming \"heartbeat\" message.\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: '_handleHeartbeat',\r\n    value: function _handleHeartbeat() {\r\n      if (this.state !== 'open') {\r\n        this._log.warn('Unexpected state \"' + this.state + '\" for handling a \"heartbeat\"' + ' message from the TCMP server.');\r\n        return;\r\n      }\r\n      this._heartbeatTimeout.reset();\r\n    }\r\n\r\n    /**\r\n     * Handle a missed \"heartbeat\" message.\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: '_handleHeartbeatTimeout',\r\n    value: function _handleHeartbeatTimeout() {\r\n      if (this.state !== 'open') {\r\n        return;\r\n      }\r\n      var log = this._log;\r\n      var maxConsecutiveMissedHeartbeats = this._options.maxConsecutiveMissedHeartbeats;\r\n\r\n\r\n      log.debug('Consecutive heartbeats missed: ' + maxConsecutiveMissedHeartbeats);\r\n      var reason = 'Missed ' + maxConsecutiveMissedHeartbeats + ' \"heartbeat\" messages';\r\n      log.warn('Closing: ' + WS_CLOSE_HEARTBEATS_MISSED + ' - ' + reason);\r\n      this._close({ code: WS_CLOSE_HEARTBEATS_MISSED, reason: reason });\r\n    }\r\n\r\n    /**\r\n     * Handle an incoming \"msg\" message.\r\n     * @param {{body: object}} message\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: '_handleMessage',\r\n    value: function _handleMessage(_ref4) {\r\n      var body = _ref4.body;\r\n\r\n      if (this.state !== 'open') {\r\n        this._log.warn('Unexpected state \"' + this.state + '\" for handling a \"msg\" message' + ' from the TCMP server.');\r\n        return;\r\n      }\r\n      this.emit('message', body);\r\n    }\r\n\r\n    /**\r\n     * Handle an incoming \"welcome\" message.\r\n     * @param {{ negotiatedTimeout: number }} message\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: '_handleWelcome',\r\n    value: function _handleWelcome(_ref5) {\r\n      var _this4 = this;\r\n\r\n      var negotiatedTimeout = _ref5.negotiatedTimeout;\r\n\r\n      var log = this._log;\r\n\r\n      if (!['connecting', 'waiting'].includes(this.state)) {\r\n        log.warn('Unexpected state \"' + this.state + '\" for handling a \"welcome\"' + ' message from the TCMP server.');\r\n        return;\r\n      }\r\n\r\n      if (this.state === 'waiting') {\r\n        log.debug('Received \"welcome\" message, no need to retry connection.');\r\n        this._busyWaitTimeout.clear();\r\n      }\r\n\r\n      var maxConsecutiveMissedHeartbeats = this._options.maxConsecutiveMissedHeartbeats;\r\n\r\n      var heartbeatTimeout = negotiatedTimeout * maxConsecutiveMissedHeartbeats;\r\n      var outgoingHeartbeatTimeout = negotiatedTimeout - OUTGOING_HEARTBEAT_OFFSET;\r\n\r\n      this._welcomeTimeout.clear();\r\n      this._heartbeatTimeout = new Timeout(function () {\r\n        return _this4._handleHeartbeatTimeout();\r\n      }, heartbeatTimeout);\r\n      this._messageQueue.splice(0).forEach(function (message) {\r\n        return _this4._send(message);\r\n      });\r\n      this._sendHeartbeatTimeout = new Timeout(function () {\r\n        return _this4._sendHeartbeat();\r\n      }, outgoingHeartbeatTimeout);\r\n      this.transition('open');\r\n    }\r\n\r\n    /**\r\n     * Handle a missed \"welcome\" message.\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: '_handleWelcomeTimeout',\r\n    value: function _handleWelcomeTimeout() {\r\n      if (this.state !== 'connecting') {\r\n        return;\r\n      }\r\n      var log = this._log;\r\n\r\n      if (this._hellosLeft <= 0) {\r\n        var reason = 'All handshake attempts failed';\r\n        log.warn('Closing: ' + WS_CLOSE_WELCOME_TIMEOUT + ' - ' + reason);\r\n        this._close({ code: WS_CLOSE_WELCOME_TIMEOUT, reason: reason });\r\n        return;\r\n      }\r\n\r\n      var maxConsecutiveFailedHellos = this._options.maxConsecutiveFailedHellos;\r\n\r\n      log.warn('Handshake attempt ' + (maxConsecutiveFailedHellos - this._hellosLeft) + ' failed');\r\n      this._startHandshake();\r\n    }\r\n\r\n    /**\r\n     * Send a message to the TCMP server.\r\n     * @param {*} message\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: '_send',\r\n    value: function _send(message) {\r\n      var readyState = this._ws.readyState;\r\n      var WebSocket = this._options.WebSocket;\r\n\r\n      if (readyState === WebSocket.OPEN) {\r\n        var data = JSON.stringify(message);\r\n        this._log.debug('Outgoing: ' + data);\r\n        try {\r\n          this._ws.send(data);\r\n          if (this._sendHeartbeatTimeout) {\r\n            // Each outgoing message is to be treated as an outgoing heartbeat.\r\n            this._sendHeartbeatTimeout.reset();\r\n          }\r\n        } catch (error) {\r\n          var reason = 'Failed to send message';\r\n          this._log.warn('Closing: ' + WS_CLOSE_SEND_FAILED + ' - ' + reason);\r\n          this._close({ code: WS_CLOSE_SEND_FAILED, reason: reason });\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Send a \"heartbeat\" message.\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: '_sendHeartbeat',\r\n    value: function _sendHeartbeat() {\r\n      if (this.state === 'closed') {\r\n        return;\r\n      }\r\n      this._send({ type: 'heartbeat' });\r\n    }\r\n\r\n    /**\r\n     * Send a \"hello\" message.\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: '_sendHello',\r\n    value: function _sendHello() {\r\n      var _options = this._options,\r\n          helloBody = _options.helloBody,\r\n          timeout = _options.requestedHeartbeatTimeout;\r\n\r\n      var hello = {\r\n        id: makeUUID(),\r\n        timeout: timeout,\r\n        type: 'hello',\r\n        version: TCMP_VERSION\r\n      };\r\n      if (this._cookie) {\r\n        hello.cookie = this._cookie;\r\n      }\r\n      if (helloBody) {\r\n        hello.body = helloBody;\r\n      }\r\n      this._send(hello);\r\n    }\r\n\r\n    /**\r\n     * Send or enqueue a message.\r\n     * @param {*} message\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: '_sendOrEnqueue',\r\n    value: function _sendOrEnqueue(message) {\r\n      var _this5 = this;\r\n\r\n      if (this.state === 'closed') {\r\n        return;\r\n      }\r\n      var sendOrEnqueue = this.state === 'open' ? function (message) {\r\n        return _this5._send(message);\r\n      } : function (message) {\r\n        return _this5._messageQueue.push(message);\r\n      };\r\n\r\n      sendOrEnqueue(message);\r\n    }\r\n\r\n    /**\r\n     * Start the TCMP handshake.\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: '_startHandshake',\r\n    value: function _startHandshake() {\r\n      var _this6 = this;\r\n\r\n      if (['early', 'waiting'].includes(this.state)) {\r\n        this.transition('connecting');\r\n      }\r\n      if (this.state !== 'connecting') {\r\n        return;\r\n      }\r\n      this._hellosLeft--;\r\n      this._sendHello();\r\n      var welcomeTimeout = this._options.welcomeTimeout;\r\n\r\n      this._welcomeTimeout = new Timeout(function () {\r\n        return _this6._handleWelcomeTimeout();\r\n      }, welcomeTimeout);\r\n    }\r\n\r\n    /**\r\n     * Close the {@link TwilioConnection}.\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: 'close',\r\n    value: function close() {\r\n      if (this.state === 'closed') {\r\n        return;\r\n      }\r\n      this._sendOrEnqueue({ type: 'bye' });\r\n      this._close({ code: WS_CLOSE_NORMAL, reason: 'Normal' });\r\n    }\r\n\r\n    /**\r\n     * Send a \"msg\" message.\r\n     * @param {*} body\r\n     * @returns {void}\r\n     */\r\n\r\n  }, {\r\n    key: 'sendMessage',\r\n    value: function sendMessage(body) {\r\n      this._sendOrEnqueue({ body: body, type: 'msg' });\r\n    }\r\n  }]);\r\n\r\n  return TwilioConnection;\r\n}(StateMachine);\r\n\r\n/**\r\n * A unique string depicting the reason for the {@link TwilioConnection} being closed.\r\n * @enum {string}\r\n */\r\n\r\n\r\nTwilioConnection.CloseReason = CloseReason;\r\n\r\n/**\r\n * A {@link TwilioConnection} was closed.\r\n * @event TwilioConnection#close\r\n * @param {CloseReason} reason - The reason for the {@link TwilioConnection} being closed\r\n */\r\n\r\n/**\r\n * A {@link TwilioConnection} received an error from the TCMP server.\r\n * @event TwilioConnection#error\r\n * @param {Error} error - The TCMP server error\r\n */\r\n\r\n/**\r\n * A {@link TwilioConnection} received a message from the TCMP server.\r\n * @event TwilioConnection#message\r\n * @param {*} body - Message body\r\n */\r\n\r\n/**\r\n * A {@link TwilioConnection} completed a hello/welcome handshake with the TCMP server.\r\n * @event TwilioConnection#open\r\n */\r\n\r\n/**\r\n * A {@link TwilioConnection} received a \"busy\" message from the TCMP server.\r\n * @event TwilioConnection#waiting\r\n * @param {boolean} keepAlive - true if the WebSocket connection is retained\r\n * @param {number} retryAfter - delay in milliseconds after which a retry is attempted\r\n */\r\n\r\n/**\r\n * {@link TwilioConnection} options\r\n * @typedef {object} TwilioConnectionOptions\r\n * @property {EventObserver} [eventObserver] - Optional event observer\r\n * @property {*} [helloBody=null] - Optional body for \"hello\" message\r\n * @property {LogLevel} [logLevel=warn] - Log level of the {@link TwilioConnection}\r\n * @property {number} [maxConsecutiveFailedHellos=3] - Max. number of consecutive failed \"hello\"s\r\n * @property {number} [maxConsecutiveMissedHeartbeats=3] - Max. number of (effective) consecutive \"heartbeat\" messages that can be missed\r\n * @property {number} [requestedHeartbeatTimeout=5000] - \"heartbeat\" timeout (ms) requested by the {@link TwilioConnection}\r\n * @property {number} [welcomeTimeout=5000] - Time (ms) to wait for the \"welcome\" message after sending the \"hello\" message\r\n */\r\n\r\nmodule.exports = TwilioConnection;"]},"metadata":{},"sourceType":"script"}