{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\ARSW III\\\\Twilio\\\\src\\\\ChatApp.js\";\nimport React, { Component } from 'react';\nimport Chat from 'twilio-chat';\nimport { Chat as ChatInterface } from '@progress/kendo-react-conversational-ui';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ChatApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoading: true,\n      messages: []\n    };\n    this.room = props.room;\n    this.user = {\n      id: props.username,\n      name: props.username\n    };\n    this.setupChatClient = this.setupChatClient.bind(this);\n    this.messagesLoaded = this.messagesLoaded.bind(this);\n    this.messageAdded = this.messageAdded.bind(this);\n    this.sendMessage = this.sendMessage.bind(this);\n    this.handleError = this.handleError.bind(this);\n  }\n\n  async initializeIceBreaker() {\n    const text = await fetch(`https://ice2meetubackend.azurewebsites.net/getIceBreaker?language=${this.room}`);\n    const iceBreakerText = await text.json();\n    this.state.messages = [{\n      text: iceBreakerText.iceBreakerBody,\n      author: {\n        id: null,\n        name: \"ICE BREAKER!\"\n      },\n      timestamp: null\n    }];\n  }\n\n  async fetchCommand(message, information) {\n    const text = await fetch(`https://ice2meetubackend.azurewebsites.net/messages/command/${message}/language/${this.room}`);\n    const commandText = await text.json();\n    console.log(commandText.message);\n    let newText = {\n      text: commandText.message,\n      author: {\n        id: information.author,\n        name: information.author\n      },\n      timestamp: information.timestamp\n    };\n    this.messageAdded(newText);\n  }\n\n  async componentDidMount() {\n    const response = await fetch(`https://ice2meetubackend.azurewebsites.net/getTwilioToken?identity=${this.user.id}&room=${this.room}`).then(res => res.json()).then(data => Chat.create(data.token)).then(this.setupChatClient).catch(this.handleError);\n  }\n\n  handleError(error) {\n    console.error(error);\n    this.setState({\n      error: 'Could not load chat.'\n    });\n  }\n\n  setupChatClient(client) {\n    this.initializeIceBreaker();\n    this.client = client;\n    let nombre = this.room;\n    this.client.getChannelByUniqueName(nombre).then(channel => channel).catch(error => {\n      if (error.body.code === 50300) {\n        return this.client.createChannel({\n          uniqueName: nombre\n        });\n      } else {\n        this.handleError(error);\n      }\n    }).then(channel => {\n      this.channel = channel;\n      return this.channel.join().catch(() => {});\n    }).then(() => {\n      this.setState({\n        isLoading: false\n      });\n      this.channel.on('messageAdded', this.messageAdded);\n    }).catch(this.handleError);\n  }\n\n  twilioMessageToKendoMessage(message) {\n    console.log(message.body);\n\n    if (message.body[0] === '#') {\n      this.fetchCommand(message.body.slice(1), message);\n    }\n\n    ;\n    return {\n      text: message.body,\n      author: {\n        id: message.author,\n        name: message.author\n      },\n      timestamp: message.timestamp\n    };\n  }\n\n  messagesLoaded(messagePage) {\n    this.setState({\n      messages: messagePage.items.map(this.twilioMessageToKendoMessage)\n    });\n  }\n\n  messageAdded(message) {\n    this.setState(prevState => ({\n      messages: [...prevState.messages, this.twilioMessageToKendoMessage(message)]\n    }));\n  }\n\n  sendMessage(event) {\n    this.channel.sendMessage(event.message.text);\n  }\n\n  componentWillUnmount() {\n    this.client.shutdown();\n  }\n\n  render() {\n    if (this.state.error) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 16\n      }, this);\n    } else if (this.state.isLoading) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading chat...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 16\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ChatInterface, {\n        user: this.user,\n        messages: this.state.messages,\n        onMessageSend: this.sendMessage,\n        placeholder: \"Type a message...\",\n        width: 500\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default ChatApp;","map":{"version":3,"sources":["C:/Users/USER/Desktop/ARSW III/Twilio/src/ChatApp.js"],"names":["React","Component","Chat","ChatInterface","ChatApp","constructor","props","state","error","isLoading","messages","room","user","id","username","name","setupChatClient","bind","messagesLoaded","messageAdded","sendMessage","handleError","initializeIceBreaker","text","fetch","iceBreakerText","json","iceBreakerBody","author","timestamp","fetchCommand","message","information","commandText","console","log","newText","componentDidMount","response","then","res","data","create","token","catch","setState","client","nombre","getChannelByUniqueName","channel","body","code","createChannel","uniqueName","join","on","twilioMessageToKendoMessage","slice","messagePage","items","map","prevState","event","componentWillUnmount","shutdown","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Chat from 'twilio-chat';\r\nimport { Chat as ChatInterface } from '@progress/kendo-react-conversational-ui';\r\n\r\nclass ChatApp extends Component {\r\n  constructor(props) {\r\n    \r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoading: true,\r\n      messages:[]\r\n    };\r\n    this.room = props.room;\r\n\r\n    this.user = {\r\n      id: props.username,\r\n      name: props.username\r\n    };\r\n\r\n\r\n\r\n    this.setupChatClient = this.setupChatClient.bind(this);\r\n    this.messagesLoaded = this.messagesLoaded.bind(this);\r\n    this.messageAdded = this.messageAdded.bind(this);\r\n    this.sendMessage = this.sendMessage.bind(this);\r\n    this.handleError = this.handleError.bind(this);\r\n    \r\n    \r\n  }\r\n\r\n\r\n  async initializeIceBreaker(){\r\n    \r\n    \r\n    const text=await fetch(`https://ice2meetubackend.azurewebsites.net/getIceBreaker?language=${this.room}`);\r\n    const iceBreakerText = await text.json();\r\n    \r\n    \r\n    this.state.messages=[{text:iceBreakerText.iceBreakerBody,author:{id:null, name:\"ICE BREAKER!\"},timestamp:null}]\r\n  }\r\n\r\n\r\n  async fetchCommand(message, information){\r\n\r\n    const text=await fetch(`https://ice2meetubackend.azurewebsites.net/messages/command/${message}/language/${this.room}`);\r\n    const commandText = await text.json();\r\n    \r\n    console.log(commandText.message);\r\n    \r\n    let newText = {\r\n\r\n      text: commandText.message,\r\n      author: { id: information.author, name: information.author },\r\n      timestamp: information.timestamp\r\n      };\r\n\r\n    this.messageAdded(newText);\r\n\r\n    }\r\n\r\n  \r\n\r\n  async componentDidMount() {\r\n\r\n\r\n    const response = await fetch(`https://ice2meetubackend.azurewebsites.net/getTwilioToken?identity=${this.user.id}&room=${this.room}`).\r\n      then(res => res.json())\r\n      .then(data => Chat.create(data.token))\r\n      .then(this.setupChatClient)\r\n      .catch(this.handleError);\r\n    \r\n    }\r\n\r\n  handleError(error) {\r\n      console.error(error);\r\n      this.setState({\r\n        error: 'Could not load chat.'\r\n      });\r\n    }\r\n\r\n\r\n  setupChatClient(client) {      \r\n    this.initializeIceBreaker();\r\n    this.client = client;\r\n    let nombre = this.room;\r\n    this.client\r\n      .getChannelByUniqueName(nombre)\r\n      .then(channel => channel)\r\n      .catch(error => {\r\n        if (error.body.code === 50300) {\r\n          return this.client.createChannel({ uniqueName: nombre });\r\n        } else {\r\n          this.handleError(error);\r\n      }\r\n    })\r\n      .then(channel => {\r\n       this.channel = channel;\r\n       return this.channel.join().catch(() => {});\r\n      })\r\n      .then(() => {\r\n        this.setState({ isLoading: false });\r\n        this.channel.on('messageAdded', this.messageAdded);\r\n      })\r\n      .catch(this.handleError);\r\n    }\r\n\r\n    twilioMessageToKendoMessage(message) {\r\n\r\n\r\n    console.log(message.body);\r\n    if(message.body[0] === '#'){\r\n\r\n      this.fetchCommand(message.body.slice(1),message);\r\n\r\n\r\n\r\n\r\n    };\r\n    return {\r\n\r\n      text: message.body,\r\n      author: { id: message.author, name: message.author },\r\n      timestamp: message.timestamp\r\n      };\r\n\r\n    }\r\n\r\n  messagesLoaded(messagePage) {\r\n      \r\n      this.setState({\r\n        messages: messagePage.items.map(this.twilioMessageToKendoMessage)\r\n        });\r\n    }\r\n\r\n    messageAdded(message) {\r\n\r\n    \r\n\r\n\r\n      \r\n    this.setState(prevState => (\r\n\r\n\r\n\r\n      {\r\n\r\n\r\n        \r\n        messages: [\r\n          ...prevState.messages,\r\n          this.twilioMessageToKendoMessage(message)\r\n        ]\r\n\r\n\r\n      }\r\n\r\n\r\n\r\n    ));\r\n\r\n\r\n    \r\n\r\n\r\n  }\r\n  sendMessage(event) {\r\n\r\n      \r\n      \r\n      \r\n      this.channel.sendMessage(event.message.text);\r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.client.shutdown();\r\n  }\r\n\r\n\r\n  render() {\r\n      \r\n      if (this.state.error) {\r\n        return <p>{this.state.error}</p>;\r\n      } else if (this.state.isLoading) {\r\n        return <p>Loading chat...</p>;\r\n      }\r\n      return (\r\n        <div>\r\n          <ChatInterface\r\n            user={this.user}\r\n            messages={this.state.messages}\r\n            onMessageSend={this.sendMessage}\r\n            placeholder={\"Type a message...\"}\r\n            width={500}\r\n          />\r\n        </div>  \r\n      );\r\n    }\r\n}\r\n\r\nexport default ChatApp;"]},"metadata":{},"sourceType":"module"}