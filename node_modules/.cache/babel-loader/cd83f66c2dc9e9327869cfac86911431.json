{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Configuration = void 0;\nconst SUBSCRIPTIONS_PATH = '/v4/Subscriptions';\nconst MAPS_PATH = '/v3/Maps';\nconst LISTS_PATH = '/v3/Lists';\nconst DOCUMENTS_PATH = '/v3/Documents';\nconst STREAMS_PATH = '/v3/Streams';\nconst INSIGHTS_PATH = '/v3/Insights';\n\nfunction getWithDefault(container, key, defaultValue) {\n  if (container && typeof container[key] !== 'undefined') {\n    return container[key];\n  }\n\n  return defaultValue;\n}\n/**\r\n * Settings container for Sync library\r\n */\n\n\nclass Configuration {\n  /**\r\n   * @param {Object} options\r\n   */\n  constructor(options = {}) {\n    const region = options.region || 'us1';\n    const defaultCdsUrl = `https://cds.${region}.twilio.com`;\n    const baseUri = options.cdsUri || defaultCdsUrl;\n    this.settings = {\n      subscriptionsUri: baseUri + SUBSCRIPTIONS_PATH,\n      documentsUri: baseUri + DOCUMENTS_PATH,\n      listsUri: baseUri + LISTS_PATH,\n      mapsUri: baseUri + MAPS_PATH,\n      streamsUri: baseUri + STREAMS_PATH,\n      insightsUri: baseUri + INSIGHTS_PATH,\n      sessionStorageEnabled: getWithDefault(options.Sync, 'enableSessionStorage', true),\n      productId: options.productId\n    };\n  }\n\n  get subscriptionsUri() {\n    return this.settings.subscriptionsUri;\n  }\n\n  get documentsUri() {\n    return this.settings.documentsUri;\n  }\n\n  get listsUri() {\n    return this.settings.listsUri;\n  }\n\n  get mapsUri() {\n    return this.settings.mapsUri;\n  }\n\n  get streamsUri() {\n    return this.settings.streamsUri;\n  }\n\n  get insightsUri() {\n    return this.settings.insightsUri;\n  }\n\n  get backoffConfig() {\n    return this.settings.backoffConfig || {};\n  }\n\n  get sessionStorageEnabled() {\n    return this.settings.sessionStorageEnabled;\n  }\n\n  get productId() {\n    return this.settings.productId;\n  }\n\n}\n\nexports.Configuration = Configuration;","map":{"version":3,"sources":["C:/Users/IJuanchoG/Desktop/Twilio/node_modules/twilio-sync/lib/configuration.js"],"names":["Object","defineProperty","exports","value","Configuration","SUBSCRIPTIONS_PATH","MAPS_PATH","LISTS_PATH","DOCUMENTS_PATH","STREAMS_PATH","INSIGHTS_PATH","getWithDefault","container","key","defaultValue","constructor","options","region","defaultCdsUrl","baseUri","cdsUri","settings","subscriptionsUri","documentsUri","listsUri","mapsUri","streamsUri","insightsUri","sessionStorageEnabled","Sync","productId","backoffConfig"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;AACA,MAAMC,kBAAkB,GAAG,mBAA3B;AACA,MAAMC,SAAS,GAAG,UAAlB;AACA,MAAMC,UAAU,GAAG,WAAnB;AACA,MAAMC,cAAc,GAAG,eAAvB;AACA,MAAMC,YAAY,GAAG,aAArB;AACA,MAAMC,aAAa,GAAG,cAAtB;;AACA,SAASC,cAAT,CAAwBC,SAAxB,EAAmCC,GAAnC,EAAwCC,YAAxC,EAAsD;AAClD,MAAIF,SAAS,IAAI,OAAOA,SAAS,CAACC,GAAD,CAAhB,KAA0B,WAA3C,EAAwD;AACpD,WAAOD,SAAS,CAACC,GAAD,CAAhB;AACH;;AACD,SAAOC,YAAP;AACH;AACD;AACA;AACA;;;AACA,MAAMV,aAAN,CAAoB;AAChB;AACJ;AACA;AACIW,EAAAA,WAAW,CAACC,OAAO,GAAG,EAAX,EAAe;AACtB,UAAMC,MAAM,GAAGD,OAAO,CAACC,MAAR,IAAkB,KAAjC;AACA,UAAMC,aAAa,GAAI,eAAcD,MAAO,aAA5C;AACA,UAAME,OAAO,GAAGH,OAAO,CAACI,MAAR,IAAkBF,aAAlC;AACA,SAAKG,QAAL,GAAgB;AACZC,MAAAA,gBAAgB,EAAEH,OAAO,GAAGd,kBADhB;AAEZkB,MAAAA,YAAY,EAAEJ,OAAO,GAAGX,cAFZ;AAGZgB,MAAAA,QAAQ,EAAEL,OAAO,GAAGZ,UAHR;AAIZkB,MAAAA,OAAO,EAAEN,OAAO,GAAGb,SAJP;AAKZoB,MAAAA,UAAU,EAAEP,OAAO,GAAGV,YALV;AAMZkB,MAAAA,WAAW,EAAER,OAAO,GAAGT,aANX;AAOZkB,MAAAA,qBAAqB,EAAEjB,cAAc,CAACK,OAAO,CAACa,IAAT,EAAe,sBAAf,EAAuC,IAAvC,CAPzB;AAQZC,MAAAA,SAAS,EAAEd,OAAO,CAACc;AARP,KAAhB;AAUH;;AACmB,MAAhBR,gBAAgB,GAAG;AACnB,WAAO,KAAKD,QAAL,CAAcC,gBAArB;AACH;;AACe,MAAZC,YAAY,GAAG;AACf,WAAO,KAAKF,QAAL,CAAcE,YAArB;AACH;;AACW,MAARC,QAAQ,GAAG;AACX,WAAO,KAAKH,QAAL,CAAcG,QAArB;AACH;;AACU,MAAPC,OAAO,GAAG;AACV,WAAO,KAAKJ,QAAL,CAAcI,OAArB;AACH;;AACa,MAAVC,UAAU,GAAG;AACb,WAAO,KAAKL,QAAL,CAAcK,UAArB;AACH;;AACc,MAAXC,WAAW,GAAG;AACd,WAAO,KAAKN,QAAL,CAAcM,WAArB;AACH;;AACgB,MAAbI,aAAa,GAAG;AAChB,WAAO,KAAKV,QAAL,CAAcU,aAAd,IAA+B,EAAtC;AACH;;AACwB,MAArBH,qBAAqB,GAAG;AACxB,WAAO,KAAKP,QAAL,CAAcO,qBAArB;AACH;;AACY,MAATE,SAAS,GAAG;AACZ,WAAO,KAAKT,QAAL,CAAcS,SAArB;AACH;;AA7Ce;;AA+CpB5B,OAAO,CAACE,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Configuration = void 0;\r\nconst SUBSCRIPTIONS_PATH = '/v4/Subscriptions';\r\nconst MAPS_PATH = '/v3/Maps';\r\nconst LISTS_PATH = '/v3/Lists';\r\nconst DOCUMENTS_PATH = '/v3/Documents';\r\nconst STREAMS_PATH = '/v3/Streams';\r\nconst INSIGHTS_PATH = '/v3/Insights';\r\nfunction getWithDefault(container, key, defaultValue) {\r\n    if (container && typeof container[key] !== 'undefined') {\r\n        return container[key];\r\n    }\r\n    return defaultValue;\r\n}\r\n/**\r\n * Settings container for Sync library\r\n */\r\nclass Configuration {\r\n    /**\r\n     * @param {Object} options\r\n     */\r\n    constructor(options = {}) {\r\n        const region = options.region || 'us1';\r\n        const defaultCdsUrl = `https://cds.${region}.twilio.com`;\r\n        const baseUri = options.cdsUri || defaultCdsUrl;\r\n        this.settings = {\r\n            subscriptionsUri: baseUri + SUBSCRIPTIONS_PATH,\r\n            documentsUri: baseUri + DOCUMENTS_PATH,\r\n            listsUri: baseUri + LISTS_PATH,\r\n            mapsUri: baseUri + MAPS_PATH,\r\n            streamsUri: baseUri + STREAMS_PATH,\r\n            insightsUri: baseUri + INSIGHTS_PATH,\r\n            sessionStorageEnabled: getWithDefault(options.Sync, 'enableSessionStorage', true),\r\n            productId: options.productId,\r\n        };\r\n    }\r\n    get subscriptionsUri() {\r\n        return this.settings.subscriptionsUri;\r\n    }\r\n    get documentsUri() {\r\n        return this.settings.documentsUri;\r\n    }\r\n    get listsUri() {\r\n        return this.settings.listsUri;\r\n    }\r\n    get mapsUri() {\r\n        return this.settings.mapsUri;\r\n    }\r\n    get streamsUri() {\r\n        return this.settings.streamsUri;\r\n    }\r\n    get insightsUri() {\r\n        return this.settings.insightsUri;\r\n    }\r\n    get backoffConfig() {\r\n        return this.settings.backoffConfig || {};\r\n    }\r\n    get sessionStorageEnabled() {\r\n        return this.settings.sessionStorageEnabled;\r\n    }\r\n    get productId() {\r\n        return this.settings.productId;\r\n    }\r\n}\r\nexports.Configuration = Configuration;\r\n"]},"metadata":{},"sourceType":"script"}