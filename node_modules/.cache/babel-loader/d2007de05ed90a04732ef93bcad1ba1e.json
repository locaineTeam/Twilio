{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Paginator = void 0;\n/**\r\n * @class Paginator\r\n * @classdesc Pagination helper class.\r\n *\r\n * @property {Array} items Array of elements on current page.\r\n * @property {Boolean} hasNextPage Indicates the existence of next page.\r\n * @property {Boolean} hasPrevPage Indicates the existence of previous page.\r\n */\n\nclass Paginator {\n  /*\r\n  * @constructor\r\n  * @param {Array} items Array of element for current page.\r\n  * @param {Object} params\r\n  * @private\r\n  */\n  constructor(items, source, prevToken, nextToken) {\n    this.prevToken = prevToken;\n    this.nextToken = nextToken;\n    this.items = items;\n    this.source = source;\n  }\n\n  get hasNextPage() {\n    return !!this.nextToken;\n  }\n\n  get hasPrevPage() {\n    return !!this.prevToken;\n  }\n  /**\r\n   * Request next page.\r\n   * Does not modify existing object.\r\n   * @return {Promise<Paginator>}\r\n   */\n\n\n  async nextPage() {\n    if (!this.hasNextPage) {\n      throw new Error('No next page');\n    }\n\n    return this.source(this.nextToken);\n  }\n  /**\r\n   * Request previous page.\r\n   * Does not modify existing object.\r\n   * @return {Promise<Paginator>}\r\n   */\n\n\n  async prevPage() {\n    if (!this.hasPrevPage) {\n      throw new Error('No previous page');\n    }\n\n    return this.source(this.prevToken);\n  }\n\n}\n\nexports.Paginator = Paginator;","map":{"version":3,"sources":["C:/Users/IJuanchoG/Desktop/Twilio/node_modules/twilio-sync/lib/paginator.js"],"names":["Object","defineProperty","exports","value","Paginator","constructor","items","source","prevToken","nextToken","hasNextPage","hasPrevPage","nextPage","Error","prevPage"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,SAAN,CAAgB;AACZ;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgBC,SAAhB,EAA2BC,SAA3B,EAAsC;AAC7C,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKH,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AACc,MAAXG,WAAW,GAAG;AACd,WAAO,CAAC,CAAC,KAAKD,SAAd;AACH;;AACc,MAAXE,WAAW,GAAG;AACd,WAAO,CAAC,CAAC,KAAKH,SAAd;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACkB,QAARI,QAAQ,GAAG;AACb,QAAI,CAAC,KAAKF,WAAV,EAAuB;AACnB,YAAM,IAAIG,KAAJ,CAAU,cAAV,CAAN;AACH;;AACD,WAAO,KAAKN,MAAL,CAAY,KAAKE,SAAjB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACkB,QAARK,QAAQ,GAAG;AACb,QAAI,CAAC,KAAKH,WAAV,EAAuB;AACnB,YAAM,IAAIE,KAAJ,CAAU,kBAAV,CAAN;AACH;;AACD,WAAO,KAAKN,MAAL,CAAY,KAAKC,SAAjB,CAAP;AACH;;AAxCW;;AA0ChBN,OAAO,CAACE,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Paginator = void 0;\r\n/**\r\n * @class Paginator\r\n * @classdesc Pagination helper class.\r\n *\r\n * @property {Array} items Array of elements on current page.\r\n * @property {Boolean} hasNextPage Indicates the existence of next page.\r\n * @property {Boolean} hasPrevPage Indicates the existence of previous page.\r\n */\r\nclass Paginator {\r\n    /*\r\n    * @constructor\r\n    * @param {Array} items Array of element for current page.\r\n    * @param {Object} params\r\n    * @private\r\n    */\r\n    constructor(items, source, prevToken, nextToken) {\r\n        this.prevToken = prevToken;\r\n        this.nextToken = nextToken;\r\n        this.items = items;\r\n        this.source = source;\r\n    }\r\n    get hasNextPage() {\r\n        return !!this.nextToken;\r\n    }\r\n    get hasPrevPage() {\r\n        return !!this.prevToken;\r\n    }\r\n    /**\r\n     * Request next page.\r\n     * Does not modify existing object.\r\n     * @return {Promise<Paginator>}\r\n     */\r\n    async nextPage() {\r\n        if (!this.hasNextPage) {\r\n            throw new Error('No next page');\r\n        }\r\n        return this.source(this.nextToken);\r\n    }\r\n    /**\r\n     * Request previous page.\r\n     * Does not modify existing object.\r\n     * @return {Promise<Paginator>}\r\n     */\r\n    async prevPage() {\r\n        if (!this.hasPrevPage) {\r\n            throw new Error('No previous page');\r\n        }\r\n        return this.source(this.prevToken);\r\n    }\r\n}\r\nexports.Paginator = Paginator;\r\n"]},"metadata":{},"sourceType":"script"}