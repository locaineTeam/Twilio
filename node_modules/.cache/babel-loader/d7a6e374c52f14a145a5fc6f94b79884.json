{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst events_1 = require(\"events\");\n\nconst logger_1 = require(\"./logger\");\n\nclass WebSocketChannel extends events_1.EventEmitter {\n  constructor(url) {\n    super();\n    this.url = url;\n    this.WebSocket = global['WebSocket'] || global['MozWebSocket'] || require('ws');\n  }\n\n  get isConnected() {\n    return this.socket && this.socket.readyState === 1;\n  }\n\n  connect() {\n    logger_1.log.trace('connecting to socket');\n    let socket;\n\n    try {\n      socket = new this.WebSocket(this.url);\n    } catch (e) {\n      logger_1.log.debug(`Socket error: ${this.url}`);\n      this.emit('socketError', e);\n      return;\n    }\n\n    socket.binaryType = 'arraybuffer';\n\n    socket.onopen = () => {\n      logger_1.log.debug(`socket opened ${this.url}`);\n      this.emit('connected');\n    };\n\n    socket.onclose = e => {\n      logger_1.log.debug('socket closed', e);\n      this.emit('disconnected', e);\n    };\n\n    socket.onerror = e => {\n      logger_1.log.debug('Socket error:', e);\n      this.emit('socketError', e);\n    };\n\n    socket.onmessage = message => {\n      this.emit('message', message.data);\n    };\n\n    this.socket = socket;\n  }\n\n  send(message) {\n    this.socket.send(message);\n  }\n\n  close() {\n    logger_1.log.trace('closing socket');\n\n    if (this.socket) {\n      this.socket.onopen = null;\n      this.socket.onclose = null;\n      this.socket.onerror = null;\n      this.socket.onmessage = null;\n\n      try {\n        this.socket.close();\n      } finally {}\n    }\n  }\n\n}\n\nexports.WebSocketChannel = WebSocketChannel;","map":{"version":3,"sources":["C:/Users/USER/Desktop/ARSW III/Twilio/node_modules/twilsock/lib/websocketchannel.js"],"names":["Object","defineProperty","exports","value","events_1","require","logger_1","WebSocketChannel","EventEmitter","constructor","url","WebSocket","global","isConnected","socket","readyState","connect","log","trace","e","debug","emit","binaryType","onopen","onclose","onerror","onmessage","message","data","send","close"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAME,gBAAN,SAA+BH,QAAQ,CAACI,YAAxC,CAAqD;AACjDC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb;AACA,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,SAAL,GAAiBC,MAAM,CAAC,WAAD,CAAN,IAAuBA,MAAM,CAAC,cAAD,CAA7B,IAAiDP,OAAO,CAAC,IAAD,CAAzE;AACH;;AACc,MAAXQ,WAAW,GAAG;AACd,WAAO,KAAKC,MAAL,IAAe,KAAKA,MAAL,CAAYC,UAAZ,KAA2B,CAAjD;AACH;;AACDC,EAAAA,OAAO,GAAG;AACNV,IAAAA,QAAQ,CAACW,GAAT,CAAaC,KAAb,CAAmB,sBAAnB;AACA,QAAIJ,MAAJ;;AACA,QAAI;AACAA,MAAAA,MAAM,GAAG,IAAI,KAAKH,SAAT,CAAmB,KAAKD,GAAxB,CAAT;AACH,KAFD,CAGA,OAAOS,CAAP,EAAU;AACNb,MAAAA,QAAQ,CAACW,GAAT,CAAaG,KAAb,CAAoB,iBAAgB,KAAKV,GAAI,EAA7C;AACA,WAAKW,IAAL,CAAU,aAAV,EAAyBF,CAAzB;AACA;AACH;;AACDL,IAAAA,MAAM,CAACQ,UAAP,GAAoB,aAApB;;AACAR,IAAAA,MAAM,CAACS,MAAP,GAAgB,MAAM;AAClBjB,MAAAA,QAAQ,CAACW,GAAT,CAAaG,KAAb,CAAoB,iBAAgB,KAAKV,GAAI,EAA7C;AACA,WAAKW,IAAL,CAAU,WAAV;AACH,KAHD;;AAIAP,IAAAA,MAAM,CAACU,OAAP,GAAkBL,CAAD,IAAO;AACpBb,MAAAA,QAAQ,CAACW,GAAT,CAAaG,KAAb,CAAmB,eAAnB,EAAoCD,CAApC;AACA,WAAKE,IAAL,CAAU,cAAV,EAA0BF,CAA1B;AACH,KAHD;;AAIAL,IAAAA,MAAM,CAACW,OAAP,GAAkBN,CAAD,IAAO;AACpBb,MAAAA,QAAQ,CAACW,GAAT,CAAaG,KAAb,CAAmB,eAAnB,EAAoCD,CAApC;AACA,WAAKE,IAAL,CAAU,aAAV,EAAyBF,CAAzB;AACH,KAHD;;AAIAL,IAAAA,MAAM,CAACY,SAAP,GAAoBC,OAAD,IAAa;AAC5B,WAAKN,IAAL,CAAU,SAAV,EAAqBM,OAAO,CAACC,IAA7B;AACH,KAFD;;AAGA,SAAKd,MAAL,GAAcA,MAAd;AACH;;AACDe,EAAAA,IAAI,CAACF,OAAD,EAAU;AACV,SAAKb,MAAL,CAAYe,IAAZ,CAAiBF,OAAjB;AACH;;AACDG,EAAAA,KAAK,GAAG;AACJxB,IAAAA,QAAQ,CAACW,GAAT,CAAaC,KAAb,CAAmB,gBAAnB;;AACA,QAAI,KAAKJ,MAAT,EAAiB;AACb,WAAKA,MAAL,CAAYS,MAAZ,GAAqB,IAArB;AACA,WAAKT,MAAL,CAAYU,OAAZ,GAAsB,IAAtB;AACA,WAAKV,MAAL,CAAYW,OAAZ,GAAsB,IAAtB;AACA,WAAKX,MAAL,CAAYY,SAAZ,GAAwB,IAAxB;;AACA,UAAI;AACA,aAAKZ,MAAL,CAAYgB,KAAZ;AACH,OAFD,SAGQ,CACP;AACJ;AACJ;;AAtDgD;;AAwDrD5B,OAAO,CAACK,gBAAR,GAA2BA,gBAA3B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nconst logger_1 = require(\"./logger\");\nclass WebSocketChannel extends events_1.EventEmitter {\n    constructor(url) {\n        super();\n        this.url = url;\n        this.WebSocket = global['WebSocket'] || global['MozWebSocket'] || require('ws');\n    }\n    get isConnected() {\n        return this.socket && this.socket.readyState === 1;\n    }\n    connect() {\n        logger_1.log.trace('connecting to socket');\n        let socket;\n        try {\n            socket = new this.WebSocket(this.url);\n        }\n        catch (e) {\n            logger_1.log.debug(`Socket error: ${this.url}`);\n            this.emit('socketError', e);\n            return;\n        }\n        socket.binaryType = 'arraybuffer';\n        socket.onopen = () => {\n            logger_1.log.debug(`socket opened ${this.url}`);\n            this.emit('connected');\n        };\n        socket.onclose = (e) => {\n            logger_1.log.debug('socket closed', e);\n            this.emit('disconnected', e);\n        };\n        socket.onerror = (e) => {\n            logger_1.log.debug('Socket error:', e);\n            this.emit('socketError', e);\n        };\n        socket.onmessage = (message) => {\n            this.emit('message', message.data);\n        };\n        this.socket = socket;\n    }\n    send(message) {\n        this.socket.send(message);\n    }\n    close() {\n        logger_1.log.trace('closing socket');\n        if (this.socket) {\n            this.socket.onopen = null;\n            this.socket.onclose = null;\n            this.socket.onerror = null;\n            this.socket.onmessage = null;\n            try {\n                this.socket.close();\n            }\n            finally {\n            }\n        }\n    }\n}\nexports.WebSocketChannel = WebSocketChannel;\n"]},"metadata":{},"sourceType":"script"}