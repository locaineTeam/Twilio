{"ast":null,"code":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('./util');\n/**\r\n * {@link StateMachine} represents a state machine. The state machine supports a\r\n * reentrant locking mechanism to allow asynchronous state transitions to ensure\r\n * they have not been preempted. Calls to {@link StateMachine#takeLock} are\r\n * guaranteed to be resolved in FIFO order.\r\n * @extends EventEmitter\r\n * @property {boolean} isLocked - whether or not the {@link StateMachine} is\r\n *   locked performing asynchronous state transition\r\n * @property {string} state - the current state\r\n * @emits {@link StateMachine#stateChanged}\r\n */\n\n\nvar StateMachine = function (_EventEmitter) {\n  _inherits(StateMachine, _EventEmitter);\n  /**\r\n   * Construct a {@link StateMachine}.\r\n   * @param {string} initialState - the intiial state\r\n   * @param {object} states\r\n   */\n\n\n  function StateMachine(initialState, states) {\n    _classCallCheck(this, StateMachine);\n\n    var _this = _possibleConstructorReturn(this, (StateMachine.__proto__ || Object.getPrototypeOf(StateMachine)).call(this));\n\n    var lock = null;\n    var state = initialState;\n    states = transformStates(states);\n    Object.defineProperties(_this, {\n      _lock: {\n        get: function get() {\n          return lock;\n        },\n        set: function set(_lock) {\n          lock = _lock;\n        }\n      },\n      _reachableStates: {\n        value: reachable(states)\n      },\n      _state: {\n        get: function get() {\n          return state;\n        },\n        set: function set(_state) {\n          state = _state;\n        }\n      },\n      _states: {\n        value: states\n      },\n      _whenDeferreds: {\n        value: new Set()\n      },\n      isLocked: {\n        enumerable: true,\n        get: function get() {\n          return lock !== null;\n        }\n      },\n      state: {\n        enumerable: true,\n        get: function get() {\n          return state;\n        }\n      }\n    });\n\n    _this.on('stateChanged', function (state) {\n      _this._whenDeferreds.forEach(function (deferred) {\n        deferred.when(state, deferred.resolve, deferred.reject);\n      });\n    });\n\n    return _this;\n  }\n  /**\r\n   * Returns a promise whose executor function is called on each state change.\r\n   * @param {function(state: string, resolve: function, reject: function): void} when\r\n   * @returns {Promise.<*>}\r\n   * @private\r\n   */\n\n\n  _createClass(StateMachine, [{\n    key: '_whenPromise',\n    value: function _whenPromise(when) {\n      var _this2 = this;\n\n      if (typeof when !== 'function') {\n        return Promise.reject(new Error('when() executor must be a function'));\n      }\n\n      var deferred = util.defer();\n      deferred.when = when;\n\n      this._whenDeferreds.add(deferred);\n\n      return deferred.promise.then(function (payload) {\n        _this2._whenDeferreds.delete(deferred);\n\n        return payload;\n      }, function (error) {\n        _this2._whenDeferreds.delete(deferred);\n\n        throw error;\n      });\n    }\n    /**\r\n     * This method takes a lock and passes the {@link StateMachine#Key} to your\r\n     * transition function. You may perform zero or more state transitions in your\r\n     * transition function, but you should check for preemption in each tick. You\r\n     * may also reenter the lock. Once the Promise returned by your transition\r\n     * function resolves or rejects, this method releases the lock it acquired for\r\n     * you.\r\n     * @param {string} name - a name for the lock\r\n     * @param {function(StateMachine#Key): Promise} transitionFunction\r\n     * @returns {Promise}\r\n     */\n    // NOTE(mroberts): This method is named after a Haskell function:\n    // https://hackage.haskell.org/package/base-4.8.2.0/docs/Control-Exception.html#v:bracket\n\n  }, {\n    key: 'bracket',\n    value: function bracket(name, transitionFunction) {\n      var key = void 0;\n      var self = this;\n\n      function releaseLock(error) {\n        if (self.hasLock(key)) {\n          self.releaseLockCompletely(key);\n        }\n\n        if (error) {\n          throw error;\n        }\n      }\n\n      return this.takeLock(name).then(function gotKey(_key) {\n        key = _key;\n        return transitionFunction(key);\n      }).then(function success(result) {\n        releaseLock();\n        return result;\n      }, releaseLock);\n    }\n    /**\r\n     * Check whether or not a {@link StateMachine#Key} matches the lock.\r\n     * @param {StateMachine#Key} key\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: 'hasLock',\n    value: function hasLock(key) {\n      return this._lock === key;\n    }\n    /**\r\n     * Preempt any pending state transitions and immediately transition to the new\r\n     * state. If a lock name is specified, take the lock and return the\r\n     * {@link StateMachine#Key}.\r\n     * @param {string} newState\r\n     * @param {?string} [name=null] - a name for the lock\r\n     * @param {Array<*>} [payload=[]]\r\n     * @returns {?StateMachine#Key}\r\n     */\n\n  }, {\n    key: 'preempt',\n    value: function preempt(newState, name, payload) {\n      // 1. Check that the new state is valid.\n      if (!isValidTransition(this._states, this.state, newState)) {\n        throw new Error('Cannot transition from \"' + this.state + '\" to \"' + newState + '\"');\n      } // 2. Release the old lock, if any.\n\n\n      var oldLock = void 0;\n\n      if (this.isLocked) {\n        oldLock = this._lock;\n        this._lock = null;\n      } // 3. Take the lock, if requested.\n\n\n      var key = null;\n\n      if (name) {\n        key = this.takeLockSync(name);\n      } // 4. If a lock wasn't requested, take a \"preemption\" lock in order to\n      // maintain FIFO order of those taking locks.\n\n\n      var preemptionKey = key ? null : this.takeLockSync('preemption'); // 5. Transition.\n\n      this.transition(newState, key || preemptionKey, payload); // 6. Preempt anyone blocked on the old lock.\n\n      if (oldLock) {\n        oldLock.resolve();\n      } // 7. Release the \"preemption\" lock, if we took it.\n\n\n      if (preemptionKey) {\n        this.releaseLock(preemptionKey);\n      }\n\n      return key;\n    }\n    /**\r\n     * Release a lock. This method succeeds only if the {@link StateMachine} is\r\n     * still locked and has not been preempted.\r\n     * @param {StateMachine#Key} key\r\n     * @throws Error\r\n     */\n\n  }, {\n    key: 'releaseLock',\n    value: function releaseLock(key) {\n      if (!this.isLocked) {\n        throw new Error('Could not release the lock for ' + key.name + ' because the StateMachine is not locked');\n      } else if (!this.hasLock(key)) {\n        throw new Error('Could not release the lock for ' + key.name + ' because ' + this._lock.name + ' has the lock');\n      }\n\n      if (key.depth === 0) {\n        this._lock = null;\n        key.resolve();\n      } else {\n        key.depth--;\n      }\n    }\n    /**\r\n     * Release a lock completely, even if it has been reentered. This method\r\n     * succeeds only if the {@link StateMachine} is still locked and has not been\r\n     * preempted.\r\n     * @param {StateMachine#Key} key\r\n     * @throws Error\r\n     */\n\n  }, {\n    key: 'releaseLockCompletely',\n    value: function releaseLockCompletely(key) {\n      if (!this.isLocked) {\n        throw new Error('Could not release the lock for ' + key.name + ' because the StateMachine is not locked');\n      } else if (!this.hasLock(key)) {\n        throw new Error('Could not release the lock for ' + key.name + ' because ' + this._lock.name + ' has the lock');\n      }\n\n      key.depth = 0;\n      this._lock = null;\n      key.resolve();\n    }\n    /**\r\n     * Take a lock, returning a Promise for the {@link StateMachine#Key}. You should\r\n     * take a lock anytime you intend to perform asynchronous transitions. Calls to\r\n     * this method are guaranteed to be resolved in FIFO order. You may reenter\r\n     * a lock by passing its {@link StateMachine#Key}.\r\n     * @param {string|StateMachine#Key} nameOrKey - a name for the lock or an\r\n     * existing {@link StateMachine#Key}\r\n     * @returns {Promise<object>}\r\n     */\n\n  }, {\n    key: 'takeLock',\n    value: function takeLock(nameOrKey) {\n      var _this3 = this; // Reentrant lock\n\n\n      if ((typeof nameOrKey === 'undefined' ? 'undefined' : _typeof(nameOrKey)) === 'object') {\n        var key = nameOrKey;\n        return new Promise(function (resolve) {\n          resolve(_this3.takeLockSync(key));\n        });\n      } // New lock\n\n\n      var name = nameOrKey;\n\n      if (this.isLocked) {\n        var takeLock = this.takeLock.bind(this, name);\n        return this._lock.promise.then(takeLock);\n      }\n\n      return Promise.resolve(this.takeLockSync(name));\n    }\n    /**\r\n     * Take a lock, returning the {@Link StateMachine#Key}. This method throws if\r\n     * the {@link StateMachine} is locked or the wrong {@link StateMachine#Key} is\r\n     * provided. You may reenter a lock by passing its {@link StateMachine#Key}.\r\n     * @param {string|StateMachine#Key} nameOrKey - a name for the lock or an\r\n     * existing {@link StateMachine#Key}\r\n     * @returns {object}\r\n     * @throws Error\r\n     */\n\n  }, {\n    key: 'takeLockSync',\n    value: function takeLockSync(nameOrKey) {\n      var key = typeof nameOrKey === 'string' ? null : nameOrKey;\n      var name = key ? key.name : nameOrKey;\n\n      if (key && !this.hasLock(key) || !key && this.isLocked) {\n        throw new Error('Could not take the lock for ' + name + ' because the lock for ' + this._lock.name + ' was not released');\n      } // Reentrant lock\n\n\n      if (key) {\n        key.depth++;\n        return key;\n      } // New lock\n\n\n      var lock = makeLock(name);\n      this._lock = lock;\n      return lock;\n    }\n    /**\r\n     * Transition to a new state. If the {@link StateMachine} is locked, you must\r\n     * provide the {@link StateMachine#Key}. An invalid state or the wrong\r\n     * {@link StateMachine#Key} will throw an error.\r\n     * @param {string} newState\r\n     * @param {?StateMachine#Key} [key=null]\r\n     * @param {Array<*>} [payload=[]]\r\n     * @throws {Error}\r\n     */\n\n  }, {\n    key: 'transition',\n    value: function transition(newState, key, payload) {\n      payload = payload || []; // 1. If we're locked, required the key.\n\n      if (this.isLocked) {\n        if (!key) {\n          throw new Error('You must provide the key in order to ' + 'transition');\n        } else if (!this.hasLock(key)) {\n          throw new Error('Could not transition using the key for ' + key.name + ' because ' + this._lock.name + ' has the lock');\n        }\n      } else if (key) {\n        throw new Error('Key provided for ' + key.name + ', but the StateMachine was not locked (possibly due to preemption)');\n      } // 2. Check that the new state is valid.\n\n\n      if (!isValidTransition(this._states, this.state, newState)) {\n        throw new Error('Cannot transition from \"' + this.state + '\" to \"' + newState + '\"');\n      } // 3. Update the state and emit an event.\n\n\n      this._state = newState;\n      this.emit.apply(this, _toConsumableArray(['stateChanged', newState].concat(payload)));\n    }\n    /**\r\n     * Attempt to transition to a new state. Unlike {@link StateMachine#transition},\r\n     * this method does not throw.\r\n     * @param {string} newState\r\n     * @param {?StateMachine#Key} [key=null]\r\n     * @param {Array<*>} [payload=[]]\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: 'tryTransition',\n    value: function tryTransition(newState, key, payload) {\n      try {\n        this.transition(newState, key, payload);\n      } catch (error) {\n        return false;\n      }\n\n      return true;\n    }\n    /**\r\n     * Return a Promise that resolves when the {@link StateMachine} transitions to\r\n     * the specified state. If the {@link StateMachine} transitions such that the\r\n     * requested state becomes unreachable, the Promise rejects.\r\n     * @param {string} state\r\n     * @returns {Promise<this>}\r\n     */\n\n  }, {\n    key: 'when',\n    value: function when(state) {\n      var _this4 = this;\n\n      if (this.state === state) {\n        return Promise.resolve(this);\n      } else if (!isValidTransition(this._reachableStates, this.state, state)) {\n        return Promise.reject(createUnreachableError(this.state, state));\n      }\n\n      return this._whenPromise(function (newState, resolve, reject) {\n        if (newState === state) {\n          resolve(_this4);\n        } else if (!isValidTransition(_this4._reachableStates, newState, state)) {\n          reject(createUnreachableError(newState, state));\n        }\n      });\n    }\n  }]);\n\n  return StateMachine;\n}(EventEmitter);\n/**\r\n * @event StateMachine#stateChanged\r\n * @param {string} newState\r\n */\n\n/**\r\n * Check if a transition is valid.\r\n * @private\r\n * @param {Map<*, Set<*>>} graph\r\n * @param {*} from\r\n * @param {*} to\r\n * @returns {boolean}\r\n */\n\n\nfunction isValidTransition(graph, from, to) {\n  return graph.get(from).has(to);\n}\n/**\r\n * @typedef {object} StateMachine#Key\r\n */\n\n\nfunction makeLock(name) {\n  var lock = util.defer();\n  lock.name = name;\n  lock.depth = 0;\n  return lock;\n}\n/**\r\n * Compute the transitive closure of a graph (i.e. what nodes are reachable from\r\n * where).\r\n * @private\r\n * @param {Map<*, Set<*>>} graph\r\n * @returns {Map<*, Set<*>>}\r\n */\n\n\nfunction reachable(graph) {\n  return Array.from(graph.keys()).reduce(function (newGraph, from) {\n    return newGraph.set(from, reachableFrom(graph, from));\n  }, new Map());\n}\n/**\r\n * Compute the Set of node reachable from a particular node in the graph.\r\n * @private\r\n * @param {Map<*, Set<*>>} graph\r\n * @param {*} from\r\n * @param {Set<*>} [to]\r\n * @returns {Set<*>}\r\n */\n\n\nfunction reachableFrom(graph, from, to) {\n  to = to || new Set();\n  graph.get(from).forEach(function (node) {\n    if (!to.has(node)) {\n      to.add(node);\n      reachableFrom(graph, node, to).forEach(to.add, to);\n    }\n  });\n  return to;\n}\n\nfunction transformStates(states) {\n  var newStates = new Map();\n\n  for (var key in states) {\n    newStates.set(key, new Set(states[key]));\n  }\n\n  return newStates;\n}\n/**\r\n * Create an \"unreachable state\" Error.\r\n * @param {string} here\r\n * @param {string} there\r\n * @returns {Error}\r\n */\n\n\nfunction createUnreachableError(here, there) {\n  return new Error('\"' + there + '\" cannot be reached from \"' + here + '\"');\n}\n\nmodule.exports = StateMachine;","map":{"version":3,"sources":["C:/Users/IJuanchoG/Desktop/Twilio/node_modules/twilio-video/es5/statemachine.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","_toConsumableArray","arr","Array","isArray","arr2","from","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","value","setPrototypeOf","__proto__","EventEmitter","require","util","StateMachine","_EventEmitter","initialState","states","_this","getPrototypeOf","lock","state","transformStates","_lock","get","set","_reachableStates","reachable","_state","_states","_whenDeferreds","Set","isLocked","on","forEach","deferred","when","resolve","reject","_whenPromise","_this2","Promise","Error","defer","add","promise","then","payload","delete","error","bracket","name","transitionFunction","releaseLock","hasLock","releaseLockCompletely","takeLock","gotKey","_key","success","result","preempt","newState","isValidTransition","oldLock","takeLockSync","preemptionKey","transition","depth","nameOrKey","_this3","bind","makeLock","emit","apply","concat","tryTransition","_this4","createUnreachableError","graph","to","has","keys","reduce","newGraph","reachableFrom","Map","node","newStates","here","there","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\r\n\r\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\r\n\r\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\r\n\r\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\r\n\r\nvar EventEmitter = require('events').EventEmitter;\r\nvar util = require('./util');\r\n\r\n/**\r\n * {@link StateMachine} represents a state machine. The state machine supports a\r\n * reentrant locking mechanism to allow asynchronous state transitions to ensure\r\n * they have not been preempted. Calls to {@link StateMachine#takeLock} are\r\n * guaranteed to be resolved in FIFO order.\r\n * @extends EventEmitter\r\n * @property {boolean} isLocked - whether or not the {@link StateMachine} is\r\n *   locked performing asynchronous state transition\r\n * @property {string} state - the current state\r\n * @emits {@link StateMachine#stateChanged}\r\n */\r\n\r\nvar StateMachine = function (_EventEmitter) {\r\n  _inherits(StateMachine, _EventEmitter);\r\n\r\n  /**\r\n   * Construct a {@link StateMachine}.\r\n   * @param {string} initialState - the intiial state\r\n   * @param {object} states\r\n   */\r\n  function StateMachine(initialState, states) {\r\n    _classCallCheck(this, StateMachine);\r\n\r\n    var _this = _possibleConstructorReturn(this, (StateMachine.__proto__ || Object.getPrototypeOf(StateMachine)).call(this));\r\n\r\n    var lock = null;\r\n    var state = initialState;\r\n    states = transformStates(states);\r\n    Object.defineProperties(_this, {\r\n      _lock: {\r\n        get: function get() {\r\n          return lock;\r\n        },\r\n        set: function set(_lock) {\r\n          lock = _lock;\r\n        }\r\n      },\r\n      _reachableStates: {\r\n        value: reachable(states)\r\n      },\r\n      _state: {\r\n        get: function get() {\r\n          return state;\r\n        },\r\n        set: function set(_state) {\r\n          state = _state;\r\n        }\r\n      },\r\n      _states: {\r\n        value: states\r\n      },\r\n      _whenDeferreds: {\r\n        value: new Set()\r\n      },\r\n      isLocked: {\r\n        enumerable: true,\r\n        get: function get() {\r\n          return lock !== null;\r\n        }\r\n      },\r\n      state: {\r\n        enumerable: true,\r\n        get: function get() {\r\n          return state;\r\n        }\r\n      }\r\n    });\r\n\r\n    _this.on('stateChanged', function (state) {\r\n      _this._whenDeferreds.forEach(function (deferred) {\r\n        deferred.when(state, deferred.resolve, deferred.reject);\r\n      });\r\n    });\r\n    return _this;\r\n  }\r\n\r\n  /**\r\n   * Returns a promise whose executor function is called on each state change.\r\n   * @param {function(state: string, resolve: function, reject: function): void} when\r\n   * @returns {Promise.<*>}\r\n   * @private\r\n   */\r\n\r\n\r\n  _createClass(StateMachine, [{\r\n    key: '_whenPromise',\r\n    value: function _whenPromise(when) {\r\n      var _this2 = this;\r\n\r\n      if (typeof when !== 'function') {\r\n        return Promise.reject(new Error('when() executor must be a function'));\r\n      }\r\n\r\n      var deferred = util.defer();\r\n\r\n      deferred.when = when;\r\n      this._whenDeferreds.add(deferred);\r\n\r\n      return deferred.promise.then(function (payload) {\r\n        _this2._whenDeferreds.delete(deferred);\r\n        return payload;\r\n      }, function (error) {\r\n        _this2._whenDeferreds.delete(deferred);\r\n        throw error;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * This method takes a lock and passes the {@link StateMachine#Key} to your\r\n     * transition function. You may perform zero or more state transitions in your\r\n     * transition function, but you should check for preemption in each tick. You\r\n     * may also reenter the lock. Once the Promise returned by your transition\r\n     * function resolves or rejects, this method releases the lock it acquired for\r\n     * you.\r\n     * @param {string} name - a name for the lock\r\n     * @param {function(StateMachine#Key): Promise} transitionFunction\r\n     * @returns {Promise}\r\n     */\r\n    // NOTE(mroberts): This method is named after a Haskell function:\r\n    // https://hackage.haskell.org/package/base-4.8.2.0/docs/Control-Exception.html#v:bracket\r\n\r\n  }, {\r\n    key: 'bracket',\r\n    value: function bracket(name, transitionFunction) {\r\n      var key = void 0;\r\n      var self = this;\r\n\r\n      function releaseLock(error) {\r\n        if (self.hasLock(key)) {\r\n          self.releaseLockCompletely(key);\r\n        }\r\n        if (error) {\r\n          throw error;\r\n        }\r\n      }\r\n\r\n      return this.takeLock(name).then(function gotKey(_key) {\r\n        key = _key;\r\n        return transitionFunction(key);\r\n      }).then(function success(result) {\r\n        releaseLock();\r\n        return result;\r\n      }, releaseLock);\r\n    }\r\n\r\n    /**\r\n     * Check whether or not a {@link StateMachine#Key} matches the lock.\r\n     * @param {StateMachine#Key} key\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: 'hasLock',\r\n    value: function hasLock(key) {\r\n      return this._lock === key;\r\n    }\r\n\r\n    /**\r\n     * Preempt any pending state transitions and immediately transition to the new\r\n     * state. If a lock name is specified, take the lock and return the\r\n     * {@link StateMachine#Key}.\r\n     * @param {string} newState\r\n     * @param {?string} [name=null] - a name for the lock\r\n     * @param {Array<*>} [payload=[]]\r\n     * @returns {?StateMachine#Key}\r\n     */\r\n\r\n  }, {\r\n    key: 'preempt',\r\n    value: function preempt(newState, name, payload) {\r\n      // 1. Check that the new state is valid.\r\n      if (!isValidTransition(this._states, this.state, newState)) {\r\n        throw new Error('Cannot transition from \"' + this.state + '\" to \"' + newState + '\"');\r\n      }\r\n\r\n      // 2. Release the old lock, if any.\r\n      var oldLock = void 0;\r\n      if (this.isLocked) {\r\n        oldLock = this._lock;\r\n        this._lock = null;\r\n      }\r\n\r\n      // 3. Take the lock, if requested.\r\n      var key = null;\r\n      if (name) {\r\n        key = this.takeLockSync(name);\r\n      }\r\n\r\n      // 4. If a lock wasn't requested, take a \"preemption\" lock in order to\r\n      // maintain FIFO order of those taking locks.\r\n      var preemptionKey = key ? null : this.takeLockSync('preemption');\r\n\r\n      // 5. Transition.\r\n      this.transition(newState, key || preemptionKey, payload);\r\n\r\n      // 6. Preempt anyone blocked on the old lock.\r\n      if (oldLock) {\r\n        oldLock.resolve();\r\n      }\r\n\r\n      // 7. Release the \"preemption\" lock, if we took it.\r\n      if (preemptionKey) {\r\n        this.releaseLock(preemptionKey);\r\n      }\r\n\r\n      return key;\r\n    }\r\n\r\n    /**\r\n     * Release a lock. This method succeeds only if the {@link StateMachine} is\r\n     * still locked and has not been preempted.\r\n     * @param {StateMachine#Key} key\r\n     * @throws Error\r\n     */\r\n\r\n  }, {\r\n    key: 'releaseLock',\r\n    value: function releaseLock(key) {\r\n      if (!this.isLocked) {\r\n        throw new Error('Could not release the lock for ' + key.name + ' because the StateMachine is not locked');\r\n      } else if (!this.hasLock(key)) {\r\n        throw new Error('Could not release the lock for ' + key.name + ' because ' + this._lock.name + ' has the lock');\r\n      }\r\n      if (key.depth === 0) {\r\n        this._lock = null;\r\n        key.resolve();\r\n      } else {\r\n        key.depth--;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Release a lock completely, even if it has been reentered. This method\r\n     * succeeds only if the {@link StateMachine} is still locked and has not been\r\n     * preempted.\r\n     * @param {StateMachine#Key} key\r\n     * @throws Error\r\n     */\r\n\r\n  }, {\r\n    key: 'releaseLockCompletely',\r\n    value: function releaseLockCompletely(key) {\r\n      if (!this.isLocked) {\r\n        throw new Error('Could not release the lock for ' + key.name + ' because the StateMachine is not locked');\r\n      } else if (!this.hasLock(key)) {\r\n        throw new Error('Could not release the lock for ' + key.name + ' because ' + this._lock.name + ' has the lock');\r\n      }\r\n      key.depth = 0;\r\n      this._lock = null;\r\n      key.resolve();\r\n    }\r\n\r\n    /**\r\n     * Take a lock, returning a Promise for the {@link StateMachine#Key}. You should\r\n     * take a lock anytime you intend to perform asynchronous transitions. Calls to\r\n     * this method are guaranteed to be resolved in FIFO order. You may reenter\r\n     * a lock by passing its {@link StateMachine#Key}.\r\n     * @param {string|StateMachine#Key} nameOrKey - a name for the lock or an\r\n     * existing {@link StateMachine#Key}\r\n     * @returns {Promise<object>}\r\n     */\r\n\r\n  }, {\r\n    key: 'takeLock',\r\n    value: function takeLock(nameOrKey) {\r\n      var _this3 = this;\r\n\r\n      // Reentrant lock\r\n      if ((typeof nameOrKey === 'undefined' ? 'undefined' : _typeof(nameOrKey)) === 'object') {\r\n        var key = nameOrKey;\r\n        return new Promise(function (resolve) {\r\n          resolve(_this3.takeLockSync(key));\r\n        });\r\n      }\r\n\r\n      // New lock\r\n      var name = nameOrKey;\r\n      if (this.isLocked) {\r\n        var takeLock = this.takeLock.bind(this, name);\r\n        return this._lock.promise.then(takeLock);\r\n      }\r\n      return Promise.resolve(this.takeLockSync(name));\r\n    }\r\n\r\n    /**\r\n     * Take a lock, returning the {@Link StateMachine#Key}. This method throws if\r\n     * the {@link StateMachine} is locked or the wrong {@link StateMachine#Key} is\r\n     * provided. You may reenter a lock by passing its {@link StateMachine#Key}.\r\n     * @param {string|StateMachine#Key} nameOrKey - a name for the lock or an\r\n     * existing {@link StateMachine#Key}\r\n     * @returns {object}\r\n     * @throws Error\r\n     */\r\n\r\n  }, {\r\n    key: 'takeLockSync',\r\n    value: function takeLockSync(nameOrKey) {\r\n      var key = typeof nameOrKey === 'string' ? null : nameOrKey;\r\n      var name = key ? key.name : nameOrKey;\r\n\r\n      if (key && !this.hasLock(key) || !key && this.isLocked) {\r\n        throw new Error('Could not take the lock for ' + name + ' because the lock for ' + this._lock.name + ' was not released');\r\n      }\r\n\r\n      // Reentrant lock\r\n      if (key) {\r\n        key.depth++;\r\n        return key;\r\n      }\r\n\r\n      // New lock\r\n      var lock = makeLock(name);\r\n      this._lock = lock;\r\n      return lock;\r\n    }\r\n\r\n    /**\r\n     * Transition to a new state. If the {@link StateMachine} is locked, you must\r\n     * provide the {@link StateMachine#Key}. An invalid state or the wrong\r\n     * {@link StateMachine#Key} will throw an error.\r\n     * @param {string} newState\r\n     * @param {?StateMachine#Key} [key=null]\r\n     * @param {Array<*>} [payload=[]]\r\n     * @throws {Error}\r\n     */\r\n\r\n  }, {\r\n    key: 'transition',\r\n    value: function transition(newState, key, payload) {\r\n      payload = payload || [];\r\n\r\n      // 1. If we're locked, required the key.\r\n      if (this.isLocked) {\r\n        if (!key) {\r\n          throw new Error('You must provide the key in order to ' + 'transition');\r\n        } else if (!this.hasLock(key)) {\r\n          throw new Error('Could not transition using the key for ' + key.name + ' because ' + this._lock.name + ' has the lock');\r\n        }\r\n      } else if (key) {\r\n        throw new Error('Key provided for ' + key.name + ', but the StateMachine was not locked (possibly due to preemption)');\r\n      }\r\n\r\n      // 2. Check that the new state is valid.\r\n      if (!isValidTransition(this._states, this.state, newState)) {\r\n        throw new Error('Cannot transition from \"' + this.state + '\" to \"' + newState + '\"');\r\n      }\r\n\r\n      // 3. Update the state and emit an event.\r\n      this._state = newState;\r\n      this.emit.apply(this, _toConsumableArray(['stateChanged', newState].concat(payload)));\r\n    }\r\n\r\n    /**\r\n     * Attempt to transition to a new state. Unlike {@link StateMachine#transition},\r\n     * this method does not throw.\r\n     * @param {string} newState\r\n     * @param {?StateMachine#Key} [key=null]\r\n     * @param {Array<*>} [payload=[]]\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: 'tryTransition',\r\n    value: function tryTransition(newState, key, payload) {\r\n      try {\r\n        this.transition(newState, key, payload);\r\n      } catch (error) {\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Return a Promise that resolves when the {@link StateMachine} transitions to\r\n     * the specified state. If the {@link StateMachine} transitions such that the\r\n     * requested state becomes unreachable, the Promise rejects.\r\n     * @param {string} state\r\n     * @returns {Promise<this>}\r\n     */\r\n\r\n  }, {\r\n    key: 'when',\r\n    value: function when(state) {\r\n      var _this4 = this;\r\n\r\n      if (this.state === state) {\r\n        return Promise.resolve(this);\r\n      } else if (!isValidTransition(this._reachableStates, this.state, state)) {\r\n        return Promise.reject(createUnreachableError(this.state, state));\r\n      }\r\n      return this._whenPromise(function (newState, resolve, reject) {\r\n        if (newState === state) {\r\n          resolve(_this4);\r\n        } else if (!isValidTransition(_this4._reachableStates, newState, state)) {\r\n          reject(createUnreachableError(newState, state));\r\n        }\r\n      });\r\n    }\r\n  }]);\r\n\r\n  return StateMachine;\r\n}(EventEmitter);\r\n\r\n/**\r\n * @event StateMachine#stateChanged\r\n * @param {string} newState\r\n */\r\n\r\n/**\r\n * Check if a transition is valid.\r\n * @private\r\n * @param {Map<*, Set<*>>} graph\r\n * @param {*} from\r\n * @param {*} to\r\n * @returns {boolean}\r\n */\r\n\r\n\r\nfunction isValidTransition(graph, from, to) {\r\n  return graph.get(from).has(to);\r\n}\r\n\r\n/**\r\n * @typedef {object} StateMachine#Key\r\n */\r\n\r\nfunction makeLock(name) {\r\n  var lock = util.defer();\r\n  lock.name = name;\r\n  lock.depth = 0;\r\n  return lock;\r\n}\r\n\r\n/**\r\n * Compute the transitive closure of a graph (i.e. what nodes are reachable from\r\n * where).\r\n * @private\r\n * @param {Map<*, Set<*>>} graph\r\n * @returns {Map<*, Set<*>>}\r\n */\r\nfunction reachable(graph) {\r\n  return Array.from(graph.keys()).reduce(function (newGraph, from) {\r\n    return newGraph.set(from, reachableFrom(graph, from));\r\n  }, new Map());\r\n}\r\n\r\n/**\r\n * Compute the Set of node reachable from a particular node in the graph.\r\n * @private\r\n * @param {Map<*, Set<*>>} graph\r\n * @param {*} from\r\n * @param {Set<*>} [to]\r\n * @returns {Set<*>}\r\n */\r\nfunction reachableFrom(graph, from, to) {\r\n  to = to || new Set();\r\n  graph.get(from).forEach(function (node) {\r\n    if (!to.has(node)) {\r\n      to.add(node);\r\n      reachableFrom(graph, node, to).forEach(to.add, to);\r\n    }\r\n  });\r\n  return to;\r\n}\r\n\r\nfunction transformStates(states) {\r\n  var newStates = new Map();\r\n  for (var key in states) {\r\n    newStates.set(key, new Set(states[key]));\r\n  }\r\n  return newStates;\r\n}\r\n\r\n/**\r\n * Create an \"unreachable state\" Error.\r\n * @param {string} here\r\n * @param {string} there\r\n * @returns {Error}\r\n */\r\nfunction createUnreachableError(here, there) {\r\n  return new Error('\"' + there + '\" cannot be reached from \"' + here + '\"');\r\n}\r\n\r\nmodule.exports = StateMachine;"]},"metadata":{},"sourceType":"script"}