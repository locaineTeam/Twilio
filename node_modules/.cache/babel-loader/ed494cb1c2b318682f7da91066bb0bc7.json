{"ast":null,"code":"'use strict';\n\nvar defaultCreateLocalTracks = require('./createlocaltracks');\n\nvar _require = require('./util/constants'),\n    DEFAULT_LOG_LEVEL = _require.DEFAULT_LOG_LEVEL,\n    DEFAULT_LOGGER_NAME = _require.DEFAULT_LOGGER_NAME;\n/**\r\n * Request a {@link LocalAudioTrack} or {@link LocalVideoTrack}.\r\n * @param {Track.Kind} kind - \"audio\" or \"video\"\r\n * @param {CreateLocalTrackOptions} [options]\r\n * @returns {Promise<LocalAudioTrack|LocalVideoTrack>}\r\n * @private\r\n */\n\n\nfunction createLocalTrack(kind, options) {\n  options = Object.assign({\n    createLocalTracks: defaultCreateLocalTracks,\n    loggerName: DEFAULT_LOGGER_NAME,\n    logLevel: DEFAULT_LOG_LEVEL\n  }, options);\n  var createOptions = {};\n  createOptions.loggerName = options.loggerName;\n  createOptions.logLevel = options.logLevel;\n  delete options.loggerName;\n  delete options.logLevel;\n  var createLocalTracks = options.createLocalTracks;\n  delete options.createLocalTracks;\n  createOptions[kind] = Object.keys(options).length > 0 ? options : true;\n  return createLocalTracks(createOptions).then(function (localTracks) {\n    return localTracks[0];\n  });\n}\n/**\r\n * Request a {@link LocalAudioTrack}.\r\n * @alias module:twilio-video.createLocalAudioTrack\r\n * @param {CreateLocalTrackOptions} [options] - Options for requesting a {@link LocalAudioTrack}\r\n * @returns {Promise<LocalAudioTrack>}\r\n * @example\r\n * var Video = require('twilio-video');\r\n *\r\n * // Connect to the Room with just video\r\n * Video.connect('my-token', {\r\n *   name: 'my-cool-room',\r\n *   video: true\r\n * }).then(function(room) {\r\n *   // Add audio after connecting to the Room\r\n *   Video.createLocalAudioTrack().then(function(localTrack) {\r\n *     room.localParticipant.publishTrack(localTrack);\r\n *   });\r\n * });\r\n * @example\r\n * var Video = require('twilio-video');\r\n *\r\n * // Request the default LocalAudioTrack with a custom name\r\n * Video.createLocalAudioTrack({ name: 'microphone' }).then(function(localTrack) {\r\n *   console.log(localTrack.name); // 'microphone'\r\n * });\r\n */\n\n\nfunction createLocalAudioTrack(options) {\n  return createLocalTrack('audio', options);\n}\n/**\r\n * Request a {@link LocalVideoTrack}. Note that on mobile browsers,\r\n * the camera can be reserved by only one {@link LocalVideoTrack} at any given\r\n * time. If you attempt to create a second {@link LocalVideoTrack}, video frames\r\n * will no longer be supplied to the first {@link LocalVideoTrack}.\r\n * @alias module:twilio-video.createLocalVideoTrack\r\n * @param {CreateLocalTrackOptions} [options] - Options for requesting a {@link LocalVideoTrack}\r\n * @returns {Promise<LocalVideoTrack>}\r\n * @example\r\n * var Video = require('twilio-video');\r\n *\r\n * // Connect to the Room with just audio\r\n * Video.connect('my-token', {\r\n *   name: 'my-cool-room',\r\n *   audio: true\r\n * }).then(function(room) {\r\n *   // Add video after connecting to the Room\r\n *   Video.createLocalVideoTrack().then(function(localTrack) {\r\n *     room.localParticipant.publishTrack(localTrack);\r\n *   });\r\n * });\r\n * @example\r\n * var Video = require('twilio-video');\r\n *\r\n * // Request the default LocalVideoTrack with a custom name\r\n * Video.createLocalVideoTrack({ name: 'camera' }).then(function(localTrack) {\r\n *   console.log(localTrack.name); // 'camera'\r\n * });\r\n */\n\n\nfunction createLocalVideoTrack(options) {\n  return createLocalTrack('video', options);\n}\n/**\r\n * Create {@link LocalTrack} options. Apart from the properties listed here, you can\r\n * also specify any of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints\" target=\"_blank\">MediaTrackConstraints</a>\r\n * properties.\r\n * @typedef {MediaTrackConstraints} CreateLocalTrackOptions\r\n * @property {LogLevel|LogLevels} [logLevel='warn'] - <code>(deprecated: use [Video.Logger](module-twilio-video.html) instead.\r\n *   See [examples](module-twilio-video.html#.connect) for details)</code>\r\n *   Set the default log verbosity\r\n *   of logging. Passing a {@link LogLevel} string will use the same\r\n *   level for all components. Pass a {@link LogLevels} to set specific log\r\n *   levels.\r\n * @property {string} [loggerName='twilio-video'] - The name of the logger. Use this name when accessing the logger used by the SDK.\r\n *   See [examples](module-twilio-video.html#.connect) for details.\r\n * @property {string} [name] - The {@link LocalTrack}'s name; by default,\r\n *   it is set to the {@link LocalTrack}'s ID.\r\n * @property {boolean} [workaroundWebKitBug180748=false] - Only valid for\r\n *   {@link LocalAudioTrack}s; setting this attempts to workaround WebKit Bug\r\n *   180748, where, in Safari, getUserMedia may return a silent audio\r\n *   MediaStreamTrack.\r\n */\n\n\nmodule.exports = {\n  audio: createLocalAudioTrack,\n  video: createLocalVideoTrack\n};","map":{"version":3,"sources":["C:/Users/Usuario/Downloads/Twilio/node_modules/twilio-video/es5/createlocaltrack.js"],"names":["defaultCreateLocalTracks","require","_require","DEFAULT_LOG_LEVEL","DEFAULT_LOGGER_NAME","createLocalTrack","kind","options","Object","assign","createLocalTracks","loggerName","logLevel","createOptions","keys","length","then","localTracks","createLocalAudioTrack","createLocalVideoTrack","module","exports","audio","video"],"mappings":"AAAA;;AAEA,IAAIA,wBAAwB,GAAGC,OAAO,CAAC,qBAAD,CAAtC;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,kBAAD,CAAtB;AAAA,IACIE,iBAAiB,GAAGD,QAAQ,CAACC,iBADjC;AAAA,IAEIC,mBAAmB,GAAGF,QAAQ,CAACE,mBAFnC;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,OAAhC,EAAyC;AACvCA,EAAAA,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc;AACtBC,IAAAA,iBAAiB,EAAEV,wBADG;AAEtBW,IAAAA,UAAU,EAAEP,mBAFU;AAGtBQ,IAAAA,QAAQ,EAAET;AAHY,GAAd,EAIPI,OAJO,CAAV;AAMA,MAAIM,aAAa,GAAG,EAApB;AACAA,EAAAA,aAAa,CAACF,UAAd,GAA2BJ,OAAO,CAACI,UAAnC;AACAE,EAAAA,aAAa,CAACD,QAAd,GAAyBL,OAAO,CAACK,QAAjC;AACA,SAAOL,OAAO,CAACI,UAAf;AACA,SAAOJ,OAAO,CAACK,QAAf;AAEA,MAAIF,iBAAiB,GAAGH,OAAO,CAACG,iBAAhC;AACA,SAAOH,OAAO,CAACG,iBAAf;AACAG,EAAAA,aAAa,CAACP,IAAD,CAAb,GAAsBE,MAAM,CAACM,IAAP,CAAYP,OAAZ,EAAqBQ,MAArB,GAA8B,CAA9B,GAAkCR,OAAlC,GAA4C,IAAlE;AAEA,SAAOG,iBAAiB,CAACG,aAAD,CAAjB,CAAiCG,IAAjC,CAAsC,UAAUC,WAAV,EAAuB;AAClE,WAAOA,WAAW,CAAC,CAAD,CAAlB;AACD,GAFM,CAAP;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,qBAAT,CAA+BX,OAA/B,EAAwC;AACtC,SAAOF,gBAAgB,CAAC,OAAD,EAAUE,OAAV,CAAvB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASY,qBAAT,CAA+BZ,OAA/B,EAAwC;AACtC,SAAOF,gBAAgB,CAAC,OAAD,EAAUE,OAAV,CAAvB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAa,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,KAAK,EAAEJ,qBADQ;AAEfK,EAAAA,KAAK,EAAEJ;AAFQ,CAAjB","sourcesContent":["'use strict';\r\n\r\nvar defaultCreateLocalTracks = require('./createlocaltracks');\r\n\r\nvar _require = require('./util/constants'),\r\n    DEFAULT_LOG_LEVEL = _require.DEFAULT_LOG_LEVEL,\r\n    DEFAULT_LOGGER_NAME = _require.DEFAULT_LOGGER_NAME;\r\n\r\n/**\r\n * Request a {@link LocalAudioTrack} or {@link LocalVideoTrack}.\r\n * @param {Track.Kind} kind - \"audio\" or \"video\"\r\n * @param {CreateLocalTrackOptions} [options]\r\n * @returns {Promise<LocalAudioTrack|LocalVideoTrack>}\r\n * @private\r\n */\r\n\r\n\r\nfunction createLocalTrack(kind, options) {\r\n  options = Object.assign({\r\n    createLocalTracks: defaultCreateLocalTracks,\r\n    loggerName: DEFAULT_LOGGER_NAME,\r\n    logLevel: DEFAULT_LOG_LEVEL\r\n  }, options);\r\n\r\n  var createOptions = {};\r\n  createOptions.loggerName = options.loggerName;\r\n  createOptions.logLevel = options.logLevel;\r\n  delete options.loggerName;\r\n  delete options.logLevel;\r\n\r\n  var createLocalTracks = options.createLocalTracks;\r\n  delete options.createLocalTracks;\r\n  createOptions[kind] = Object.keys(options).length > 0 ? options : true;\r\n\r\n  return createLocalTracks(createOptions).then(function (localTracks) {\r\n    return localTracks[0];\r\n  });\r\n}\r\n\r\n/**\r\n * Request a {@link LocalAudioTrack}.\r\n * @alias module:twilio-video.createLocalAudioTrack\r\n * @param {CreateLocalTrackOptions} [options] - Options for requesting a {@link LocalAudioTrack}\r\n * @returns {Promise<LocalAudioTrack>}\r\n * @example\r\n * var Video = require('twilio-video');\r\n *\r\n * // Connect to the Room with just video\r\n * Video.connect('my-token', {\r\n *   name: 'my-cool-room',\r\n *   video: true\r\n * }).then(function(room) {\r\n *   // Add audio after connecting to the Room\r\n *   Video.createLocalAudioTrack().then(function(localTrack) {\r\n *     room.localParticipant.publishTrack(localTrack);\r\n *   });\r\n * });\r\n * @example\r\n * var Video = require('twilio-video');\r\n *\r\n * // Request the default LocalAudioTrack with a custom name\r\n * Video.createLocalAudioTrack({ name: 'microphone' }).then(function(localTrack) {\r\n *   console.log(localTrack.name); // 'microphone'\r\n * });\r\n */\r\nfunction createLocalAudioTrack(options) {\r\n  return createLocalTrack('audio', options);\r\n}\r\n\r\n/**\r\n * Request a {@link LocalVideoTrack}. Note that on mobile browsers,\r\n * the camera can be reserved by only one {@link LocalVideoTrack} at any given\r\n * time. If you attempt to create a second {@link LocalVideoTrack}, video frames\r\n * will no longer be supplied to the first {@link LocalVideoTrack}.\r\n * @alias module:twilio-video.createLocalVideoTrack\r\n * @param {CreateLocalTrackOptions} [options] - Options for requesting a {@link LocalVideoTrack}\r\n * @returns {Promise<LocalVideoTrack>}\r\n * @example\r\n * var Video = require('twilio-video');\r\n *\r\n * // Connect to the Room with just audio\r\n * Video.connect('my-token', {\r\n *   name: 'my-cool-room',\r\n *   audio: true\r\n * }).then(function(room) {\r\n *   // Add video after connecting to the Room\r\n *   Video.createLocalVideoTrack().then(function(localTrack) {\r\n *     room.localParticipant.publishTrack(localTrack);\r\n *   });\r\n * });\r\n * @example\r\n * var Video = require('twilio-video');\r\n *\r\n * // Request the default LocalVideoTrack with a custom name\r\n * Video.createLocalVideoTrack({ name: 'camera' }).then(function(localTrack) {\r\n *   console.log(localTrack.name); // 'camera'\r\n * });\r\n */\r\nfunction createLocalVideoTrack(options) {\r\n  return createLocalTrack('video', options);\r\n}\r\n\r\n/**\r\n * Create {@link LocalTrack} options. Apart from the properties listed here, you can\r\n * also specify any of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints\" target=\"_blank\">MediaTrackConstraints</a>\r\n * properties.\r\n * @typedef {MediaTrackConstraints} CreateLocalTrackOptions\r\n * @property {LogLevel|LogLevels} [logLevel='warn'] - <code>(deprecated: use [Video.Logger](module-twilio-video.html) instead.\r\n *   See [examples](module-twilio-video.html#.connect) for details)</code>\r\n *   Set the default log verbosity\r\n *   of logging. Passing a {@link LogLevel} string will use the same\r\n *   level for all components. Pass a {@link LogLevels} to set specific log\r\n *   levels.\r\n * @property {string} [loggerName='twilio-video'] - The name of the logger. Use this name when accessing the logger used by the SDK.\r\n *   See [examples](module-twilio-video.html#.connect) for details.\r\n * @property {string} [name] - The {@link LocalTrack}'s name; by default,\r\n *   it is set to the {@link LocalTrack}'s ID.\r\n * @property {boolean} [workaroundWebKitBug180748=false] - Only valid for\r\n *   {@link LocalAudioTrack}s; setting this attempts to workaround WebKit Bug\r\n *   180748, where, in Safari, getUserMedia may return a silent audio\r\n *   MediaStreamTrack.\r\n */\r\n\r\nmodule.exports = {\r\n  audio: createLocalAudioTrack,\r\n  video: createLocalVideoTrack\r\n};"]},"metadata":{},"sourceType":"script"}