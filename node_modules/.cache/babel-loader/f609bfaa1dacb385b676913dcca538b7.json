{"ast":null,"code":"'use strict';\n/**\r\n * RTCRtpSender shim.\r\n * @param {MediaStreamTrack} track\r\n * @property {MediaStreamTrack} track\r\n */\n\nfunction RTCRtpSenderShim(track) {\n  Object.defineProperties(this, {\n    track: {\n      enumerable: true,\n      value: track,\n      writable: true\n    }\n  });\n} // NOTE(mmalavalli): Because of the way we will be using this shim, there\n// are a couple of use cases that will not be covered:\n//\n// /* Case 1 */\n// const sender = pc.addTrack(track);\n// assert.equal(sender.track, track);\n// pc.removeTrack(sender);\n// assert.equal(sender.track, null); /* Error */\n//\n// /* Case 2 */\n// const sender = pc.addTrack(track);\n// const senders1 = new Set(pc.getSenders());\n// assert(senders1.has(sender));\n// pc.removeTrack(track);\n// const senders2 = new Set(pc.getSenders());\n// assert(senders2.has(sender)); /* Error */\n//\n// For now, since we only use senders for passing them to RTCPeerConnection#removeTrack(),\n// we will omit handling these use cases for now, and revisit them when we start\n// using the RTCRtpSender APIs.\n\n\nmodule.exports = RTCRtpSenderShim;","map":{"version":3,"sources":["C:/Users/USER/Desktop/ARSW III/Twilio/node_modules/@twilio/webrtc/lib/rtcrtpsender.js"],"names":["RTCRtpSenderShim","track","Object","defineProperties","enumerable","value","writable","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASA,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/BC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,IAAxB,EAA8B;AAC5BF,IAAAA,KAAK,EAAE;AACLG,MAAAA,UAAU,EAAE,IADP;AAELC,MAAAA,KAAK,EAAEJ,KAFF;AAGLK,MAAAA,QAAQ,EAAE;AAHL;AADqB,GAA9B;AAOD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBR,gBAAjB","sourcesContent":["'use strict';\r\n\r\n/**\r\n * RTCRtpSender shim.\r\n * @param {MediaStreamTrack} track\r\n * @property {MediaStreamTrack} track\r\n */\r\nfunction RTCRtpSenderShim(track) {\r\n  Object.defineProperties(this, {\r\n    track: {\r\n      enumerable: true,\r\n      value: track,\r\n      writable: true\r\n    }\r\n  });\r\n}\r\n\r\n// NOTE(mmalavalli): Because of the way we will be using this shim, there\r\n// are a couple of use cases that will not be covered:\r\n//\r\n// /* Case 1 */\r\n// const sender = pc.addTrack(track);\r\n// assert.equal(sender.track, track);\r\n// pc.removeTrack(sender);\r\n// assert.equal(sender.track, null); /* Error */\r\n//\r\n// /* Case 2 */\r\n// const sender = pc.addTrack(track);\r\n// const senders1 = new Set(pc.getSenders());\r\n// assert(senders1.has(sender));\r\n// pc.removeTrack(track);\r\n// const senders2 = new Set(pc.getSenders());\r\n// assert(senders2.has(sender)); /* Error */\r\n//\r\n// For now, since we only use senders for passing them to RTCPeerConnection#removeTrack(),\r\n// we will omit handling these use cases for now, and revisit them when we start\r\n// using the RTCRtpSender APIs.\r\n\r\nmodule.exports = RTCRtpSenderShim;\r\n"]},"metadata":{},"sourceType":"script"}