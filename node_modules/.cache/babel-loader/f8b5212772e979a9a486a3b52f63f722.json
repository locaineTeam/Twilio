{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Registrar = void 0;\n\nconst events_1 = require(\"events\");\n\nconst registrar_connector_1 = require(\"./registrar.connector\");\n\nconst twilsock_connector_1 = require(\"./twilsock.connector\");\n/**\r\n * Provides an interface to the ERS registrar\r\n */\n\n\nclass Registrar extends events_1.EventEmitter {\n  /**\r\n   * Creates the new instance of registrar client\r\n   */\n  constructor(productId, transport, twilsock, config) {\n    super();\n    this.config = config;\n    this.connectors = new Map();\n    const platform = this.detectPlatform();\n    this.connectors.set('gcm', new registrar_connector_1.RegistrarConnector('gcm', {\n      protocolVersion: 3,\n      productId,\n      platform\n    }, transport, config));\n    this.connectors.set('fcm', new registrar_connector_1.RegistrarConnector('fcm', {\n      protocolVersion: 3,\n      productId,\n      platform\n    }, transport, config));\n    this.connectors.set('apn', new registrar_connector_1.RegistrarConnector('apn', {\n      protocolVersion: 4,\n      productId,\n      platform\n    }, transport, config));\n    this.connectors.set('twilsock', new twilsock_connector_1.TwilsockConnector({\n      productId,\n      platform\n    }, twilsock, config));\n    this.connectors.get('twilsock').on('transportReady', state => this.emit('transportReady', state));\n  }\n  /**\r\n   *  Sets notification ID.\r\n   *  If new URI is different from previous, it triggers updating of registration for given channel\r\n   *\r\n   *  @param {string} channelType channel type (apn|gcm|fcm|twilsock)\r\n   *  @param {string} notificationId The notification ID\r\n   */\n\n\n  setNotificationId(channelType, notificationId) {\n    this.connector(channelType).setNotificationId(notificationId);\n  }\n  /**\r\n   * Subscribe for given type of message\r\n   *\r\n   * @param {String} messageType Message type identifier\r\n   * @param {String} channelType Channel type, can be 'twilsock', 'gcm' or 'fcm'\r\n   * @public\r\n   */\n\n\n  subscribe(messageType, channelType) {\n    return this.connector(channelType).subscribe(messageType);\n  }\n  /**\r\n   * Remove subscription\r\n   * @param {String} messageType Message type\r\n   * @param {String} channelType Channel type (twilsock or gcm/fcm)\r\n   */\n\n\n  unsubscribe(messageType, channelType) {\n    return this.connector(channelType).unsubscribe(messageType);\n  }\n\n  updateToken(token) {\n    this.connectors.forEach(connector => connector.updateToken(token));\n  }\n  /**\r\n   * @param {String} type Channel type\r\n   * @throws {Error} Error with description\r\n   */\n\n\n  connector(type) {\n    let connector = this.connectors.get(type);\n\n    if (!connector) {\n      throw new Error(`Unknown channel type: ${type}`);\n    }\n\n    return connector;\n  }\n  /**\r\n   * Returns platform string limited to max 128 chars\r\n   */\n\n\n  detectPlatform() {\n    let platform = '';\n\n    if (typeof navigator !== 'undefined') {\n      platform = 'unknown';\n\n      if (typeof navigator.product !== 'undefined') {\n        platform = navigator.product;\n      }\n\n      if (typeof navigator.userAgent !== 'undefined') {\n        platform = navigator.userAgent;\n      }\n    } else {\n      platform = 'web';\n    }\n\n    return platform.substring(0, 128);\n  }\n\n}\n\nexports.Registrar = Registrar;","map":{"version":3,"sources":["C:/Users/IJuanchoG/Desktop/Twilio/node_modules/twilio-notifications/lib/registrar.js"],"names":["Object","defineProperty","exports","value","Registrar","events_1","require","registrar_connector_1","twilsock_connector_1","EventEmitter","constructor","productId","transport","twilsock","config","connectors","Map","platform","detectPlatform","set","RegistrarConnector","protocolVersion","TwilsockConnector","get","on","state","emit","setNotificationId","channelType","notificationId","connector","subscribe","messageType","unsubscribe","updateToken","token","forEach","type","Error","navigator","product","userAgent","substring"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Registrar = void 0;\r\nconst events_1 = require(\"events\");\r\nconst registrar_connector_1 = require(\"./registrar.connector\");\r\nconst twilsock_connector_1 = require(\"./twilsock.connector\");\r\n/**\r\n * Provides an interface to the ERS registrar\r\n */\r\nclass Registrar extends events_1.EventEmitter {\r\n    /**\r\n     * Creates the new instance of registrar client\r\n     */\r\n    constructor(productId, transport, twilsock, config) {\r\n        super();\r\n        this.config = config;\r\n        this.connectors = new Map();\r\n        const platform = this.detectPlatform();\r\n        this.connectors.set('gcm', new registrar_connector_1.RegistrarConnector('gcm', { protocolVersion: 3, productId, platform }, transport, config));\r\n        this.connectors.set('fcm', new registrar_connector_1.RegistrarConnector('fcm', { protocolVersion: 3, productId, platform }, transport, config));\r\n        this.connectors.set('apn', new registrar_connector_1.RegistrarConnector('apn', { protocolVersion: 4, productId, platform }, transport, config));\r\n        this.connectors.set('twilsock', new twilsock_connector_1.TwilsockConnector({ productId, platform }, twilsock, config));\r\n        this.connectors.get('twilsock').on('transportReady', state => this.emit('transportReady', state));\r\n    }\r\n    /**\r\n     *  Sets notification ID.\r\n     *  If new URI is different from previous, it triggers updating of registration for given channel\r\n     *\r\n     *  @param {string} channelType channel type (apn|gcm|fcm|twilsock)\r\n     *  @param {string} notificationId The notification ID\r\n     */\r\n    setNotificationId(channelType, notificationId) {\r\n        this.connector(channelType).setNotificationId(notificationId);\r\n    }\r\n    /**\r\n     * Subscribe for given type of message\r\n     *\r\n     * @param {String} messageType Message type identifier\r\n     * @param {String} channelType Channel type, can be 'twilsock', 'gcm' or 'fcm'\r\n     * @public\r\n     */\r\n    subscribe(messageType, channelType) {\r\n        return this.connector(channelType).subscribe(messageType);\r\n    }\r\n    /**\r\n     * Remove subscription\r\n     * @param {String} messageType Message type\r\n     * @param {String} channelType Channel type (twilsock or gcm/fcm)\r\n     */\r\n    unsubscribe(messageType, channelType) {\r\n        return this.connector(channelType).unsubscribe(messageType);\r\n    }\r\n    updateToken(token) {\r\n        this.connectors.forEach(connector => connector.updateToken(token));\r\n    }\r\n    /**\r\n     * @param {String} type Channel type\r\n     * @throws {Error} Error with description\r\n     */\r\n    connector(type) {\r\n        let connector = this.connectors.get(type);\r\n        if (!connector) {\r\n            throw new Error(`Unknown channel type: ${type}`);\r\n        }\r\n        return connector;\r\n    }\r\n    /**\r\n     * Returns platform string limited to max 128 chars\r\n     */\r\n    detectPlatform() {\r\n        let platform = '';\r\n        if (typeof navigator !== 'undefined') {\r\n            platform = 'unknown';\r\n            if (typeof navigator.product !== 'undefined') {\r\n                platform = navigator.product;\r\n            }\r\n            if (typeof navigator.userAgent !== 'undefined') {\r\n                platform = navigator.userAgent;\r\n            }\r\n        }\r\n        else {\r\n            platform = 'web';\r\n        }\r\n        return platform.substring(0, 128);\r\n    }\r\n}\r\nexports.Registrar = Registrar;\r\n"]},"metadata":{},"sourceType":"script"}