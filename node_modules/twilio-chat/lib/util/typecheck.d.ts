declare type TypeRule = 'undefined' | 'object' | 'boolean' | 'number' | 'bigint' | 'string' | 'symbol' | 'function' | {
    new (...args: unknown[]): unknown;
};
declare type CustomRule = (value: any) => [boolean, string?, string?];
declare type TypeRuleDefinition = {
    mode: 'type';
    checks: TypeRule[];
};
declare type LiteralRuleDefinition = {
    mode: 'literal';
    checks: unknown[];
};
declare type CustomRuleDefinition = {
    mode: 'custom';
    checks: CustomRule[];
};
declare type RuleDefinition = TypeRuleDefinition | LiteralRuleDefinition | CustomRuleDefinition;
declare const type: (...checks: TypeRule[]) => TypeRuleDefinition;
declare const literal: (...checks: unknown[]) => LiteralRuleDefinition;
declare const custom: (...checks: CustomRule[]) => CustomRuleDefinition;
declare const nonEmptyString: CustomRuleDefinition;
declare const nonNegativeInteger: CustomRuleDefinition;
declare const pureObject: CustomRuleDefinition;
declare const runtimeTypeCheck: (rules: RuleDefinition[][], values: unknown[], methodName?: string) => void;
declare const stringifyReceivedType: (value: any) => string;
declare const typeCheck: (...args: (TypeRule | RuleDefinition | (TypeRule | RuleDefinition)[])[]) => (target: unknown, propertyKey: string, descriptor: PropertyDescriptor) => void;
declare const asyncTypeCheck: (...args: (TypeRule | RuleDefinition | (TypeRule | RuleDefinition)[])[]) => (target: unknown, propertyKey: string, descriptor: PropertyDescriptor) => void;
export { runtimeTypeCheck, typeCheck, asyncTypeCheck, type, literal, custom, stringifyReceivedType, nonEmptyString, nonNegativeInteger, pureObject };
